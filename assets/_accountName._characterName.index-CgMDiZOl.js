import{r as g,b as se,j as c,d as no,e as oe,f as Er,g as dn,h as to,w as ro,i as aa,o as ao,l as lt,k as Le,m as sr,n as or,p as Wa,q as io,s as so,t as oo,v as ia,x as uo,y as Va,z as Za,A as Ya,D as lo,B as z,E as co,G as fo,H as Ae,P as Oe,J as mo,S as Dn,K as U,O as mn,Q as Zn,F as tn,T as po,U as ho,V as Hn,W as go,X as Cr,Y as sa,a as Nt,R as kt,C as Xe,Z as vo,_ as yo,$ as wo,a0 as Qa,a1 as oa,a2 as _o,a3 as bo,a4 as xo,a5 as Do,a6 as Ja,I as Eo,a7 as Co,a8 as jo,a9 as So,aa as No,ab as ko,ac as Io,L as To,c as Ao}from"./index-Czi7hHVo.js";import{N as Fo,d as Mo,A as Xa,e as Oo,f as Po,g as Lo,u as Ro,L as K,I as ke,P as Rt,h as Bt,B as It,C as ct,b as Y,c as _n,a as Bo}from"./use-characters-CN7GPebv.js";function ei(e,n){return Array.isArray(e)?e.includes(n):e===n}const Yn=g.createContext({});Yn.displayName="AccordionContext";const jr=g.forwardRef(({as:e="div",bsPrefix:n,className:t,children:r,eventKey:a,...i},s)=>{const{activeEventKey:o}=g.useContext(Yn);return n=se(n,"accordion-collapse"),c.jsx(no,{ref:s,in:ei(o,a),...i,className:oe(t,n),children:c.jsx(e,{children:g.Children.only(r)})})});jr.displayName="AccordionCollapse";const $t=g.createContext({eventKey:""});$t.displayName="AccordionItemContext";const ni=g.forwardRef(({as:e="div",bsPrefix:n,className:t,onEnter:r,onEntering:a,onEntered:i,onExit:s,onExiting:o,onExited:l,...u},d)=>{n=se(n,"accordion-body");const{eventKey:f}=g.useContext($t);return c.jsx(jr,{eventKey:f,onEnter:r,onEntering:a,onEntered:i,onExit:s,onExiting:o,onExited:l,children:c.jsx(e,{ref:d,...u,className:oe(t,n)})})});ni.displayName="AccordionBody";function $o(e,n){const{activeEventKey:t,onSelect:r,alwaysOpen:a}=g.useContext(Yn);return i=>{let s=e===t?null:e;a&&(Array.isArray(t)?t.includes(e)?s=t.filter(o=>o!==e):s=[...t,e]:s=[e]),r==null||r(s,i),n==null||n(i)}}const Sr=g.forwardRef(({as:e="button",bsPrefix:n,className:t,onClick:r,...a},i)=>{n=se(n,"accordion-button");const{eventKey:s}=g.useContext($t),o=$o(s,r),{activeEventKey:l}=g.useContext(Yn);return e==="button"&&(a.type="button"),c.jsx(e,{ref:i,onClick:o,...a,"aria-expanded":Array.isArray(l)?l.includes(s):s===l,className:oe(t,n,!ei(l,s)&&"collapsed")})});Sr.displayName="AccordionButton";const ti=g.forwardRef(({as:e="h2","aria-controls":n,bsPrefix:t,className:r,children:a,onClick:i,...s},o)=>(t=se(t,"accordion-header"),c.jsx(e,{ref:o,...s,className:oe(r,t),children:c.jsx(Sr,{onClick:i,"aria-controls":n,children:a})})));ti.displayName="AccordionHeader";const ri=g.forwardRef(({as:e="div",bsPrefix:n,className:t,eventKey:r,...a},i)=>{n=se(n,"accordion-item");const s=g.useMemo(()=>({eventKey:r}),[r]);return c.jsx($t.Provider,{value:s,children:c.jsx(e,{ref:i,...a,className:oe(t,n)})})});ri.displayName="AccordionItem";const ai=g.forwardRef((e,n)=>{const{as:t="div",activeKey:r,bsPrefix:a,className:i,onSelect:s,flush:o,alwaysOpen:l,...u}=Er(e,{activeKey:"onSelect"}),d=se(a,"accordion"),f=g.useMemo(()=>({activeEventKey:r,onSelect:s,alwaysOpen:l}),[r,s,l]);return c.jsx(Yn.Provider,{value:f,children:c.jsx(t,{ref:n,...u,className:oe(i,d,o&&`${d}-flush`)})})});ai.displayName="Accordion";const ae=Object.assign(ai,{Button:Sr,Collapse:jr,Item:ri,Header:ti,Body:ni});function qo(){return g.useState(null)}function Go(e,n,t,r=!1){const a=dn(t);g.useEffect(()=>{const i=typeof e=="function"?e():e;return i.addEventListener(n,a,r),()=>i.removeEventListener(n,a,r)},[e])}const Nr=g.forwardRef(({bsPrefix:e,size:n,vertical:t=!1,className:r,role:a="group",as:i="div",...s},o)=>{const l=se(e,"btn-group");let u=l;return t&&(u=`${l}-vertical`),c.jsx(i,{...s,ref:o,role:a,className:oe(r,u,n&&`${l}-${n}`)})});Nr.displayName="ButtonGroup";function Uo(e,n,t){const r=g.useRef(e!==void 0),[a,i]=g.useState(n),s=e!==void 0,o=r.current;return r.current=s,!s&&o&&a!==n&&i(n),[s?e:a,g.useCallback((...l)=>{const[u,...d]=l;let f=t==null?void 0:t(u,...d);return i(u),f},[t])]}const qt=g.createContext(null);var ua=Object.prototype.hasOwnProperty;function la(e,n,t){for(t of e.keys())if($n(t,n))return t}function $n(e,n){var t,r,a;if(e===n)return!0;if(e&&n&&(t=e.constructor)===n.constructor){if(t===Date)return e.getTime()===n.getTime();if(t===RegExp)return e.toString()===n.toString();if(t===Array){if((r=e.length)===n.length)for(;r--&&$n(e[r],n[r]););return r===-1}if(t===Set){if(e.size!==n.size)return!1;for(r of e)if(a=r,a&&typeof a=="object"&&(a=la(n,a),!a)||!n.has(a))return!1;return!0}if(t===Map){if(e.size!==n.size)return!1;for(r of e)if(a=r[0],a&&typeof a=="object"&&(a=la(n,a),!a)||!$n(r[1],n.get(a)))return!1;return!0}if(t===ArrayBuffer)e=new Uint8Array(e),n=new Uint8Array(n);else if(t===DataView){if((r=e.byteLength)===n.byteLength)for(;r--&&e.getInt8(r)===n.getInt8(r););return r===-1}if(ArrayBuffer.isView(e)){if((r=e.byteLength)===n.byteLength)for(;r--&&e[r]===n[r];);return r===-1}if(!t||typeof e=="object"){r=0;for(t in e)if(ua.call(e,t)&&++r&&!ua.call(n,t)||!(t in n)||!$n(e[t],n[t]))return!1;return Object.keys(n).length===r}}return e!==e&&n!==n}function Ho(e){const n=to();return[e[0],g.useCallback(t=>{if(n())return e[1](t)},[n,e[1]])]}var we="top",Ie="bottom",Te="right",_e="left",kr="auto",Qn=[we,Ie,Te,_e],En="start",zn="end",zo="clippingParents",ii="viewport",Mn="popper",Ko="reference",ca=Qn.reduce(function(e,n){return e.concat([n+"-"+En,n+"-"+zn])},[]),si=[].concat(Qn,[kr]).reduce(function(e,n){return e.concat([n,n+"-"+En,n+"-"+zn])},[]),Wo="beforeRead",Vo="read",Zo="afterRead",Yo="beforeMain",Qo="main",Jo="afterMain",Xo="beforeWrite",eu="write",nu="afterWrite",tu=[Wo,Vo,Zo,Yo,Qo,Jo,Xo,eu,nu];function qe(e){return e.split("-")[0]}function Ee(e){if(e==null)return window;if(e.toString()!=="[object Window]"){var n=e.ownerDocument;return n&&n.defaultView||window}return e}function pn(e){var n=Ee(e).Element;return e instanceof n||e instanceof Element}function Ge(e){var n=Ee(e).HTMLElement;return e instanceof n||e instanceof HTMLElement}function Ir(e){if(typeof ShadowRoot>"u")return!1;var n=Ee(e).ShadowRoot;return e instanceof n||e instanceof ShadowRoot}var fn=Math.max,Tt=Math.min,Cn=Math.round;function ur(){var e=navigator.userAgentData;return e!=null&&e.brands&&Array.isArray(e.brands)?e.brands.map(function(n){return n.brand+"/"+n.version}).join(" "):navigator.userAgent}function oi(){return!/^((?!chrome|android).)*safari/i.test(ur())}function jn(e,n,t){n===void 0&&(n=!1),t===void 0&&(t=!1);var r=e.getBoundingClientRect(),a=1,i=1;n&&Ge(e)&&(a=e.offsetWidth>0&&Cn(r.width)/e.offsetWidth||1,i=e.offsetHeight>0&&Cn(r.height)/e.offsetHeight||1);var s=pn(e)?Ee(e):window,o=s.visualViewport,l=!oi()&&t,u=(r.left+(l&&o?o.offsetLeft:0))/a,d=(r.top+(l&&o?o.offsetTop:0))/i,f=r.width/a,m=r.height/i;return{width:f,height:m,top:d,right:u+f,bottom:d+m,left:u,x:u,y:d}}function Tr(e){var n=jn(e),t=e.offsetWidth,r=e.offsetHeight;return Math.abs(n.width-t)<=1&&(t=n.width),Math.abs(n.height-r)<=1&&(r=n.height),{x:e.offsetLeft,y:e.offsetTop,width:t,height:r}}function ui(e,n){var t=n.getRootNode&&n.getRootNode();if(e.contains(n))return!0;if(t&&Ir(t)){var r=n;do{if(r&&e.isSameNode(r))return!0;r=r.parentNode||r.host}while(r)}return!1}function rn(e){return e?(e.nodeName||"").toLowerCase():null}function Ve(e){return Ee(e).getComputedStyle(e)}function ru(e){return["table","td","th"].indexOf(rn(e))>=0}function sn(e){return((pn(e)?e.ownerDocument:e.document)||window.document).documentElement}function Gt(e){return rn(e)==="html"?e:e.assignedSlot||e.parentNode||(Ir(e)?e.host:null)||sn(e)}function da(e){return!Ge(e)||Ve(e).position==="fixed"?null:e.offsetParent}function au(e){var n=/firefox/i.test(ur()),t=/Trident/i.test(ur());if(t&&Ge(e)){var r=Ve(e);if(r.position==="fixed")return null}var a=Gt(e);for(Ir(a)&&(a=a.host);Ge(a)&&["html","body"].indexOf(rn(a))<0;){var i=Ve(a);if(i.transform!=="none"||i.perspective!=="none"||i.contain==="paint"||["transform","perspective"].indexOf(i.willChange)!==-1||n&&i.willChange==="filter"||n&&i.filter&&i.filter!=="none")return a;a=a.parentNode}return null}function Jn(e){for(var n=Ee(e),t=da(e);t&&ru(t)&&Ve(t).position==="static";)t=da(t);return t&&(rn(t)==="html"||rn(t)==="body"&&Ve(t).position==="static")?n:t||au(e)||n}function Ar(e){return["top","bottom"].indexOf(e)>=0?"x":"y"}function qn(e,n,t){return fn(e,Tt(n,t))}function iu(e,n,t){var r=qn(e,n,t);return r>t?t:r}function li(){return{top:0,right:0,bottom:0,left:0}}function ci(e){return Object.assign({},li(),e)}function di(e,n){return n.reduce(function(t,r){return t[r]=e,t},{})}var su=function(n,t){return n=typeof n=="function"?n(Object.assign({},t.rects,{placement:t.placement})):n,ci(typeof n!="number"?n:di(n,Qn))};function ou(e){var n,t=e.state,r=e.name,a=e.options,i=t.elements.arrow,s=t.modifiersData.popperOffsets,o=qe(t.placement),l=Ar(o),u=[_e,Te].indexOf(o)>=0,d=u?"height":"width";if(!(!i||!s)){var f=su(a.padding,t),m=Tr(i),p=l==="y"?we:_e,w=l==="y"?Ie:Te,h=t.rects.reference[d]+t.rects.reference[l]-s[l]-t.rects.popper[d],_=s[l]-t.rects.reference[l],y=Jn(i),x=y?l==="y"?y.clientHeight||0:y.clientWidth||0:0,v=h/2-_/2,b=f[p],S=x-m[d]-f[w],T=x/2-m[d]/2+v,k=qn(b,T,S),I=l;t.modifiersData[r]=(n={},n[I]=k,n.centerOffset=k-T,n)}}function uu(e){var n=e.state,t=e.options,r=t.element,a=r===void 0?"[data-popper-arrow]":r;a!=null&&(typeof a=="string"&&(a=n.elements.popper.querySelector(a),!a)||ui(n.elements.popper,a)&&(n.elements.arrow=a))}const lu={name:"arrow",enabled:!0,phase:"main",fn:ou,effect:uu,requires:["popperOffsets"],requiresIfExists:["preventOverflow"]};function Sn(e){return e.split("-")[1]}var cu={top:"auto",right:"auto",bottom:"auto",left:"auto"};function du(e,n){var t=e.x,r=e.y,a=n.devicePixelRatio||1;return{x:Cn(t*a)/a||0,y:Cn(r*a)/a||0}}function fa(e){var n,t=e.popper,r=e.popperRect,a=e.placement,i=e.variation,s=e.offsets,o=e.position,l=e.gpuAcceleration,u=e.adaptive,d=e.roundOffsets,f=e.isFixed,m=s.x,p=m===void 0?0:m,w=s.y,h=w===void 0?0:w,_=typeof d=="function"?d({x:p,y:h}):{x:p,y:h};p=_.x,h=_.y;var y=s.hasOwnProperty("x"),x=s.hasOwnProperty("y"),v=_e,b=we,S=window;if(u){var T=Jn(t),k="clientHeight",I="clientWidth";if(T===Ee(t)&&(T=sn(t),Ve(T).position!=="static"&&o==="absolute"&&(k="scrollHeight",I="scrollWidth")),T=T,a===we||(a===_e||a===Te)&&i===zn){b=Ie;var N=f&&T===S&&S.visualViewport?S.visualViewport.height:T[k];h-=N-r.height,h*=l?1:-1}if(a===_e||(a===we||a===Ie)&&i===zn){v=Te;var j=f&&T===S&&S.visualViewport?S.visualViewport.width:T[I];p-=j-r.width,p*=l?1:-1}}var D=Object.assign({position:o},u&&cu),F=d===!0?du({x:p,y:h},Ee(t)):{x:p,y:h};if(p=F.x,h=F.y,l){var O;return Object.assign({},D,(O={},O[b]=x?"0":"",O[v]=y?"0":"",O.transform=(S.devicePixelRatio||1)<=1?"translate("+p+"px, "+h+"px)":"translate3d("+p+"px, "+h+"px, 0)",O))}return Object.assign({},D,(n={},n[b]=x?h+"px":"",n[v]=y?p+"px":"",n.transform="",n))}function fu(e){var n=e.state,t=e.options,r=t.gpuAcceleration,a=r===void 0?!0:r,i=t.adaptive,s=i===void 0?!0:i,o=t.roundOffsets,l=o===void 0?!0:o,u={placement:qe(n.placement),variation:Sn(n.placement),popper:n.elements.popper,popperRect:n.rects.popper,gpuAcceleration:a,isFixed:n.options.strategy==="fixed"};n.modifiersData.popperOffsets!=null&&(n.styles.popper=Object.assign({},n.styles.popper,fa(Object.assign({},u,{offsets:n.modifiersData.popperOffsets,position:n.options.strategy,adaptive:s,roundOffsets:l})))),n.modifiersData.arrow!=null&&(n.styles.arrow=Object.assign({},n.styles.arrow,fa(Object.assign({},u,{offsets:n.modifiersData.arrow,position:"absolute",adaptive:!1,roundOffsets:l})))),n.attributes.popper=Object.assign({},n.attributes.popper,{"data-popper-placement":n.placement})}const mu={name:"computeStyles",enabled:!0,phase:"beforeWrite",fn:fu,data:{}};var dt={passive:!0};function pu(e){var n=e.state,t=e.instance,r=e.options,a=r.scroll,i=a===void 0?!0:a,s=r.resize,o=s===void 0?!0:s,l=Ee(n.elements.popper),u=[].concat(n.scrollParents.reference,n.scrollParents.popper);return i&&u.forEach(function(d){d.addEventListener("scroll",t.update,dt)}),o&&l.addEventListener("resize",t.update,dt),function(){i&&u.forEach(function(d){d.removeEventListener("scroll",t.update,dt)}),o&&l.removeEventListener("resize",t.update,dt)}}const hu={name:"eventListeners",enabled:!0,phase:"write",fn:function(){},effect:pu,data:{}};var gu={left:"right",right:"left",bottom:"top",top:"bottom"};function xt(e){return e.replace(/left|right|bottom|top/g,function(n){return gu[n]})}var vu={start:"end",end:"start"};function ma(e){return e.replace(/start|end/g,function(n){return vu[n]})}function Fr(e){var n=Ee(e),t=n.pageXOffset,r=n.pageYOffset;return{scrollLeft:t,scrollTop:r}}function Mr(e){return jn(sn(e)).left+Fr(e).scrollLeft}function yu(e,n){var t=Ee(e),r=sn(e),a=t.visualViewport,i=r.clientWidth,s=r.clientHeight,o=0,l=0;if(a){i=a.width,s=a.height;var u=oi();(u||!u&&n==="fixed")&&(o=a.offsetLeft,l=a.offsetTop)}return{width:i,height:s,x:o+Mr(e),y:l}}function wu(e){var n,t=sn(e),r=Fr(e),a=(n=e.ownerDocument)==null?void 0:n.body,i=fn(t.scrollWidth,t.clientWidth,a?a.scrollWidth:0,a?a.clientWidth:0),s=fn(t.scrollHeight,t.clientHeight,a?a.scrollHeight:0,a?a.clientHeight:0),o=-r.scrollLeft+Mr(e),l=-r.scrollTop;return Ve(a||t).direction==="rtl"&&(o+=fn(t.clientWidth,a?a.clientWidth:0)-i),{width:i,height:s,x:o,y:l}}function Or(e){var n=Ve(e),t=n.overflow,r=n.overflowX,a=n.overflowY;return/auto|scroll|overlay|hidden/.test(t+a+r)}function fi(e){return["html","body","#document"].indexOf(rn(e))>=0?e.ownerDocument.body:Ge(e)&&Or(e)?e:fi(Gt(e))}function Gn(e,n){var t;n===void 0&&(n=[]);var r=fi(e),a=r===((t=e.ownerDocument)==null?void 0:t.body),i=Ee(r),s=a?[i].concat(i.visualViewport||[],Or(r)?r:[]):r,o=n.concat(s);return a?o:o.concat(Gn(Gt(s)))}function lr(e){return Object.assign({},e,{left:e.x,top:e.y,right:e.x+e.width,bottom:e.y+e.height})}function _u(e,n){var t=jn(e,!1,n==="fixed");return t.top=t.top+e.clientTop,t.left=t.left+e.clientLeft,t.bottom=t.top+e.clientHeight,t.right=t.left+e.clientWidth,t.width=e.clientWidth,t.height=e.clientHeight,t.x=t.left,t.y=t.top,t}function pa(e,n,t){return n===ii?lr(yu(e,t)):pn(n)?_u(n,t):lr(wu(sn(e)))}function bu(e){var n=Gn(Gt(e)),t=["absolute","fixed"].indexOf(Ve(e).position)>=0,r=t&&Ge(e)?Jn(e):e;return pn(r)?n.filter(function(a){return pn(a)&&ui(a,r)&&rn(a)!=="body"}):[]}function xu(e,n,t,r){var a=n==="clippingParents"?bu(e):[].concat(n),i=[].concat(a,[t]),s=i[0],o=i.reduce(function(l,u){var d=pa(e,u,r);return l.top=fn(d.top,l.top),l.right=Tt(d.right,l.right),l.bottom=Tt(d.bottom,l.bottom),l.left=fn(d.left,l.left),l},pa(e,s,r));return o.width=o.right-o.left,o.height=o.bottom-o.top,o.x=o.left,o.y=o.top,o}function mi(e){var n=e.reference,t=e.element,r=e.placement,a=r?qe(r):null,i=r?Sn(r):null,s=n.x+n.width/2-t.width/2,o=n.y+n.height/2-t.height/2,l;switch(a){case we:l={x:s,y:n.y-t.height};break;case Ie:l={x:s,y:n.y+n.height};break;case Te:l={x:n.x+n.width,y:o};break;case _e:l={x:n.x-t.width,y:o};break;default:l={x:n.x,y:n.y}}var u=a?Ar(a):null;if(u!=null){var d=u==="y"?"height":"width";switch(i){case En:l[u]=l[u]-(n[d]/2-t[d]/2);break;case zn:l[u]=l[u]+(n[d]/2-t[d]/2);break}}return l}function Kn(e,n){n===void 0&&(n={});var t=n,r=t.placement,a=r===void 0?e.placement:r,i=t.strategy,s=i===void 0?e.strategy:i,o=t.boundary,l=o===void 0?zo:o,u=t.rootBoundary,d=u===void 0?ii:u,f=t.elementContext,m=f===void 0?Mn:f,p=t.altBoundary,w=p===void 0?!1:p,h=t.padding,_=h===void 0?0:h,y=ci(typeof _!="number"?_:di(_,Qn)),x=m===Mn?Ko:Mn,v=e.rects.popper,b=e.elements[w?x:m],S=xu(pn(b)?b:b.contextElement||sn(e.elements.popper),l,d,s),T=jn(e.elements.reference),k=mi({reference:T,element:v,placement:a}),I=lr(Object.assign({},v,k)),N=m===Mn?I:T,j={top:S.top-N.top+y.top,bottom:N.bottom-S.bottom+y.bottom,left:S.left-N.left+y.left,right:N.right-S.right+y.right},D=e.modifiersData.offset;if(m===Mn&&D){var F=D[a];Object.keys(j).forEach(function(O){var G=[Te,Ie].indexOf(O)>=0?1:-1,B=[we,Ie].indexOf(O)>=0?"y":"x";j[O]+=F[B]*G})}return j}function Du(e,n){n===void 0&&(n={});var t=n,r=t.placement,a=t.boundary,i=t.rootBoundary,s=t.padding,o=t.flipVariations,l=t.allowedAutoPlacements,u=l===void 0?si:l,d=Sn(r),f=d?o?ca:ca.filter(function(w){return Sn(w)===d}):Qn,m=f.filter(function(w){return u.indexOf(w)>=0});m.length===0&&(m=f);var p=m.reduce(function(w,h){return w[h]=Kn(e,{placement:h,boundary:a,rootBoundary:i,padding:s})[qe(h)],w},{});return Object.keys(p).sort(function(w,h){return p[w]-p[h]})}function Eu(e){if(qe(e)===kr)return[];var n=xt(e);return[ma(e),n,ma(n)]}function Cu(e){var n=e.state,t=e.options,r=e.name;if(!n.modifiersData[r]._skip){for(var a=t.mainAxis,i=a===void 0?!0:a,s=t.altAxis,o=s===void 0?!0:s,l=t.fallbackPlacements,u=t.padding,d=t.boundary,f=t.rootBoundary,m=t.altBoundary,p=t.flipVariations,w=p===void 0?!0:p,h=t.allowedAutoPlacements,_=n.options.placement,y=qe(_),x=y===_,v=l||(x||!w?[xt(_)]:Eu(_)),b=[_].concat(v).reduce(function(te,re){return te.concat(qe(re)===kr?Du(n,{placement:re,boundary:d,rootBoundary:f,padding:u,flipVariations:w,allowedAutoPlacements:h}):re)},[]),S=n.rects.reference,T=n.rects.popper,k=new Map,I=!0,N=b[0],j=0;j<b.length;j++){var D=b[j],F=qe(D),O=Sn(D)===En,G=[we,Ie].indexOf(F)>=0,B=G?"width":"height",A=Kn(n,{placement:D,boundary:d,rootBoundary:f,altBoundary:m,padding:u}),V=G?O?Te:_e:O?Ie:we;S[B]>T[B]&&(V=xt(V));var xe=xt(V),ee=[];if(i&&ee.push(A[F]<=0),o&&ee.push(A[V]<=0,A[xe]<=0),ee.every(function(te){return te})){N=D,I=!1;break}k.set(D,ee)}if(I)for(var H=w?3:1,ge=function(re){var ue=b.find(function(pe){var X=k.get(pe);if(X)return X.slice(0,re).every(function(ve){return ve})});if(ue)return N=ue,"break"},je=H;je>0;je--){var Fe=ge(je);if(Fe==="break")break}n.placement!==N&&(n.modifiersData[r]._skip=!0,n.placement=N,n.reset=!0)}}const ju={name:"flip",enabled:!0,phase:"main",fn:Cu,requiresIfExists:["offset"],data:{_skip:!1}};function ha(e,n,t){return t===void 0&&(t={x:0,y:0}),{top:e.top-n.height-t.y,right:e.right-n.width+t.x,bottom:e.bottom-n.height+t.y,left:e.left-n.width-t.x}}function ga(e){return[we,Te,Ie,_e].some(function(n){return e[n]>=0})}function Su(e){var n=e.state,t=e.name,r=n.rects.reference,a=n.rects.popper,i=n.modifiersData.preventOverflow,s=Kn(n,{elementContext:"reference"}),o=Kn(n,{altBoundary:!0}),l=ha(s,r),u=ha(o,a,i),d=ga(l),f=ga(u);n.modifiersData[t]={referenceClippingOffsets:l,popperEscapeOffsets:u,isReferenceHidden:d,hasPopperEscaped:f},n.attributes.popper=Object.assign({},n.attributes.popper,{"data-popper-reference-hidden":d,"data-popper-escaped":f})}const Nu={name:"hide",enabled:!0,phase:"main",requiresIfExists:["preventOverflow"],fn:Su};function ku(e,n,t){var r=qe(e),a=[_e,we].indexOf(r)>=0?-1:1,i=typeof t=="function"?t(Object.assign({},n,{placement:e})):t,s=i[0],o=i[1];return s=s||0,o=(o||0)*a,[_e,Te].indexOf(r)>=0?{x:o,y:s}:{x:s,y:o}}function Iu(e){var n=e.state,t=e.options,r=e.name,a=t.offset,i=a===void 0?[0,0]:a,s=si.reduce(function(d,f){return d[f]=ku(f,n.rects,i),d},{}),o=s[n.placement],l=o.x,u=o.y;n.modifiersData.popperOffsets!=null&&(n.modifiersData.popperOffsets.x+=l,n.modifiersData.popperOffsets.y+=u),n.modifiersData[r]=s}const Tu={name:"offset",enabled:!0,phase:"main",requires:["popperOffsets"],fn:Iu};function Au(e){var n=e.state,t=e.name;n.modifiersData[t]=mi({reference:n.rects.reference,element:n.rects.popper,placement:n.placement})}const Fu={name:"popperOffsets",enabled:!0,phase:"read",fn:Au,data:{}};function Mu(e){return e==="x"?"y":"x"}function Ou(e){var n=e.state,t=e.options,r=e.name,a=t.mainAxis,i=a===void 0?!0:a,s=t.altAxis,o=s===void 0?!1:s,l=t.boundary,u=t.rootBoundary,d=t.altBoundary,f=t.padding,m=t.tether,p=m===void 0?!0:m,w=t.tetherOffset,h=w===void 0?0:w,_=Kn(n,{boundary:l,rootBoundary:u,padding:f,altBoundary:d}),y=qe(n.placement),x=Sn(n.placement),v=!x,b=Ar(y),S=Mu(b),T=n.modifiersData.popperOffsets,k=n.rects.reference,I=n.rects.popper,N=typeof h=="function"?h(Object.assign({},n.rects,{placement:n.placement})):h,j=typeof N=="number"?{mainAxis:N,altAxis:N}:Object.assign({mainAxis:0,altAxis:0},N),D=n.modifiersData.offset?n.modifiersData.offset[n.placement]:null,F={x:0,y:0};if(T){if(i){var O,G=b==="y"?we:_e,B=b==="y"?Ie:Te,A=b==="y"?"height":"width",V=T[b],xe=V+_[G],ee=V-_[B],H=p?-I[A]/2:0,ge=x===En?k[A]:I[A],je=x===En?-I[A]:-k[A],Fe=n.elements.arrow,te=p&&Fe?Tr(Fe):{width:0,height:0},re=n.modifiersData["arrow#persistent"]?n.modifiersData["arrow#persistent"].padding:li(),ue=re[G],pe=re[B],X=qn(0,k[A],te[A]),ve=v?k[A]/2-H-X-ue-j.mainAxis:ge-X-ue-j.mainAxis,ne=v?-k[A]/2+H+X+pe+j.mainAxis:je+X+pe+j.mainAxis,ce=n.elements.arrow&&Jn(n.elements.arrow),In=ce?b==="y"?ce.clientTop||0:ce.clientLeft||0:0,Be=(O=D==null?void 0:D[b])!=null?O:0,Tn=V+ve-Be-In,hn=V+ne-Be,gn=qn(p?Tt(xe,Tn):xe,V,p?fn(ee,hn):ee);T[b]=gn,F[b]=gn-V}if(o){var vn,Zt=b==="x"?we:_e,Yt=b==="x"?Ie:Te,He=T[S],yn=S==="y"?"height":"width",it=He+_[Zt],st=He-_[Yt],An=[we,_e].indexOf(y)!==-1,ot=(vn=D==null?void 0:D[S])!=null?vn:0,ut=An?it:He-k[yn]-I[yn]-ot+j.altAxis,un=An?He+k[yn]+I[yn]-ot-j.altAxis:st,Fn=p&&An?iu(ut,He,un):qn(p?ut:it,He,p?un:st);T[S]=Fn,F[S]=Fn-He}n.modifiersData[r]=F}}const Pu={name:"preventOverflow",enabled:!0,phase:"main",fn:Ou,requiresIfExists:["offset"]};function Lu(e){return{scrollLeft:e.scrollLeft,scrollTop:e.scrollTop}}function Ru(e){return e===Ee(e)||!Ge(e)?Fr(e):Lu(e)}function Bu(e){var n=e.getBoundingClientRect(),t=Cn(n.width)/e.offsetWidth||1,r=Cn(n.height)/e.offsetHeight||1;return t!==1||r!==1}function $u(e,n,t){t===void 0&&(t=!1);var r=Ge(n),a=Ge(n)&&Bu(n),i=sn(n),s=jn(e,a,t),o={scrollLeft:0,scrollTop:0},l={x:0,y:0};return(r||!r&&!t)&&((rn(n)!=="body"||Or(i))&&(o=Ru(n)),Ge(n)?(l=jn(n,!0),l.x+=n.clientLeft,l.y+=n.clientTop):i&&(l.x=Mr(i))),{x:s.left+o.scrollLeft-l.x,y:s.top+o.scrollTop-l.y,width:s.width,height:s.height}}function qu(e){var n=new Map,t=new Set,r=[];e.forEach(function(i){n.set(i.name,i)});function a(i){t.add(i.name);var s=[].concat(i.requires||[],i.requiresIfExists||[]);s.forEach(function(o){if(!t.has(o)){var l=n.get(o);l&&a(l)}}),r.push(i)}return e.forEach(function(i){t.has(i.name)||a(i)}),r}function Gu(e){var n=qu(e);return tu.reduce(function(t,r){return t.concat(n.filter(function(a){return a.phase===r}))},[])}function Uu(e){var n;return function(){return n||(n=new Promise(function(t){Promise.resolve().then(function(){n=void 0,t(e())})})),n}}function Hu(e){var n=e.reduce(function(t,r){var a=t[r.name];return t[r.name]=a?Object.assign({},a,r,{options:Object.assign({},a.options,r.options),data:Object.assign({},a.data,r.data)}):r,t},{});return Object.keys(n).map(function(t){return n[t]})}var va={placement:"bottom",modifiers:[],strategy:"absolute"};function ya(){for(var e=arguments.length,n=new Array(e),t=0;t<e;t++)n[t]=arguments[t];return!n.some(function(r){return!(r&&typeof r.getBoundingClientRect=="function")})}function zu(e){e===void 0&&(e={});var n=e,t=n.defaultModifiers,r=t===void 0?[]:t,a=n.defaultOptions,i=a===void 0?va:a;return function(o,l,u){u===void 0&&(u=i);var d={placement:"bottom",orderedModifiers:[],options:Object.assign({},va,i),modifiersData:{},elements:{reference:o,popper:l},attributes:{},styles:{}},f=[],m=!1,p={state:d,setOptions:function(y){var x=typeof y=="function"?y(d.options):y;h(),d.options=Object.assign({},i,d.options,x),d.scrollParents={reference:pn(o)?Gn(o):o.contextElement?Gn(o.contextElement):[],popper:Gn(l)};var v=Gu(Hu([].concat(r,d.options.modifiers)));return d.orderedModifiers=v.filter(function(b){return b.enabled}),w(),p.update()},forceUpdate:function(){if(!m){var y=d.elements,x=y.reference,v=y.popper;if(ya(x,v)){d.rects={reference:$u(x,Jn(v),d.options.strategy==="fixed"),popper:Tr(v)},d.reset=!1,d.placement=d.options.placement,d.orderedModifiers.forEach(function(j){return d.modifiersData[j.name]=Object.assign({},j.data)});for(var b=0;b<d.orderedModifiers.length;b++){if(d.reset===!0){d.reset=!1,b=-1;continue}var S=d.orderedModifiers[b],T=S.fn,k=S.options,I=k===void 0?{}:k,N=S.name;typeof T=="function"&&(d=T({state:d,options:I,name:N,instance:p})||d)}}}},update:Uu(function(){return new Promise(function(_){p.forceUpdate(),_(d)})}),destroy:function(){h(),m=!0}};if(!ya(o,l))return p;p.setOptions(u).then(function(_){!m&&u.onFirstUpdate&&u.onFirstUpdate(_)});function w(){d.orderedModifiers.forEach(function(_){var y=_.name,x=_.options,v=x===void 0?{}:x,b=_.effect;if(typeof b=="function"){var S=b({state:d,name:y,instance:p,options:v}),T=function(){};f.push(S||T)}})}function h(){f.forEach(function(_){return _()}),f=[]}return p}}const Ku=zu({defaultModifiers:[Nu,Fu,mu,hu,Tu,ju,Pu,lu]}),Wu=["enabled","placement","strategy","modifiers"];function Vu(e,n){if(e==null)return{};var t={};for(var r in e)if({}.hasOwnProperty.call(e,r)){if(n.indexOf(r)>=0)continue;t[r]=e[r]}return t}const Zu={name:"applyStyles",enabled:!1,phase:"afterWrite",fn:()=>{}},Yu={name:"ariaDescribedBy",enabled:!0,phase:"afterWrite",effect:({state:e})=>()=>{const{reference:n,popper:t}=e.elements;if("removeAttribute"in n){const r=(n.getAttribute("aria-describedby")||"").split(",").filter(a=>a.trim()!==t.id);r.length?n.setAttribute("aria-describedby",r.join(",")):n.removeAttribute("aria-describedby")}},fn:({state:e})=>{var n;const{popper:t,reference:r}=e.elements,a=(n=t.getAttribute("role"))==null?void 0:n.toLowerCase();if(t.id&&a==="tooltip"&&"setAttribute"in r){const i=r.getAttribute("aria-describedby");if(i&&i.split(",").indexOf(t.id)!==-1)return;r.setAttribute("aria-describedby",i?`${i},${t.id}`:t.id)}}},Qu=[];function Ju(e,n,t={}){let{enabled:r=!0,placement:a="bottom",strategy:i="absolute",modifiers:s=Qu}=t,o=Vu(t,Wu);const l=g.useRef(s),u=g.useRef(),d=g.useCallback(()=>{var _;(_=u.current)==null||_.update()},[]),f=g.useCallback(()=>{var _;(_=u.current)==null||_.forceUpdate()},[]),[m,p]=Ho(g.useState({placement:a,update:d,forceUpdate:f,attributes:{},styles:{popper:{},arrow:{}}})),w=g.useMemo(()=>({name:"updateStateModifier",enabled:!0,phase:"write",requires:["computeStyles"],fn:({state:_})=>{const y={},x={};Object.keys(_.elements).forEach(v=>{y[v]=_.styles[v],x[v]=_.attributes[v]}),p({state:_,styles:y,attributes:x,update:d,forceUpdate:f,placement:_.placement})}}),[d,f,p]),h=g.useMemo(()=>($n(l.current,s)||(l.current=s),l.current),[s]);return g.useEffect(()=>{!u.current||!r||u.current.setOptions({placement:a,strategy:i,modifiers:[...h,w,Zu]})},[i,a,w,r,h]),g.useEffect(()=>{if(!(!r||e==null||n==null))return u.current=Ku(e,n,Object.assign({},o,{placement:a,strategy:i,modifiers:[...h,Yu,w]})),()=>{u.current!=null&&(u.current.destroy(),u.current=void 0,p(_=>Object.assign({},_,{attributes:{},styles:{popper:{}}})))}},[r,e,n]),m}const wa=()=>{};function Xu(e){return e.button===0}function el(e){return!!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey)}const Xt=e=>e&&("current"in e?e.current:e),_a={click:"mousedown",mouseup:"mousedown",pointerup:"pointerdown"};function nl(e,n=wa,{disabled:t,clickTrigger:r="click"}={}){const a=g.useRef(!1),i=g.useRef(!1),s=g.useCallback(u=>{const d=Xt(e);ro(!!d,"ClickOutside captured a close event but does not have a ref to compare it to. useClickOutside(), should be passed a ref that resolves to a DOM node"),a.current=!d||el(u)||!Xu(u)||!!aa(d,u.target)||i.current,i.current=!1},[e]),o=dn(u=>{const d=Xt(e);d&&aa(d,u.target)?i.current=!0:i.current=!1}),l=dn(u=>{a.current||n(u)});g.useEffect(()=>{var u,d;if(t||e==null)return;const f=ao(Xt(e)),m=f.defaultView||window;let p=(u=m.event)!=null?u:(d=m.parent)==null?void 0:d.event,w=null;_a[r]&&(w=lt(f,_a[r],o,!0));const h=lt(f,r,s,!0),_=lt(f,r,x=>{if(x===p){p=void 0;return}l(x)});let y=[];return"ontouchstart"in f.documentElement&&(y=[].slice.call(f.body.children).map(x=>lt(x,"mousemove",wa))),()=>{w==null||w(),h(),_(),y.forEach(x=>x())}},[e,t,r,s,o,l])}function tl(e){const n={};return Array.isArray(e)?(e==null||e.forEach(t=>{n[t.name]=t}),n):e||n}function rl(e={}){return Array.isArray(e)?e:Object.keys(e).map(n=>(e[n].name=n,e[n]))}function al({enabled:e,enableEvents:n,placement:t,flip:r,offset:a,fixed:i,containerPadding:s,arrowElement:o,popperConfig:l={}}){var u,d,f,m,p;const w=tl(l.modifiers);return Object.assign({},l,{placement:t,enabled:e,strategy:i?"fixed":l.strategy,modifiers:rl(Object.assign({},w,{eventListeners:{enabled:n,options:(u=w.eventListeners)==null?void 0:u.options},preventOverflow:Object.assign({},w.preventOverflow,{options:s?Object.assign({padding:s},(d=w.preventOverflow)==null?void 0:d.options):(f=w.preventOverflow)==null?void 0:f.options}),offset:{options:Object.assign({offset:a},(m=w.offset)==null?void 0:m.options)},arrow:Object.assign({},w.arrow,{enabled:!!o,options:Object.assign({},(p=w.arrow)==null?void 0:p.options,{element:o})}),flip:Object.assign({enabled:!!r},w.flip)}))})}const il=["children","usePopper"];function sl(e,n){if(e==null)return{};var t={};for(var r in e)if({}.hasOwnProperty.call(e,r)){if(n.indexOf(r)>=0)continue;t[r]=e[r]}return t}const ol=()=>{};function pi(e={}){const n=g.useContext(qt),[t,r]=qo(),a=g.useRef(!1),{flip:i,offset:s,rootCloseEvent:o,fixed:l=!1,placement:u,popperConfig:d={},enableEventListeners:f=!0,usePopper:m=!!n}=e,p=(n==null?void 0:n.show)==null?!!e.show:n.show;p&&!a.current&&(a.current=!0);const w=T=>{n==null||n.toggle(!1,T)},{placement:h,setMenu:_,menuElement:y,toggleElement:x}=n||{},v=Ju(x,y,al({placement:u||h||"bottom-start",enabled:m,enableEvents:f??p,offset:s,flip:i,fixed:l,arrowElement:t,popperConfig:d})),b=Object.assign({ref:_||ol,"aria-labelledby":x==null?void 0:x.id},v.attributes.popper,{style:v.styles.popper}),S={show:p,placement:h,hasShown:a.current,toggle:n==null?void 0:n.toggle,popper:m?v:null,arrowProps:m?Object.assign({ref:r},v.attributes.arrow,{style:v.styles.arrow}):{}};return nl(y,w,{clickTrigger:o,disabled:!p}),[b,S]}function hi(e){let{children:n,usePopper:t=!0}=e,r=sl(e,il);const[a,i]=pi(Object.assign({},r,{usePopper:t}));return c.jsx(c.Fragment,{children:n(a,i)})}hi.displayName="DropdownMenu";const Pr={prefix:String(Math.round(Math.random()*1e10)),current:0},gi=Le.createContext(Pr),ul=Le.createContext(!1);let ll=!!(typeof window<"u"&&window.document&&window.document.createElement),er=new WeakMap;function cl(e=!1){let n=g.useContext(gi),t=g.useRef(null);if(t.current===null&&!e){var r,a;let i=(a=Le.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED)===null||a===void 0||(r=a.ReactCurrentOwner)===null||r===void 0?void 0:r.current;if(i){let s=er.get(i);s==null?er.set(i,{id:n.current,state:i.memoizedState}):i.memoizedState!==s.state&&(n.current=s.id,er.delete(i))}t.current=++n.current}return t.current}function dl(e){let n=g.useContext(gi);n===Pr&&!ll&&console.warn("When server rendering, you must wrap your application in an <SSRProvider> to ensure consistent ids are generated between the client and server.");let t=cl(!!e),r=`react-aria${n.prefix}`;return e||`${r}-${t}`}function fl(e){let n=Le.useId(),[t]=g.useState(vl()),r=t?"react-aria":`react-aria${Pr.prefix}`;return e||`${r}-${n}`}const ml=typeof Le.useId=="function"?fl:dl;function pl(){return!1}function hl(){return!0}function gl(e){return()=>{}}function vl(){return typeof Le.useSyncExternalStore=="function"?Le.useSyncExternalStore(gl,pl,hl):g.useContext(ul)}const vi=e=>{var n;return((n=e.getAttribute("role"))==null?void 0:n.toLowerCase())==="menu"},ba=()=>{};function yi(){const e=ml(),{show:n=!1,toggle:t=ba,setToggle:r,menuElement:a}=g.useContext(qt)||{},i=g.useCallback(o=>{t(!n,o)},[n,t]),s={id:e,ref:r||ba,onClick:i,"aria-expanded":!!n};return a&&vi(a)&&(s["aria-haspopup"]=!0),[s,{show:n,toggle:t}]}function wi({children:e}){const[n,t]=yi();return c.jsx(c.Fragment,{children:e(n,t)})}wi.displayName="DropdownToggle";const yl=["eventKey","disabled","onClick","active","as"];function wl(e,n){if(e==null)return{};var t={};for(var r in e)if({}.hasOwnProperty.call(e,r)){if(n.indexOf(r)>=0)continue;t[r]=e[r]}return t}function _i({key:e,href:n,active:t,disabled:r,onClick:a}){const i=g.useContext(sr),s=g.useContext(Fo),{activeKey:o}=s||{},l=or(e,n),u=t==null&&e!=null?or(o)===l:t;return[{onClick:dn(f=>{r||(a==null||a(f),i&&!f.isPropagationStopped()&&i(l,f))}),"aria-disabled":r||void 0,"aria-selected":u,[Wa("dropdown-item")]:""},{isActive:u}]}const bi=g.forwardRef((e,n)=>{let{eventKey:t,disabled:r,onClick:a,active:i,as:s=io}=e,o=wl(e,yl);const[l]=_i({key:t,href:o.href,disabled:r,onClick:a,active:i});return c.jsx(s,Object.assign({},o,{ref:n},l))});bi.displayName="DropdownItem";function xa(){const e=Mo(),n=g.useRef(null),t=g.useCallback(r=>{n.current=r,e()},[e]);return[n,t]}function Xn({defaultShow:e,show:n,onSelect:t,onToggle:r,itemSelector:a=`* [${Wa("dropdown-item")}]`,focusFirstItemOnShow:i,placement:s="bottom-start",children:o}){const l=so(),[u,d]=Uo(n,e,r),[f,m]=xa(),p=f.current,[w,h]=xa(),_=w.current,y=oo(u),x=g.useRef(null),v=g.useRef(!1),b=g.useContext(sr),S=g.useCallback((D,F,O=F==null?void 0:F.type)=>{d(D,{originalEvent:F,source:O})},[d]),T=dn((D,F)=>{t==null||t(D,F),S(!1,F,"select"),F.isPropagationStopped()||b==null||b(D,F)}),k=g.useMemo(()=>({toggle:S,placement:s,show:u,menuElement:p,toggleElement:_,setMenu:m,setToggle:h}),[S,s,u,p,_,m,h]);p&&y&&!u&&(v.current=p.contains(p.ownerDocument.activeElement));const I=dn(()=>{_&&_.focus&&_.focus()}),N=dn(()=>{const D=x.current;let F=i;if(F==null&&(F=f.current&&vi(f.current)?"keyboard":!1),F===!1||F==="keyboard"&&!/^key.+$/.test(D))return;const O=ia(f.current,a)[0];O&&O.focus&&O.focus()});g.useEffect(()=>{u?N():v.current&&(v.current=!1,I())},[u,v,I,N]),g.useEffect(()=>{x.current=null});const j=(D,F)=>{if(!f.current)return null;const O=ia(f.current,a);let G=O.indexOf(D)+F;return G=Math.max(0,Math.min(G,O.length)),O[G]};return Go(g.useCallback(()=>l.document,[l]),"keydown",D=>{var F,O;const{key:G}=D,B=D.target,A=(F=f.current)==null?void 0:F.contains(B),V=(O=w.current)==null?void 0:O.contains(B);if(/input|textarea/i.test(B.tagName)&&(G===" "||G!=="Escape"&&A||G==="Escape"&&B.type==="search")||!A&&!V||G==="Tab"&&(!f.current||!u))return;x.current=D.type;const ee={originalEvent:D,source:D.type};switch(G){case"ArrowUp":{const H=j(B,-1);H&&H.focus&&H.focus(),D.preventDefault();return}case"ArrowDown":if(D.preventDefault(),!u)d(!0,ee);else{const H=j(B,1);H&&H.focus&&H.focus()}return;case"Tab":uo(B.ownerDocument,"keyup",H=>{var ge;(H.key==="Tab"&&!H.target||!((ge=f.current)!=null&&ge.contains(H.target)))&&d(!1,ee)},{once:!0});break;case"Escape":G==="Escape"&&(D.preventDefault(),D.stopPropagation()),d(!1,ee);break}}),c.jsx(sr.Provider,{value:T,children:c.jsx(qt.Provider,{value:k,children:o})})}Xn.displayName="Dropdown";Xn.Menu=hi;Xn.Toggle=wi;Xn.Item=bi;const Lr=g.createContext({});Lr.displayName="DropdownContext";const xi=g.forwardRef(({className:e,bsPrefix:n,as:t="hr",role:r="separator",...a},i)=>(n=se(n,"dropdown-divider"),c.jsx(t,{ref:i,className:oe(e,n),role:r,...a})));xi.displayName="DropdownDivider";const Di=g.forwardRef(({className:e,bsPrefix:n,as:t="div",role:r="heading",...a},i)=>(n=se(n,"dropdown-header"),c.jsx(t,{ref:i,className:oe(e,n),role:r,...a})));Di.displayName="DropdownHeader";const Ei=g.forwardRef(({bsPrefix:e,className:n,eventKey:t,disabled:r=!1,onClick:a,active:i,as:s=Xa,...o},l)=>{const u=se(e,"dropdown-item"),[d,f]=_i({key:t,href:o.href,disabled:r,onClick:a,active:i});return c.jsx(s,{...o,...d,ref:l,className:oe(n,u,f.isActive&&"active",r&&"disabled")})});Ei.displayName="DropdownItem";const Ci=g.forwardRef(({className:e,bsPrefix:n,as:t="span",...r},a)=>(n=se(n,"dropdown-item-text"),c.jsx(t,{ref:a,className:oe(e,n),...r})));Ci.displayName="DropdownItemText";function ji(e,n){return e}function Si(e,n,t){const r=t?"top-end":"top-start",a=t?"top-start":"top-end",i=t?"bottom-end":"bottom-start",s=t?"bottom-start":"bottom-end",o=t?"right-start":"left-start",l=t?"right-end":"left-end",u=t?"left-start":"right-start",d=t?"left-end":"right-end";let f=e?s:i;return n==="up"?f=e?a:r:n==="end"?f=e?d:u:n==="start"?f=e?l:o:n==="down-centered"?f="bottom":n==="up-centered"&&(f="top"),f}const Ni=g.forwardRef(({bsPrefix:e,className:n,align:t,rootCloseEvent:r,flip:a=!0,show:i,renderOnMount:s,as:o="div",popperConfig:l,variant:u,...d},f)=>{let m=!1;const p=g.useContext(Va),w=se(e,"dropdown-menu"),{align:h,drop:_,isRTL:y}=g.useContext(Lr);t=t||h;const x=g.useContext(Za),v=[];if(t)if(typeof t=="object"){const D=Object.keys(t);if(D.length){const F=D[0],O=t[F];m=O==="start",v.push(`${w}-${F}-${O}`)}}else t==="end"&&(m=!0);const b=Si(m,_,y),[S,{hasShown:T,popper:k,show:I,toggle:N}]=pi({flip:a,rootCloseEvent:r,show:i,usePopper:!p&&v.length===0,offset:[0,2],popperConfig:l,placement:b});if(S.ref=Ya(ji(f),S.ref),lo(()=>{I&&(k==null||k.update())},[I]),!T&&!s&&!x)return null;typeof o!="string"&&(S.show=I,S.close=()=>N==null?void 0:N(!1),S.align=t);let j=d.style;return k!=null&&k.placement&&(j={...d.style,...S.style},d["x-placement"]=k.placement),c.jsx(o,{...d,...S,style:j,...(v.length||p)&&{"data-bs-popper":"static"},className:oe(n,w,I&&"show",m&&`${w}-end`,u&&`${w}-${u}`,...v)})});Ni.displayName="DropdownMenu";const ki=g.forwardRef(({bsPrefix:e,split:n,className:t,childBsPrefix:r,as:a=z,...i},s)=>{const o=se(e,"dropdown-toggle"),l=g.useContext(qt);r!==void 0&&(i.bsPrefix=r);const[u]=yi();return u.ref=Ya(u.ref,ji(s)),c.jsx(a,{className:oe(t,o,n&&`${o}-split`,(l==null?void 0:l.show)&&"show"),...u,...i})});ki.displayName="DropdownToggle";const Ii=g.forwardRef((e,n)=>{const{bsPrefix:t,drop:r="down",show:a,className:i,align:s="start",onSelect:o,onToggle:l,focusFirstItemOnShow:u,as:d="div",navbar:f,autoClose:m=!0,...p}=Er(e,{show:"onToggle"}),w=g.useContext(Za),h=se(t,"dropdown"),_=co(),y=k=>m===!1?k==="click":m==="inside"?k!=="rootClose":m==="outside"?k!=="select":!0,x=fo((k,I)=>{var N;!((N=I.originalEvent)==null||(N=N.target)==null)&&N.classList.contains("dropdown-toggle")&&I.source==="mousedown"||(I.originalEvent.currentTarget===document&&(I.source!=="keydown"||I.originalEvent.key==="Escape")&&(I.source="rootClose"),y(I.source)&&(l==null||l(k,I)))}),b=Si(s==="end",r,_),S=g.useMemo(()=>({align:s,drop:r,isRTL:_}),[s,r,_]),T={down:h,"down-centered":`${h}-center`,up:"dropup","up-centered":"dropup-center dropup",end:"dropend",start:"dropstart"};return c.jsx(Lr.Provider,{value:S,children:c.jsx(Xn,{placement:b,show:a,onSelect:o,onToggle:x,focusFirstItemOnShow:u,itemSelector:`.${h}-item:not(.disabled):not(:disabled)`,children:w?p.children:c.jsx(d,{...p,ref:n,className:oe(i,a&&"show",T[r])})})})});Ii.displayName="Dropdown";const Ne=Object.assign(Ii,{Toggle:ki,Menu:Ni,Item:Ei,ItemText:Ci,Divider:xi,Header:Di}),Ti=g.forwardRef(({className:e,bsPrefix:n,as:t="div",...r},a)=>(n=se(n,"nav-item"),c.jsx(t,{ref:a,className:oe(e,n),...r})));Ti.displayName="NavItem";const Ai=g.forwardRef(({bsPrefix:e,className:n,as:t=Xa,active:r,eventKey:a,disabled:i=!1,...s},o)=>{e=se(e,"nav-link");const[l,u]=Oo({key:or(a,s.href),active:r,disabled:i,...s});return c.jsx(t,{...s,...l,ref:o,disabled:i,className:oe(n,e,i&&"disabled",u.isActive&&"active")})});Ai.displayName="NavLink";const Fi=g.forwardRef((e,n)=>{const{as:t="div",bsPrefix:r,variant:a,fill:i=!1,justify:s=!1,navbar:o,navbarScroll:l,className:u,activeKey:d,...f}=Er(e,{activeKey:"onSelect"}),m=se(r,"nav");let p,w,h=!1;const _=g.useContext(Va),y=g.useContext(Po);return _?(p=_.bsPrefix,h=o??!0):y&&({cardHeaderBsPrefix:w}=y),c.jsx(Lo,{as:t,ref:n,activeKey:d,className:oe(u,{[m]:!h,[`${p}-nav`]:h,[`${p}-nav-scroll`]:h&&l,[`${w}-${a}`]:!!w,[`${m}-${a}`]:!!a,[`${m}-fill`]:i,[`${m}-justified`]:s}),...f})});Fi.displayName="Nav";const he=Object.assign(Fi,{Item:Ti,Link:Ai}),Ut=g.forwardRef(({bsPrefix:e,className:n,striped:t,bordered:r,borderless:a,hover:i,size:s,variant:o,responsive:l,...u},d)=>{const f=se(e,"table"),m=oe(n,f,o&&`${f}-${o}`,s&&`${f}-${s}`,t&&`${f}-${typeof t=="string"?`striped-${t}`:"striped"}`,r&&`${f}-bordered`,a&&`${f}-borderless`,i&&`${f}-hover`),p=c.jsx("table",{...u,className:m,ref:d});if(l){let w=`${f}-responsive`;return typeof l=="string"&&(w=`${w}-${l}`),c.jsx("div",{className:w,children:p})}return p});Ut.displayName="Table";const _l=()=>{const{client:e}=g.useContext(Ae),[n,t]=g.useState(null),r=g.useCallback(async()=>{const a=await e.GET("/my/bank");a.data&&t(a.data)},[e]);return g.useEffect(()=>{r()},[r]),{bankDetails:n,refetch:r}};function bl(e,n,t){var r=this,a=g.useRef(null),i=g.useRef(0),s=g.useRef(null),o=g.useRef([]),l=g.useRef(),u=g.useRef(),d=g.useRef(e),f=g.useRef(!0);d.current=e;var m=typeof window<"u",p=!n&&n!==0&&m;if(typeof e!="function")throw new TypeError("Expected a function");n=+n||0;var w=!!(t=t||{}).leading,h=!("trailing"in t)||!!t.trailing,_="maxWait"in t,y="debounceOnServer"in t&&!!t.debounceOnServer,x=_?Math.max(+t.maxWait||0,n):null;g.useEffect(function(){return f.current=!0,function(){f.current=!1}},[]);var v=g.useMemo(function(){var b=function(j){var D=o.current,F=l.current;return o.current=l.current=null,i.current=j,u.current=d.current.apply(F,D)},S=function(j,D){p&&cancelAnimationFrame(s.current),s.current=p?requestAnimationFrame(j):setTimeout(j,D)},T=function(j){if(!f.current)return!1;var D=j-a.current;return!a.current||D>=n||D<0||_&&j-i.current>=x},k=function(j){return s.current=null,h&&o.current?b(j):(o.current=l.current=null,u.current)},I=function j(){var D=Date.now();if(T(D))return k(D);if(f.current){var F=n-(D-a.current),O=_?Math.min(F,x-(D-i.current)):F;S(j,O)}},N=function(){if(m||y){var j=Date.now(),D=T(j);if(o.current=[].slice.call(arguments),l.current=r,a.current=j,D){if(!s.current&&f.current)return i.current=a.current,S(I,n),w?b(a.current):u.current;if(_)return S(I,n),b(a.current)}return s.current||S(I,n),u.current}};return N.cancel=function(){s.current&&(p?cancelAnimationFrame(s.current):clearTimeout(s.current)),i.current=0,o.current=a.current=l.current=s.current=null},N.isPending=function(){return!!s.current},N.flush=function(){return s.current?k(Date.now()):u.current},N},[w,_,n,x,h,p,m,y]);return v}function xl(e,n){return e===n}function Mi(e,n,t){var r=xl,a=g.useRef(e),i=g.useState({})[1],s=bl(g.useCallback(function(l){a.current=l,i({})},[i]),n,t),o=g.useRef(e);return r(o.current,e)||(s(e),o.current=e),[a.current,s]}const Dl=()=>{const{client:e}=g.useContext(Ae),[n,t]=g.useState(null),[r,a]=g.useState(1),[i,s]=g.useState(null),[o,l]=g.useState(null),[u]=Mi(o,500),d=g.useCallback(async()=>{const m=await e.GET("/my/bank/items",{params:{query:{page:r,item_code:u||void 0}}});m.data&&(t(m.data),s(m.data.pages||null))},[e,r,u]);return g.useEffect(()=>{d()},[d]),{bankItems:n,refetch:d,pagination:{setPage:a,page:r,pages:i},filter:o,setFilter:m=>{m.length>0?l(m):l(null)}}},El=()=>{const{client:e}=g.useContext(Ae),[n,t]=g.useState(null),[r,a]=g.useState(1),[i,s]=g.useState(null),[o,l]=g.useState(null),[u]=Mi(o,500),d=g.useCallback(async()=>{const m=await e.GET("/grandexchange/orders",{params:{query:{page:r,code:u||void 0}}});m.data&&(t(m.data),s(m.data.pages||null))},[e,r,u]);return g.useEffect(()=>{d()},[d]),{grandExchange:n,refetch:d,pagination:{setPage:a,page:r,pages:i},filter:o,setFilter:m=>{m.length>0?l(m):l(null)}}};var ft={},Da;function Cl(){if(Da)return ft;Da=1,ft.__esModule=!0;var e=function(){function n(t){if(!t)throw new TypeError("Invalid argument; `value` has no value.");this.value=n.EMPTY,t&&n.isGuid(t)&&(this.value=t)}return n.isGuid=function(t){var r=t.toString();return t&&(t instanceof n||n.validator.test(r))},n.create=function(){return new n([n.gen(2),n.gen(1),n.gen(1),n.gen(1),n.gen(3)].join("-"))},n.createEmpty=function(){return new n("emptyguid")},n.parse=function(t){return new n(t)},n.raw=function(){return[n.gen(2),n.gen(1),n.gen(1),n.gen(1),n.gen(3)].join("-")},n.gen=function(t){for(var r="",a=0;a<t;a++)r+=((1+Math.random())*65536|0).toString(16).substring(1);return r},n.prototype.equals=function(t){return n.isGuid(t)&&this.value===t.toString()},n.prototype.isEmpty=function(){return this.value===n.EMPTY},n.prototype.toString=function(){return this.value},n.prototype.toJSON=function(){return{value:this.value}},n.validator=new RegExp("^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$","i"),n.EMPTY="00000000-0000-0000-0000-000000000000",n}();return ft.Guid=e,ft}var bn=Cl();const Dt=(e,n)=>{const t=g.useRef(void 0),r=g.useRef(e);return g.useEffect(()=>{r.current=e},[e]),g.useEffect(()=>(t.current=window.setInterval(()=>r.current(),n),()=>window.clearInterval(t.current)),[n]),t.current},jl=e=>{const{client:n}=g.useContext(Ae),t=g.useCallback(async({pos:y})=>{if(!e)throw new Error("Function not implemented.");const{data:x,error:v}=await n.POST("/my/{name}/action/move",{body:y,params:{path:{name:e}}});if(x!=null&&x.data)return x.data;throw new Error((v==null?void 0:v.error.message)||"unknown error")},[n,e]),r=g.useCallback(async()=>{if(!e)throw new Error("Function not implemented.");const{data:y,error:x}=await n.POST("/my/{name}/action/fight",{params:{path:{name:e}}});if(y!=null&&y.data)return y.data;throw new Error((x==null?void 0:x.error.message)||"unknown error")},[n,e]),a=g.useCallback(async({code:y,quantity:x})=>{if(!e)throw new Error("Function not implemented.");const{data:v,error:b}=await n.POST("/my/{name}/action/bank/withdraw",{body:{code:y,quantity:x},params:{path:{name:e}}});if(v!=null&&v.data)return v.data;throw new Error((b==null?void 0:b.error.message)||"unknown error")},[n,e]),i=g.useCallback(async({code:y,quantity:x})=>{if(!e)throw new Error("Function not implemented.");const{data:v,error:b}=await n.POST("/my/{name}/action/bank/deposit",{body:{code:y,quantity:x},params:{path:{name:e}}});if(v!=null&&v.data)return v.data;throw new Error((b==null?void 0:b.error.message)||"unknown error")},[n,e]),s=g.useCallback(async({code:y,quantity:x})=>{if(!e)throw new Error("Function not implemented.");const{data:v,error:b}=await n.POST("/my/{name}/action/crafting",{body:{code:y,quantity:x},params:{path:{name:e}}});if(v!=null&&v.data)return v.data;throw new Error((b==null?void 0:b.error.message)||"unknown error")},[n,e]),o=g.useCallback(async({slot:y,quantity:x})=>{if(!e)throw new Error("Function not implemented.");const{data:v,error:b}=await n.POST("/my/{name}/action/unequip",{body:{slot:y,quantity:x},params:{path:{name:e}}});if(v!=null&&v.data)return v.data;throw new Error((b==null?void 0:b.error.message)||"unknown error")},[n,e]),l=g.useCallback(async({code:y,slot:x,quantity:v})=>{if(!e)throw new Error("Function not implemented.");const{data:b,error:S}=await n.POST("/my/{name}/action/equip",{body:{slot:x,quantity:v,code:y},params:{path:{name:e}}});if(b!=null&&b.data)return b.data;throw new Error((S==null?void 0:S.error.message)||"unknown error")},[n,e]),u=g.useCallback(async({quantity:y})=>{if(!e)throw new Error("Function not implemented.");const{data:x,error:v}=await n.POST("/my/{name}/action/bank/withdraw/gold",{body:{quantity:y},params:{path:{name:e}}});if(x!=null&&x.data)return x.data;throw new Error((v==null?void 0:v.error.message)||"unknown error")},[n,e]),d=g.useCallback(async({quantity:y})=>{if(!e)throw new Error("Function not implemented.");const{data:x,error:v}=await n.POST("/my/{name}/action/bank/deposit/gold",{body:{quantity:y},params:{path:{name:e}}});if(x!=null&&x.data)return x.data;throw new Error((v==null?void 0:v.error.message)||"unknown error")},[n,e]),f=g.useCallback(async({code:y,quantity:x})=>{if(!e)throw new Error("Function not implemented.");const{data:v,error:b}=await n.POST("/my/{name}/action/task/trade",{body:{code:y,quantity:x},params:{path:{name:e}}});if(v!=null&&v.data)return v.data;throw new Error((b==null?void 0:b.error.message)||"unknown error")},[n,e]),m=g.useCallback(async({code:y,quantity:x})=>{if(!e)throw new Error("Function not implemented.");const{data:v,error:b}=await n.POST("/my/{name}/action/npc/buy",{body:{code:y,quantity:x},params:{path:{name:e}}});if(v!=null&&v.data)return v.data;throw new Error((b==null?void 0:b.error.message)||"unknown error")},[n,e]),p=g.useCallback(async({code:y,quantity:x})=>{if(!e)throw new Error("Function not implemented.");const{data:v,error:b}=await n.POST("/my/{name}/action/npc/sell",{body:{code:y,quantity:x},params:{path:{name:e}}});if(v!=null&&v.data)return v.data;throw new Error((b==null?void 0:b.error.message)||"unknown error")},[n,e]),w=g.useCallback(async({code:y,quantity:x})=>{if(!e)throw new Error("Function not implemented.");const{data:v,error:b}=await n.POST("/my/{name}/action/use",{body:{code:y,quantity:x},params:{path:{name:e}}});if(v!=null&&v.data)return v.data;throw new Error((b==null?void 0:b.error.message)||"unknown error")},[n,e]),h=g.useCallback(async({code:y,quantity:x})=>{if(!e)throw new Error("Function not implemented.");const{data:v,error:b}=await n.POST("/my/{name}/action/recycling",{body:{code:y,quantity:x},params:{path:{name:e}}});if(v!=null&&v.data)return v.data;throw new Error((b==null?void 0:b.error.message)||"unknown error")},[n,e]),_=g.useCallback(async({code:y,quantity:x})=>{if(!e)throw new Error("Function not implemented.");const{data:v,error:b}=await n.POST("/my/{name}/action/delete",{body:{code:y,quantity:x},params:{path:{name:e}}});if(v!=null&&v.data)return v.data;throw new Error((b==null?void 0:b.error.message)||"unknown error")},[n,e]);return{doMove:t,doFight:r,doDeposit:i,doWithdraw:a,doCraft:s,doUnEquip:o,doEquip:l,doWithdrawGold:u,doDepositGold:d,doTaskTrade:f,doBuyItem:m,doSellItem:p,doConsumeItem:w,doRecycleItem:h,doDeleteItem:_}},De=e=>{const n=g.useCallback(t=>{const r=async()=>{try{const a=await e.action(t);return t!=null&&t.requeue&&n(t),e.onSuccess(a),a}catch(a){return a instanceof Error&&a.message&&e.onError(a.message),null}};e.queueAction({label:typeof e.label=="string"?e.label:e.label(t),guid:bn.Guid.create(),action:r},t==null?void 0:t.queueIndex)},[e]);return n},ln=({name:e,label:n,path:t,onSuccess:r,onError:a,queueAction:i})=>{const{client:s}=g.useContext(Ae),o=g.useCallback(async()=>{if(e)try{const{data:u,error:d}=await s.POST(t,{params:{path:{name:e}}});if(u)return r(u.data),u.data;a(d.error.message)}catch{}return null},[s,e,t,r,a]),l=g.useCallback(u=>{if(e){const d=async()=>{const f=await o();return u!=null&&u.requeue&&(t==="/my/{name}/action/gathering"?l(f?{queueIndex:0,requeue:u==null?void 0:u.requeue}:{requeue:u==null?void 0:u.requeue}):f&&l(u)),f};i({label:`${u!=null&&u.requeue?"Repeat ":""}${n}`,guid:bn.Guid.create(),action:d},u==null?void 0:u.queueIndex)}},[e,o,i,n,t]);return l},Sl=()=>{const[e,n]=g.useState(Oe.Duration.from("PT10S")),{client:t}=g.useContext(Ae),r=g.useCallback(()=>{t.GET("/").then(a=>{if(a.data){const i=Oe.Instant.from(a.data.data.server_time),s=Oe.Now.instant();n(i.until(s))}})},[t]);return Dt(r,3e4),e};var en=(e=>(e.Ready="ready",e.Paused="paused",e.Waiting="waiting",e.Cooldown="cooldown",e))(en||{});const Nl=e=>{const{client:n}=g.useContext(Ae),t=Sl(),[r,a]=g.useState(null),[i]=g.useState(new mo),[s,o]=g.useState(!1),[l,u]=g.useState(null),[d,f]=g.useState(null),[m,p]=g.useState(Oe.Now.instant()),[w,h]=g.useState(null),[_,y]=g.useState("ready"),[x,v]=g.useReducer(C=>C+1,0),b=g.useCallback(()=>{if(e)return n.GET("/characters/{name}",{params:{path:{name:e}}}).then(({data:C})=>{var P;if(C&&(a(C.data),(P=C.data)!=null&&P.cooldown_expiration)){const q=Oe.Instant.from(C.data.cooldown_expiration).add(t);p(q);const Z=Oe.Instant.compare(Oe.Now.instant(),q)>-1;y(Se=>Z?["paused","waiting"].includes(Se)?Se:"ready":"cooldown")}return C})},[n,e,t]);g.useEffect(()=>{e&&b()},[e,b]);const S=g.useCallback(()=>{Oe.Instant.compare(Oe.Now.instant(),m)>-1?h(null):(h(Oe.Now.instant().until(m)),y("cooldown"))},[m]);Dt(S,100);const T=g.useCallback(()=>y(C=>C==="ready"?"paused":C==="paused"?"ready":C),[]),k=g.useCallback(()=>{w===null&&_==="cooldown"&&b()},[w,b,_]);Dt(k,5e3);const I=g.useCallback(()=>y(C=>C==="ready"&&i.size()>0?(o(!0),"waiting"):C),[i]);Dt(I,2e3),g.useEffect(()=>{var C;if(s&&_==="waiting")try{(C=i.pop())==null||C.action()}catch(P){console.log(P),y("ready")}finally{o(!1)}},[s,_,i.pop]);const N=g.useCallback((C,P)=>{v(),P!==void 0?i.insert(C,P):i.push(C)},[i]),j=g.useCallback(C=>{y("cooldown"),p(Oe.Instant.from(C.cooldown.expiration)),u(C),f(null),a(C.character)},[]),D=g.useCallback(C=>{u(null),f(C),y("ready")},[]),{doMove:F,doFight:O,doDeposit:G,doWithdraw:B,doCraft:A,doUnEquip:V,doEquip:xe,doDepositGold:ee,doWithdrawGold:H,doTaskTrade:ge,doBuyItem:je,doSellItem:Fe,doConsumeItem:te,doRecycleItem:re,doDeleteItem:ue}=jl(e),pe=De({label:({pos:C,requeue:P})=>`${P?"Repeat m":"M"}ove to ${C.x},${C.y}`,action:F,onSuccess:j,onError:D,queueAction:N}),X=De({label:({code:C,quantity:P,requeue:q})=>`${q?"Repeat d":"D"}eposit ${P} x ${C}`,action:G,onSuccess:j,onError:D,queueAction:N}),ve=De({label:({code:C,quantity:P,requeue:q})=>`${q?"Repeat w":"W"}ithdraw ${P} x ${C}`,action:B,onSuccess:j,onError:D,queueAction:N}),ne=De({label:({code:C,quantity:P,requeue:q})=>`${q?"Repeat c":"C"}raft ${P} x ${C}`,action:A,onSuccess:j,onError:D,queueAction:N}),ce=De({label:({slot:C,quantity:P,requeue:q})=>`${q?"Repeat u":"U"}nequip ${P} x ${C}`,action:V,onSuccess:j,onError:D,queueAction:N}),In=De({label:({code:C,slot:P,quantity:q,requeue:Z})=>`${Z?"Repeat e":"E"}quip ${q} x ${C} into ${P}`,action:xe,onSuccess:j,onError:D,queueAction:N}),Be=De({label:({quantity:C,requeue:P})=>`${P?"Repeat d":"D"}eposit ${C} x gold`,action:ee,onSuccess:j,onError:D,queueAction:N}),Tn=De({label:({quantity:C,requeue:P})=>`${P?"Repeat w":"W"}ithdraw ${C} x gold`,action:H,onSuccess:j,onError:D,queueAction:N}),hn=De({label:({code:C,quantity:P,requeue:q})=>`${q?"Repeat t":"T"}rade ${P} x ${C} to task master`,action:ge,onSuccess:j,onError:D,queueAction:N}),gn=De({label:({code:C,quantity:P,requeue:q})=>`${q?"Repeat b":"B"}uy ${P} x ${C}`,action:je,onSuccess:j,onError:D,queueAction:N}),vn=De({label:({code:C,quantity:P,requeue:q})=>`${q?"Repeat s":"S"}ell ${P} x ${C}`,action:Fe,onSuccess:j,onError:D,queueAction:N}),Zt=De({label:({code:C,quantity:P,requeue:q})=>`${q?"Repeat r":"R"}ecycle ${P} x ${C}`,action:re,onSuccess:j,onError:D,queueAction:N}),Yt=De({label:({code:C,quantity:P,requeue:q})=>`${q?"Repeat d":"D"}elete ${P} x ${C}`,action:ue,onSuccess:j,onError:D,queueAction:N}),He=ln({name:e,label:"Rest",path:"/my/{name}/action/rest",onSuccess:j,onError:D,queueAction:N}),yn=ln({name:e,label:"Gathering",path:"/my/{name}/action/gathering",onSuccess:j,onError:D,queueAction:N}),it=ln({name:e,label:"Buy bank expansion",path:"/my/{name}/action/bank/buy_expansion",onSuccess:j,onError:D,queueAction:N}),st=ln({name:e,label:"Accept a new task",path:"/my/{name}/action/task/new",onSuccess:j,onError:D,queueAction:N}),An=ln({name:e,label:"Complete current task",path:"/my/{name}/action/task/complete",onSuccess:j,onError:D,queueAction:N}),ot=ln({name:e,label:"Exchange 6x task coins for reward",path:"/my/{name}/action/task/exchange",onSuccess:j,onError:D,queueAction:N}),ut=ln({name:e,label:"Abandon current task",path:"/my/{name}/action/task/cancel",onSuccess:j,onError:D,queueAction:N}),un=g.useCallback(C=>{const P=async()=>{const q=await b();try{const Z=await O(),Se=((q==null?void 0:q.data.hp)||0)-Z.character.hp;return C!=null&&C.requeue&&(Z.character.hp-Se*1.5>0?un({queueIndex:0,requeue:C==null?void 0:C.requeue}):un({requeue:C==null?void 0:C.requeue})),j(Z),Z}catch(Z){return Z instanceof Error&&Z.message&&D(Z.message),C!=null&&C.requeue&&un({requeue:C==null?void 0:C.requeue}),null}};N({label:`${C!=null&&C.requeue?"Repeat f":"F"}ight`,guid:bn.Guid.create(),action:P},C==null?void 0:C.queueIndex)},[O,N,b,D,j]),Fn=g.useCallback(({item:C,quantity:P,queueIndex:q,requeue:Z})=>{const Se=async()=>{var Me;let Ze,J=P;if((Me=C.effects)!=null&&Me.some(ye=>ye.code==="heal")){const ye=await b();if(ye){const ze=ye.data.max_hp-ye.data.hp,wn=Math.ceil(ze/C.effects[0].value);J=Math.min(P,wn);try{Ze=await te({code:C.code,quantity:J})}catch(Jt){return Jt instanceof Error&&Jt.message&&D(Jt.message),null}}else return null}else try{Ze=await te({code:C.code,quantity:P})}catch(ye){return ye instanceof Error&&ye.message&&D(ye.message),null}return Z&&P-J>0&&Fn({item:C,quantity:P-J,queueIndex:q,requeue:Z}),j(Ze),Ze};N({label:`${Z?"Repeat c":"C"}onsume ${C.name}`,guid:bn.Guid.create(),action:Se},q)},[te,N,b,D,j]),ra=g.useCallback(({item:C,workshop:P,quantity:q,requeue:Z,queueIndex:Se})=>{const Ze=async()=>{if(!C.craft||!(C!=null&&C.craft.items))return null;const J=C.craft.items.reduce((ze,wn)=>ze+wn.quantity,0),Me=await b();if(!J||!Me)return null;const ye=q||Math.floor(Me.data.inventory_max_items/J);return C.craft.items.map(ze=>{ve({code:ze.code,quantity:ze.quantity*ye,queueIndex:0})}),ne({code:C.code,quantity:ye,queueIndex:C.craft.items.length}),pe({pos:P,queueIndex:C.craft.items.length}),Z&&ra({item:C,workshop:P,quantity:q,requeue:Z}),y("cooldown"),null};N({label:`${Z?"Repeat s":"S"}mart craft of ${q?`${q} x `:""} ${C.name} @ ${P.x},${P.y}`,guid:bn.Guid.create(),action:Ze},Se)},[ne,pe,ve,b,N]),Qt=g.useCallback(({pos:C,returnToPos:P=!1,ifFull:q=!1,requeue:Z,queueIndex:Se})=>{const Ze=async()=>{const J=await b();if(q&&(J!=null&&J.data.inventory)){const{usedSlots:Me,usedInventory:ye}=J.data.inventory.reduce((ze,wn)=>({usedSlots:ze.usedSlots+(wn.code?1:0),usedInventory:ze.usedInventory+wn.quantity}),{usedSlots:0,usedInventory:0});if(Me<20&&ye<J.data.inventory_max_items)return Z&&Qt({pos:C,returnToPos:P,ifFull:q,requeue:Z,queueIndex:Se}),y("cooldown"),null}pe({pos:C,queueIndex:0}),P&&pe({pos:{x:(J==null?void 0:J.data.x)||0,y:(J==null?void 0:J.data.y)||0},queueIndex:1});for(const Me of(J==null?void 0:J.data.inventory)||[])Me.code&&X({code:Me.code,quantity:Me.quantity,queueIndex:1});return Z&&Qt({pos:C,returnToPos:P,ifFull:q,requeue:Z,queueIndex:Se}),y("cooldown"),null};N({label:`${Z?"Repeat d":"D"}eposit all${q?" if full":""} to ${C.x},${C.y}${P?" and return":""}`,guid:bn.Guid.create(),action:Ze},Se)},[b,X,pe,N]);return{character:r,actions:{move:pe,rest:He,fight:un,gathering:yn,deposit:X,depositAll:Qt,withdraw:ve,craft:ne,smartCraft:ra,unEquip:ce,equip:In,withdrawGold:Tn,depositGold:Be,buyExpansion:it,taskAccept:st,taskTrade:hn,taskComplete:An,taskExchange:ot,taskAbandon:ut,buyItem:gn,sellItem:vn,consumeItem:Fn,recycleItem:Zt,deleteItem:Yt},lastAction:l,error:d,status:_,timeUntilReady:w,actionQueue:i,togglePause:T,forceUpdate:v}},Oi=Le.createContext(void 0),kl=Oi.Provider,Ce=()=>{const e=Le.useContext(Oi);if(!e)throw new Error("useCharacterContext must be used within a CharacterProvider");return e},cr=(e,n)=>Math.abs(e.x-n.x)+Math.abs(e.y-n.y),Il=({page:e,currentPosition:n,contentType:t,contentCode:r})=>{const{client:a}=g.useContext(Ae),[i,s]=g.useState(null);g.useEffect(()=>{a.GET("/maps",{params:{query:{page:e,content_type:t,content_code:r,size:100}}}).then(u=>{u.data&&s(u.data)}).catch(()=>s(null))},[a,e,r,t]);const{data:o,...l}=i||{};return{data:n?o==null?void 0:o.sort((u,d)=>cr(n,{x:u.x,y:u.y})-cr(n,{x:d.x,y:d.y})):o,...l}},Tl={monster:"Monster",resource:"Resource",workshop:"Workshop",bank:"Bank",grand_exchange:"Grand Exchange",tasks_master:"Tasks Master",npc:"Vendor"},Al={[en.Cooldown]:"warning",[en.Waiting]:"danger",[en.Ready]:"success",[en.Paused]:"secondary"},Ht=Le.createContext({bankDetails:null,bankItems:null,pagination:{page:1,pages:1,setPage:()=>null},refetch:async()=>new Promise(()=>null),filter:null,setFilter:()=>{}}),Ea=({action:e,label:n,initial:t=0})=>{const[r,a]=g.useState(t);return c.jsx("div",{children:c.jsxs(Zn,{children:[c.jsx(tn.Control,{type:"number",value:r,onChange:i=>a(Number(i.target.value))}),c.jsxs(z,{onClick:()=>e({quantity:r}),children:[c.jsx(U,{icon:mn,color:"#ffd82f",fixedWidth:!0}),n]})]})})},Fl=({pos:e})=>{const{bankDetails:n}=g.useContext(Ht),{character:t,actions:{depositAll:r,buyExpansion:a,depositGold:i,withdrawGold:s}}=Ce();return c.jsxs(Dn,{gap:2,children:[c.jsxs(Dn,{gap:2,direction:"horizontal",children:[c.jsxs(Ne,{as:Nr,children:[c.jsx(z,{onClick:()=>r({pos:e}),children:"Deposit all items"}),c.jsx(Ne.Toggle,{split:!0}),c.jsxs(Ne.Menu,{children:[c.jsx(Ne.Item,{onClick:()=>r({pos:e,requeue:!1,returnToPos:!0}),children:"and return"}),c.jsx(Ne.Item,{onClick:()=>r({pos:e,requeue:!0,returnToPos:!1}),children:"repeatedly"}),c.jsx(Ne.Item,{onClick:()=>r({pos:e,requeue:!0,returnToPos:!0}),children:"repeatedly and return"}),c.jsx(Ne.Item,{onClick:()=>r({pos:e,ifFull:!0,requeue:!0,returnToPos:!1}),children:"if full repeatedly"}),c.jsx(Ne.Item,{onClick:()=>r({pos:e,ifFull:!0,requeue:!0,returnToPos:!0}),children:"if full repeatedly and return"})]})]}),c.jsxs(z,{onClick:()=>a(),children:["Buy Expansion (",c.jsx(U,{icon:mn,color:"#ffd82f",fixedWidth:!0}),n==null?void 0:n.data.next_expansion_cost.toLocaleString(),")"]})]}),c.jsxs(Dn,{gap:2,direction:"horizontal",children:[c.jsx(Ea,{action:i,label:"Deposit",initial:t==null?void 0:t.gold}),c.jsx(Ea,{action:s,label:"Withdraw",initial:n==null?void 0:n.data.gold})]})]})},Ml=({code:e,workshop:n})=>{const[t,r]=g.useState(1),{actions:{smartCraft:a}}=Ce(),i=Bt(e);return c.jsxs(Zn,{size:"sm",children:[c.jsx(tn.Control,{type:"number",value:t,onChange:s=>r(Number(s.target.value))}),i&&c.jsxs(c.Fragment,{children:[c.jsx(z,{onClick:()=>a({item:i,workshop:n,quantity:t}),children:c.jsx(U,{icon:po})}),c.jsx(z,{onClick:()=>a({item:i,workshop:n}),children:c.jsx(U,{icon:ho})}),c.jsx(z,{onClick:()=>a({item:i,workshop:n,requeue:!0}),children:c.jsx(U,{icon:Hn})})]})]})},Ol=({skill:e,pos:n})=>{const{items:t,pagination:r}=Ro({skill:e});return c.jsxs(c.Fragment,{children:[c.jsx(K,{variant:"flush",children:t==null?void 0:t.data.map(a=>c.jsxs(K.Item,{className:"d-flex justify-content-between align-items-center",children:[c.jsx("div",{className:"w-100",children:c.jsx(ke,{code:a.code,imgProps:{height:20}})}),c.jsx(Ml,{code:a.code,workshop:{x:n.x,y:n.y}})]},a.code))}),c.jsx("div",{className:"mt-2 d-flex justify-content-around align-items-center",children:c.jsx(Rt,{...r})})]})},Pi=e=>{const{client:n,getCache:t}=g.useContext(Ae),[r,a]=g.useReducer(s=>s+1,0),i=t("monsters");return g.useEffect(()=>{n.GET("/monsters/{code}",{params:{path:{code:e}}}).then(s=>{s.data&&(i[e]=s.data.data,a())})},[n,e,i]),i[e]},Pl=({code:e})=>{var r;const n=Pi(e),t=["air","earth","fire","water"];return n?c.jsxs("div",{children:[c.jsxs("div",{className:"d-flex justify-content-between align-items-center",children:[c.jsxs("div",{className:"d-flex justify-content-start align-items-end gap-2 mb-2",children:[c.jsx("div",{style:{minWidth:50},className:"d-flex align-items-center justify-content-center",children:c.jsx("img",{src:`https://artifactsmmo.com/images/monsters/${e}.png`,alt:"",height:50})}),c.jsxs("h5",{children:[n.name," ",c.jsxs("small",{className:"text-muted",children:["lvl",n.level]})]})]}),c.jsx("h5",{children:c.jsxs(It,{bg:"danger",children:[n.hp.toLocaleString()," HP"]})})]}),c.jsx("h6",{children:"Damage"}),c.jsxs(K,{className:"mb-2",children:[t.map(a=>n[`attack_${a}`]>0&&c.jsxs(K.Item,{children:[c.jsx(ct,{code:`dmg_${a}`})," x ",c.jsx("strong",{children:n[`attack_${a}`]})]},a)),n.critical_strike!==0&&c.jsxs(K.Item,{children:[c.jsx(ct,{code:"critical_strike"})," x ",c.jsxs("strong",{children:[n.critical_strike,"%"]})]})]}),c.jsx("h6",{children:"Resistance"}),c.jsx(K,{className:"mb-2",children:t.map(a=>n[`res_${a}`]!==0&&c.jsxs(K.Item,{children:[c.jsx(ct,{code:`res_${a}`})," x ",c.jsxs("strong",{children:[n[`res_${a}`],"%"]})]},a))}),!!((r=n.effects)!=null&&r.length)&&c.jsxs(c.Fragment,{children:[c.jsx("h6",{children:"Effects"}),c.jsx(K,{className:"mb-2",children:n.effects.map(a=>c.jsxs(K.Item,{children:[c.jsx(ct,{code:a.code,imgProps:{height:20}})," ",c.jsx("small",{className:"text-muted",children:a.value})]},a.code))})]}),c.jsx("h6",{children:"Drops"}),c.jsxs(K,{children:[c.jsxs(K.Item,{children:[c.jsx(U,{icon:mn,color:"#ffd82f",fixedWidth:!0})," ",n.min_gold.toLocaleString(),"-",n.max_gold.toLocaleString()," gold"]}),n.drops.map(a=>c.jsxs(K.Item,{children:[c.jsx(ke,{code:a.code,imgProps:{height:20}}),c.jsxs("small",{className:"text-muted",children:[" ","x",a.min_quantity===a.max_quantity&&a.min_quantity,a.min_quantity!==a.max_quantity&&`${a.min_quantity}-${a.max_quantity}`," @"," ",(1/a.rate*100).toFixed(2),"%"]})]},a.code))]})]}):null},Ll=({npc:e,size:n=10})=>{const{client:t}=g.useContext(Ae),[r,a]=g.useState(null),[i,s]=g.useState(1),[o,l]=g.useState(null);g.useEffect(()=>{s(1)},[e]);const u=g.useCallback(d=>s(Math.max(1,Math.min(d,(r==null?void 0:r.pages)||1))),[r==null?void 0:r.pages]);return g.useEffect(()=>{t.GET("/npcs/{code}/items",{params:{path:{code:e},query:{page:i,size:n}}}).then(d=>{d.data?(a(d.data),l(d.data.pages||null)):a(null)})},[t,e,i,n]),{items:r,pagination:{setPage:u,page:i,pages:o}}},Rl=({item:e})=>{const[n,t]=g.useState(1),{actions:{buyItem:r,sellItem:a}}=Ce();return c.jsxs(Zn,{size:"sm",children:[c.jsx(tn.Control,{type:"number",value:n,onChange:i=>t(Number(i.target.value))}),e.buy_price&&c.jsxs(z,{variant:"outline-success",onClick:()=>r({code:e.code,quantity:n}),children:[c.jsx(It,{bg:"success",children:"Buy"}),c.jsx(U,{icon:mn,color:"#ffd82f",fixedWidth:!0,className:"mx-1"}),"x",e.buy_price.toLocaleString()]}),e.sell_price&&c.jsxs(z,{variant:"outline-warning",onClick:()=>a({code:e.code,quantity:n}),children:[c.jsx(It,{bg:"warning",children:"Sell"}),c.jsx(U,{icon:mn,color:"#ffd82f",fixedWidth:!0,className:"mx-1"}),"x",e.sell_price.toLocaleString()]})]})},Bl=({npc:e})=>{const{items:n,pagination:t}=Ll({npc:e});return c.jsxs(c.Fragment,{children:[c.jsx(K,{variant:"flush",children:n==null?void 0:n.data.map(r=>c.jsxs(K.Item,{className:"d-flex justify-content-between align-items-center",children:[c.jsx("div",{className:"w-100",children:c.jsx(ke,{code:r.code,imgProps:{height:20}})}),c.jsx(Rl,{item:r})]},r.code))}),c.jsx("div",{className:"mt-2 d-flex justify-content-around align-items-center",children:c.jsx(Rt,{...t})})]})},$l=e=>{const{client:n,getCache:t}=g.useContext(Ae),[r,a]=g.useReducer(s=>s+1,0),i=t("resources");return g.useEffect(()=>{n.GET("/resources/{code}",{params:{path:{code:e}}}).then(s=>{s.data&&(i[e]=s.data.data,a())})},[n,e,i]),i[e]},ql=({code:e})=>{const n=$l(e);return n?c.jsxs("div",{children:[c.jsxs("div",{className:"d-flex justify-content-start align-items-end gap-2 mb-2",children:[c.jsx("div",{style:{minWidth:50},className:"d-flex align-items-center justify-content-center",children:c.jsx("img",{src:`https://artifactsmmo.com/images/resources/${e}.png`,alt:"",height:50})}),c.jsxs("h5",{children:[n.name," ",c.jsxs("small",{className:"text-muted",children:[n.skill,"@lvl",n.level]})]})]}),c.jsx(K,{children:n.drops.map(t=>c.jsxs(K.Item,{children:[c.jsx(ke,{code:t.code,imgProps:{height:20}}),c.jsxs("small",{className:"text-muted",children:[" ","x",t.min_quantity===t.max_quantity&&t.min_quantity,t.min_quantity!==t.max_quantity&&`${t.min_quantity}-${t.max_quantity}`," @"," ",(1/t.rate*100).toFixed(2),"%"]})]},t.code))})]}):null},Gl=()=>{var s;const{character:e,actions:{taskAccept:n,taskComplete:t,taskExchange:r,taskTrade:a}}=Ce(),i=Math.min(((s=e==null?void 0:e.inventory)==null?void 0:s.reduce((o,l)=>l.code===(e==null?void 0:e.task)?o+l.quantity:o,0))||0,((e==null?void 0:e.task_total)||0)-((e==null?void 0:e.task_progress)||0));return c.jsxs(Dn,{gap:2,direction:"horizontal",children:[c.jsx(z,{onClick:()=>n(),children:"Accept Task"}),(e==null?void 0:e.task)&&(e==null?void 0:e.task_total)&&c.jsx(z,{onClick:()=>a({code:e.task,quantity:i}),children:"Trade Items"}),c.jsx(z,{onClick:()=>t(),children:"Complete Task"}),c.jsx(z,{onClick:()=>r(),children:"Random Reward"})]})},Ul=()=>{var f,m,p,w,h,_,y,x;const{character:e,actions:{move:n}}=Ce(),t=e?{x:e.x,y:e.y}:{x:0,y:0},[r,a]=g.useState(null),[i,s]=g.useState("monster"),o=Il({currentPosition:t,contentType:i}),l=Object.fromEntries(o.data?o.data.map(v=>[`${v.x},${v.y}`,v]):[]),u=v=>{const[b,S]=v.currentTarget.value.split(",").map(Number);a(l[`${b},${S}`])};g.useEffect(()=>{o.data&&o.data.length>0&&a(o.data[0])},[o==null?void 0:o.data]);const d=r&&t?cr({x:r.x,y:r.y},t):0;return c.jsx(Y,{children:c.jsx(tn,{children:c.jsxs(Y.Body,{children:[c.jsx(Y.Title,{children:"Actions"}),c.jsx(he,{variant:"pills",className:"border-0 mb-2",children:Object.entries(Tl).map(([v,b])=>c.jsx(he.Item,{children:c.jsx(he.Link,{active:i===v,onClick:()=>s(v),children:b})},v))}),c.jsxs(Zn,{children:[o.data&&c.jsx(tn.Select,{onChange:u,style:{width:"30%"},children:o.data.map(v=>{const b=`${v.x},${v.y}`;return c.jsxs("option",{value:b,children:[v.name,v.content&&`[${v.content.code}]`," @ ",v.x,",",v.y]},b)})}),c.jsxs(z,{type:"button",onClick:()=>n({pos:{x:(r==null?void 0:r.x)||0,y:(r==null?void 0:r.y)||0}}),children:[c.jsx(U,{icon:go})," Move ",d>0&&`(${d*5}s)`]}),c.jsx(z,{type:"button",onClick:()=>n({pos:{x:(r==null?void 0:r.x)||0,y:(r==null?void 0:r.y)||0},requeue:!0}),children:c.jsx(U,{icon:Hn})})]}),c.jsxs(ae,{className:"mt-2",children:[((f=r==null?void 0:r.content)==null?void 0:f.type)==="workshop"&&c.jsxs(ae.Item,{eventKey:"0",children:[c.jsx(ae.Header,{as:"h4",children:"Crafting"}),c.jsx(ae.Body,{children:c.jsx(Ol,{skill:r.content.code,pos:{x:r.x,y:r.y}})})]}),((m=r==null?void 0:r.content)==null?void 0:m.type)==="bank"&&c.jsxs(ae.Item,{eventKey:"1",children:[c.jsx(ae.Header,{as:"h4",children:"Bank Actions"}),c.jsx(ae.Body,{children:c.jsx(Fl,{pos:{x:r.x,y:r.y}})})]}),((p=r==null?void 0:r.content)==null?void 0:p.type)==="resource"&&c.jsxs(ae.Item,{eventKey:"2",children:[c.jsx(ae.Header,{as:"h4",children:"Resource Details"}),c.jsx(ae.Body,{children:c.jsx(ql,{code:(w=r==null?void 0:r.content)==null?void 0:w.code})})]}),((h=r==null?void 0:r.content)==null?void 0:h.type)==="monster"&&c.jsxs(ae.Item,{eventKey:"3",children:[c.jsx(ae.Header,{as:"h4",children:"Monster Details"}),c.jsx(ae.Body,{children:c.jsx(Pl,{code:(_=r==null?void 0:r.content)==null?void 0:_.code})})]}),((y=r==null?void 0:r.content)==null?void 0:y.type)==="tasks_master"&&c.jsxs(ae.Item,{eventKey:"4",children:[c.jsx(ae.Header,{as:"h4",children:"Tasks Master"}),c.jsx(ae.Body,{children:c.jsx(Gl,{})})]}),((x=r==null?void 0:r.content)==null?void 0:x.type)==="npc"&&c.jsxs(ae.Item,{eventKey:"5",children:[c.jsx(ae.Header,{as:"h4",children:"NPC Vendor"}),c.jsx(ae.Body,{children:c.jsx(Bl,{npc:r.content.code})})]})]})]})})})},Hl=()=>{const{actionQueue:e,forceUpdate:n}=Ce();if(e.size()!==0)return c.jsx(Y,{children:c.jsxs(Y.Body,{children:[c.jsx(Y.Title,{children:"Action Queue"}),c.jsx(K,{variant:"flush",numbered:!0,style:{maxHeight:300,overflowY:"auto"},children:e.data().map((r,a)=>c.jsx(K.Item,{action:!0,onClick:()=>{e.remove(a),n()},children:r.label},r.guid.toString()))})]})})},zl=e=>{const{client:n,getCache:t}=g.useContext(Ae),[r,a]=g.useReducer(o=>o+1,0),i=t("maps"),s=`${e.x},${e.y}`;return g.useEffect(()=>{n.GET("/maps/{x}/{y}",{params:{path:e}}).then(o=>{o.data&&(i[s]=o.data,a())})},[n,i,e,s]),i[s]};var nr={},tr={},dr=function(e,n){return dr=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,r){t.__proto__=r}||function(t,r){for(var a in r)Object.prototype.hasOwnProperty.call(r,a)&&(t[a]=r[a])},dr(e,n)};function Rr(e,n){if(typeof n!="function"&&n!==null)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");dr(e,n);function t(){this.constructor=e}e.prototype=n===null?Object.create(n):(t.prototype=n.prototype,new t)}var At=function(){return At=Object.assign||function(n){for(var t,r=1,a=arguments.length;r<a;r++){t=arguments[r];for(var i in t)Object.prototype.hasOwnProperty.call(t,i)&&(n[i]=t[i])}return n},At.apply(this,arguments)};function Li(e,n){var t={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&n.indexOf(r)<0&&(t[r]=e[r]);if(e!=null&&typeof Object.getOwnPropertySymbols=="function")for(var a=0,r=Object.getOwnPropertySymbols(e);a<r.length;a++)n.indexOf(r[a])<0&&Object.prototype.propertyIsEnumerable.call(e,r[a])&&(t[r[a]]=e[r[a]]);return t}function Ri(e,n,t,r){var a=arguments.length,i=a<3?n:r===null?r=Object.getOwnPropertyDescriptor(n,t):r,s;if(typeof Reflect=="object"&&typeof Reflect.decorate=="function")i=Reflect.decorate(e,n,t,r);else for(var o=e.length-1;o>=0;o--)(s=e[o])&&(i=(a<3?s(i):a>3?s(n,t,i):s(n,t))||i);return a>3&&i&&Object.defineProperty(n,t,i),i}function Bi(e,n){return function(t,r){n(t,r,e)}}function $i(e,n,t,r,a,i){function s(y){if(y!==void 0&&typeof y!="function")throw new TypeError("Function expected");return y}for(var o=r.kind,l=o==="getter"?"get":o==="setter"?"set":"value",u=!n&&e?r.static?e:e.prototype:null,d=n||(u?Object.getOwnPropertyDescriptor(u,r.name):{}),f,m=!1,p=t.length-1;p>=0;p--){var w={};for(var h in r)w[h]=h==="access"?{}:r[h];for(var h in r.access)w.access[h]=r.access[h];w.addInitializer=function(y){if(m)throw new TypeError("Cannot add initializers after decoration has completed");i.push(s(y||null))};var _=(0,t[p])(o==="accessor"?{get:d.get,set:d.set}:d[l],w);if(o==="accessor"){if(_===void 0)continue;if(_===null||typeof _!="object")throw new TypeError("Object expected");(f=s(_.get))&&(d.get=f),(f=s(_.set))&&(d.set=f),(f=s(_.init))&&a.unshift(f)}else(f=s(_))&&(o==="field"?a.unshift(f):d[l]=f)}u&&Object.defineProperty(u,r.name,d),m=!0}function qi(e,n,t){for(var r=arguments.length>2,a=0;a<n.length;a++)t=r?n[a].call(e,t):n[a].call(e);return r?t:void 0}function Gi(e){return typeof e=="symbol"?e:"".concat(e)}function Ui(e,n,t){return typeof n=="symbol"&&(n=n.description?"[".concat(n.description,"]"):""),Object.defineProperty(e,"name",{configurable:!0,value:t?"".concat(t," ",n):n})}function Hi(e,n){if(typeof Reflect=="object"&&typeof Reflect.metadata=="function")return Reflect.metadata(e,n)}function zi(e,n,t,r){function a(i){return i instanceof t?i:new t(function(s){s(i)})}return new(t||(t=Promise))(function(i,s){function o(d){try{u(r.next(d))}catch(f){s(f)}}function l(d){try{u(r.throw(d))}catch(f){s(f)}}function u(d){d.done?i(d.value):a(d.value).then(o,l)}u((r=r.apply(e,n||[])).next())})}function Ki(e,n){var t={label:0,sent:function(){if(i[0]&1)throw i[1];return i[1]},trys:[],ops:[]},r,a,i,s=Object.create((typeof Iterator=="function"?Iterator:Object).prototype);return s.next=o(0),s.throw=o(1),s.return=o(2),typeof Symbol=="function"&&(s[Symbol.iterator]=function(){return this}),s;function o(u){return function(d){return l([u,d])}}function l(u){if(r)throw new TypeError("Generator is already executing.");for(;s&&(s=0,u[0]&&(t=0)),t;)try{if(r=1,a&&(i=u[0]&2?a.return:u[0]?a.throw||((i=a.return)&&i.call(a),0):a.next)&&!(i=i.call(a,u[1])).done)return i;switch(a=0,i&&(u=[u[0]&2,i.value]),u[0]){case 0:case 1:i=u;break;case 4:return t.label++,{value:u[1],done:!1};case 5:t.label++,a=u[1],u=[0];continue;case 7:u=t.ops.pop(),t.trys.pop();continue;default:if(i=t.trys,!(i=i.length>0&&i[i.length-1])&&(u[0]===6||u[0]===2)){t=0;continue}if(u[0]===3&&(!i||u[1]>i[0]&&u[1]<i[3])){t.label=u[1];break}if(u[0]===6&&t.label<i[1]){t.label=i[1],i=u;break}if(i&&t.label<i[2]){t.label=i[2],t.ops.push(u);break}i[2]&&t.ops.pop(),t.trys.pop();continue}u=n.call(e,t)}catch(d){u=[6,d],a=0}finally{r=i=0}if(u[0]&5)throw u[1];return{value:u[0]?u[1]:void 0,done:!0}}}var zt=Object.create?function(e,n,t,r){r===void 0&&(r=t);var a=Object.getOwnPropertyDescriptor(n,t);(!a||("get"in a?!n.__esModule:a.writable||a.configurable))&&(a={enumerable:!0,get:function(){return n[t]}}),Object.defineProperty(e,r,a)}:function(e,n,t,r){r===void 0&&(r=t),e[r]=n[t]};function Wi(e,n){for(var t in e)t!=="default"&&!Object.prototype.hasOwnProperty.call(n,t)&&zt(n,e,t)}function Ft(e){var n=typeof Symbol=="function"&&Symbol.iterator,t=n&&e[n],r=0;if(t)return t.call(e);if(e&&typeof e.length=="number")return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}};throw new TypeError(n?"Object is not iterable.":"Symbol.iterator is not defined.")}function Br(e,n){var t=typeof Symbol=="function"&&e[Symbol.iterator];if(!t)return e;var r=t.call(e),a,i=[],s;try{for(;(n===void 0||n-- >0)&&!(a=r.next()).done;)i.push(a.value)}catch(o){s={error:o}}finally{try{a&&!a.done&&(t=r.return)&&t.call(r)}finally{if(s)throw s.error}}return i}function Vi(){for(var e=[],n=0;n<arguments.length;n++)e=e.concat(Br(arguments[n]));return e}function Zi(){for(var e=0,n=0,t=arguments.length;n<t;n++)e+=arguments[n].length;for(var r=Array(e),a=0,n=0;n<t;n++)for(var i=arguments[n],s=0,o=i.length;s<o;s++,a++)r[a]=i[s];return r}function Re(e,n,t){if(t||arguments.length===2)for(var r=0,a=n.length,i;r<a;r++)(i||!(r in n))&&(i||(i=Array.prototype.slice.call(n,0,r)),i[r]=n[r]);return e.concat(i||Array.prototype.slice.call(n))}function Nn(e){return this instanceof Nn?(this.v=e,this):new Nn(e)}function Yi(e,n,t){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var r=t.apply(e,n||[]),a,i=[];return a=Object.create((typeof AsyncIterator=="function"?AsyncIterator:Object).prototype),o("next"),o("throw"),o("return",s),a[Symbol.asyncIterator]=function(){return this},a;function s(p){return function(w){return Promise.resolve(w).then(p,f)}}function o(p,w){r[p]&&(a[p]=function(h){return new Promise(function(_,y){i.push([p,h,_,y])>1||l(p,h)})},w&&(a[p]=w(a[p])))}function l(p,w){try{u(r[p](w))}catch(h){m(i[0][3],h)}}function u(p){p.value instanceof Nn?Promise.resolve(p.value.v).then(d,f):m(i[0][2],p)}function d(p){l("next",p)}function f(p){l("throw",p)}function m(p,w){p(w),i.shift(),i.length&&l(i[0][0],i[0][1])}}function Qi(e){var n,t;return n={},r("next"),r("throw",function(a){throw a}),r("return"),n[Symbol.iterator]=function(){return this},n;function r(a,i){n[a]=e[a]?function(s){return(t=!t)?{value:Nn(e[a](s)),done:!1}:i?i(s):s}:i}}function Ji(e){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var n=e[Symbol.asyncIterator],t;return n?n.call(e):(e=typeof Ft=="function"?Ft(e):e[Symbol.iterator](),t={},r("next"),r("throw"),r("return"),t[Symbol.asyncIterator]=function(){return this},t);function r(i){t[i]=e[i]&&function(s){return new Promise(function(o,l){s=e[i](s),a(o,l,s.done,s.value)})}}function a(i,s,o,l){Promise.resolve(l).then(function(u){i({value:u,done:o})},s)}}function Xi(e,n){return Object.defineProperty?Object.defineProperty(e,"raw",{value:n}):e.raw=n,e}var Kl=Object.create?function(e,n){Object.defineProperty(e,"default",{enumerable:!0,value:n})}:function(e,n){e.default=n},fr=function(e){return fr=Object.getOwnPropertyNames||function(n){var t=[];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[t.length]=r);return t},fr(e)};function es(e){if(e&&e.__esModule)return e;var n={};if(e!=null)for(var t=fr(e),r=0;r<t.length;r++)t[r]!=="default"&&zt(n,e,t[r]);return Kl(n,e),n}function ns(e){return e&&e.__esModule?e:{default:e}}function ts(e,n,t,r){if(t==="a"&&!r)throw new TypeError("Private accessor was defined without a getter");if(typeof n=="function"?e!==n||!r:!n.has(e))throw new TypeError("Cannot read private member from an object whose class did not declare it");return t==="m"?r:t==="a"?r.call(e):r?r.value:n.get(e)}function rs(e,n,t,r,a){if(r==="m")throw new TypeError("Private method is not writable");if(r==="a"&&!a)throw new TypeError("Private accessor was defined without a setter");if(typeof n=="function"?e!==n||!a:!n.has(e))throw new TypeError("Cannot write private member to an object whose class did not declare it");return r==="a"?a.call(e,t):a?a.value=t:n.set(e,t),t}function as(e,n){if(n===null||typeof n!="object"&&typeof n!="function")throw new TypeError("Cannot use 'in' operator on non-object");return typeof e=="function"?n===e:e.has(n)}function is(e,n,t){if(n!=null){if(typeof n!="object"&&typeof n!="function")throw new TypeError("Object expected.");var r,a;if(t){if(!Symbol.asyncDispose)throw new TypeError("Symbol.asyncDispose is not defined.");r=n[Symbol.asyncDispose]}if(r===void 0){if(!Symbol.dispose)throw new TypeError("Symbol.dispose is not defined.");r=n[Symbol.dispose],t&&(a=r)}if(typeof r!="function")throw new TypeError("Object not disposable.");a&&(r=function(){try{a.call(this)}catch(i){return Promise.reject(i)}}),e.stack.push({value:n,dispose:r,async:t})}else t&&e.stack.push({async:!0});return n}var Wl=typeof SuppressedError=="function"?SuppressedError:function(e,n,t){var r=new Error(t);return r.name="SuppressedError",r.error=e,r.suppressed=n,r};function ss(e){function n(i){e.error=e.hasError?new Wl(i,e.error,"An error was suppressed during disposal."):i,e.hasError=!0}var t,r=0;function a(){for(;t=e.stack.pop();)try{if(!t.async&&r===1)return r=0,e.stack.push(t),Promise.resolve().then(a);if(t.dispose){var i=t.dispose.call(t.value);if(t.async)return r|=2,Promise.resolve(i).then(a,function(s){return n(s),a()})}else r|=1}catch(s){n(s)}if(r===1)return e.hasError?Promise.reject(e.error):Promise.resolve();if(e.hasError)throw e.error}return a()}function os(e,n){return typeof e=="string"&&/^\.\.?\//.test(e)?e.replace(/\.(tsx)$|((?:\.d)?)((?:\.[^./]+?)?)\.([cm]?)ts$/i,function(t,r,a,i,s){return r?n?".jsx":".js":a&&(!i||!s)?t:a+i+"."+s.toLowerCase()+"js"}):e}const Vl={__extends:Rr,__assign:At,__rest:Li,__decorate:Ri,__param:Bi,__esDecorate:$i,__runInitializers:qi,__propKey:Gi,__setFunctionName:Ui,__metadata:Hi,__awaiter:zi,__generator:Ki,__createBinding:zt,__exportStar:Wi,__values:Ft,__read:Br,__spread:Vi,__spreadArrays:Zi,__spreadArray:Re,__await:Nn,__asyncGenerator:Yi,__asyncDelegator:Qi,__asyncValues:Ji,__makeTemplateObject:Xi,__importStar:es,__importDefault:ns,__classPrivateFieldGet:ts,__classPrivateFieldSet:rs,__classPrivateFieldIn:as,__addDisposableResource:is,__disposeResources:ss,__rewriteRelativeImportExtension:os},Zl=Object.freeze(Object.defineProperty({__proto__:null,__addDisposableResource:is,get __assign(){return At},__asyncDelegator:Qi,__asyncGenerator:Yi,__asyncValues:Ji,__await:Nn,__awaiter:zi,__classPrivateFieldGet:ts,__classPrivateFieldIn:as,__classPrivateFieldSet:rs,__createBinding:zt,__decorate:Ri,__disposeResources:ss,__esDecorate:$i,__exportStar:Wi,__extends:Rr,__generator:Ki,__importDefault:ns,__importStar:es,__makeTemplateObject:Xi,__metadata:Hi,__param:Bi,__propKey:Gi,__read:Br,__rest:Li,__rewriteRelativeImportExtension:os,__runInitializers:qi,__setFunctionName:Ui,__spread:Vi,__spreadArray:Re,__spreadArrays:Zi,__values:Ft,default:Vl},Symbol.toStringTag,{value:"Module"})),Yl=Cr(Zl);var On={};function us(e){return Intl.getCanonicalLocales(e)}function Ql(e,n){var t=n.zoneNames,r=n.uppercaseLinks,a=e.toUpperCase(),i=t.reduce(function(o,l){return o[l.toUpperCase()]=l,o},{}),s=r[a]||i[a];return s==="Etc/UTC"||s==="Etc/GMT"?"UTC":s}/*!
 *  decimal.js v10.5.0
 *  An arbitrary-precision Decimal type for JavaScript.
 *  https://github.com/MikeMcl/decimal.js
 *  Copyright (c) 2025 Michael Mclaughlin <M8ch88l@gmail.com>
 *  MIT Licence
 */var mr=9e15,on=1e9,pr="0123456789abcdef",Mt="2.3025850929940456840179914546843642076011014886287729760333279009675726096773524802359972050895982983419677840422862486334095254650828067566662873690987816894829072083255546808437998948262331985283935053089653777326288461633662222876982198867465436674744042432743651550489343149393914796194044002221051017141748003688084012647080685567743216228355220114804663715659121373450747856947683463616792101806445070648000277502684916746550586856935673420670581136429224554405758925724208241314695689016758940256776311356919292033376587141660230105703089634572075440370847469940168269282808481184289314848524948644871927809676271275775397027668605952496716674183485704422507197965004714951050492214776567636938662976979522110718264549734772662425709429322582798502585509785265383207606726317164309505995087807523710333101197857547331541421808427543863591778117054309827482385045648019095610299291824318237525357709750539565187697510374970888692180205189339507238539205144634197265287286965110862571492198849978748873771345686209167058",Ot="3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963185950244594553469083026425223082533446850352619311881710100031378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577818577805321712268066130019278766111959092164201989380952572010654858632789",hr={precision:20,rounding:4,modulo:1,toExpNeg:-7,toExpPos:21,minE:-9e15,maxE:mr,crypto:!1},ls,Ke,R=!0,Kt="[DecimalError] ",an=Kt+"Invalid argument: ",cs=Kt+"Precision limit exceeded",ds=Kt+"crypto unavailable",fs="[object Decimal]",me=Math.floor,ie=Math.pow,Jl=/^0b([01]+(\.[01]*)?|\.[01]+)(p[+-]?\d+)?$/i,Xl=/^0x([0-9a-f]+(\.[0-9a-f]*)?|\.[0-9a-f]+)(p[+-]?\d+)?$/i,ec=/^0o([0-7]+(\.[0-7]*)?|\.[0-7]+)(p[+-]?\d+)?$/i,ms=/^(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?$/i,Pe=1e7,L=7,nc=9007199254740991,tc=Mt.length-1,gr=Ot.length-1,E={toStringTag:fs};E.absoluteValue=E.abs=function(){var e=new this.constructor(this);return e.s<0&&(e.s=1),M(e)};E.ceil=function(){return M(new this.constructor(this),this.e+1,2)};E.clampedTo=E.clamp=function(e,n){var t,r=this,a=r.constructor;if(e=new a(e),n=new a(n),!e.s||!n.s)return new a(NaN);if(e.gt(n))throw Error(an+n);return t=r.cmp(e),t<0?e:r.cmp(n)>0?n:new a(r)};E.comparedTo=E.cmp=function(e){var n,t,r,a,i=this,s=i.d,o=(e=new i.constructor(e)).d,l=i.s,u=e.s;if(!s||!o)return!l||!u?NaN:l!==u?l:s===o?0:!s^l<0?1:-1;if(!s[0]||!o[0])return s[0]?l:o[0]?-u:0;if(l!==u)return l;if(i.e!==e.e)return i.e>e.e^l<0?1:-1;for(r=s.length,a=o.length,n=0,t=r<a?r:a;n<t;++n)if(s[n]!==o[n])return s[n]>o[n]^l<0?1:-1;return r===a?0:r>a^l<0?1:-1};E.cosine=E.cos=function(){var e,n,t=this,r=t.constructor;return t.d?t.d[0]?(e=r.precision,n=r.rounding,r.precision=e+Math.max(t.e,t.sd())+L,r.rounding=1,t=rc(r,ys(r,t)),r.precision=e,r.rounding=n,M(Ke==2||Ke==3?t.neg():t,e,n,!0)):new r(1):new r(NaN)};E.cubeRoot=E.cbrt=function(){var e,n,t,r,a,i,s,o,l,u,d=this,f=d.constructor;if(!d.isFinite()||d.isZero())return new f(d);for(R=!1,i=d.s*ie(d.s*d,1/3),!i||Math.abs(i)==1/0?(t=le(d.d),e=d.e,(i=(e-t.length+1)%3)&&(t+=i==1||i==-2?"0":"00"),i=ie(t,1/3),e=me((e+1)/3)-(e%3==(e<0?-1:2)),i==1/0?t="5e"+e:(t=i.toExponential(),t=t.slice(0,t.indexOf("e")+1)+e),r=new f(t),r.s=d.s):r=new f(i.toString()),s=(e=f.precision)+3;;)if(o=r,l=o.times(o).times(o),u=l.plus(d),r=W(u.plus(d).times(o),u.plus(l),s+2,1),le(o.d).slice(0,s)===(t=le(r.d)).slice(0,s))if(t=t.slice(s-3,s+1),t=="9999"||!a&&t=="4999"){if(!a&&(M(o,e+1,0),o.times(o).times(o).eq(d))){r=o;break}s+=4,a=1}else{(!+t||!+t.slice(1)&&t.charAt(0)=="5")&&(M(r,e+1,1),n=!r.times(r).times(r).eq(d));break}return R=!0,M(r,e,f.rounding,n)};E.decimalPlaces=E.dp=function(){var e,n=this.d,t=NaN;if(n){if(e=n.length-1,t=(e-me(this.e/L))*L,e=n[e],e)for(;e%10==0;e/=10)t--;t<0&&(t=0)}return t};E.dividedBy=E.div=function(e){return W(this,new this.constructor(e))};E.dividedToIntegerBy=E.divToInt=function(e){var n=this,t=n.constructor;return M(W(n,new t(e),0,1,1),t.precision,t.rounding)};E.equals=E.eq=function(e){return this.cmp(e)===0};E.floor=function(){return M(new this.constructor(this),this.e+1,3)};E.greaterThan=E.gt=function(e){return this.cmp(e)>0};E.greaterThanOrEqualTo=E.gte=function(e){var n=this.cmp(e);return n==1||n===0};E.hyperbolicCosine=E.cosh=function(){var e,n,t,r,a,i=this,s=i.constructor,o=new s(1);if(!i.isFinite())return new s(i.s?1/0:NaN);if(i.isZero())return o;t=s.precision,r=s.rounding,s.precision=t+Math.max(i.e,i.sd())+4,s.rounding=1,a=i.d.length,a<32?(e=Math.ceil(a/3),n=(1/Vt(4,e)).toString()):(e=16,n="2.3283064365386962890625e-10"),i=kn(s,1,i.times(n),new s(1),!0);for(var l,u=e,d=new s(8);u--;)l=i.times(i),i=o.minus(l.times(d.minus(l.times(d))));return M(i,s.precision=t,s.rounding=r,!0)};E.hyperbolicSine=E.sinh=function(){var e,n,t,r,a=this,i=a.constructor;if(!a.isFinite()||a.isZero())return new i(a);if(n=i.precision,t=i.rounding,i.precision=n+Math.max(a.e,a.sd())+4,i.rounding=1,r=a.d.length,r<3)a=kn(i,2,a,a,!0);else{e=1.4*Math.sqrt(r),e=e>16?16:e|0,a=a.times(1/Vt(5,e)),a=kn(i,2,a,a,!0);for(var s,o=new i(5),l=new i(16),u=new i(20);e--;)s=a.times(a),a=a.times(o.plus(s.times(l.times(s).plus(u))))}return i.precision=n,i.rounding=t,M(a,n,t,!0)};E.hyperbolicTangent=E.tanh=function(){var e,n,t=this,r=t.constructor;return t.isFinite()?t.isZero()?new r(t):(e=r.precision,n=r.rounding,r.precision=e+7,r.rounding=1,W(t.sinh(),t.cosh(),r.precision=e,r.rounding=n)):new r(t.s)};E.inverseCosine=E.acos=function(){var e=this,n=e.constructor,t=e.abs().cmp(1),r=n.precision,a=n.rounding;return t!==-1?t===0?e.isNeg()?$e(n,r,a):new n(0):new n(NaN):e.isZero()?$e(n,r+4,a).times(.5):(n.precision=r+6,n.rounding=1,e=new n(1).minus(e).div(e.plus(1)).sqrt().atan(),n.precision=r,n.rounding=a,e.times(2))};E.inverseHyperbolicCosine=E.acosh=function(){var e,n,t=this,r=t.constructor;return t.lte(1)?new r(t.eq(1)?0:NaN):t.isFinite()?(e=r.precision,n=r.rounding,r.precision=e+Math.max(Math.abs(t.e),t.sd())+4,r.rounding=1,R=!1,t=t.times(t).minus(1).sqrt().plus(t),R=!0,r.precision=e,r.rounding=n,t.ln()):new r(t)};E.inverseHyperbolicSine=E.asinh=function(){var e,n,t=this,r=t.constructor;return!t.isFinite()||t.isZero()?new r(t):(e=r.precision,n=r.rounding,r.precision=e+2*Math.max(Math.abs(t.e),t.sd())+6,r.rounding=1,R=!1,t=t.times(t).plus(1).sqrt().plus(t),R=!0,r.precision=e,r.rounding=n,t.ln())};E.inverseHyperbolicTangent=E.atanh=function(){var e,n,t,r,a=this,i=a.constructor;return a.isFinite()?a.e>=0?new i(a.abs().eq(1)?a.s/0:a.isZero()?a:NaN):(e=i.precision,n=i.rounding,r=a.sd(),Math.max(r,e)<2*-a.e-1?M(new i(a),e,n,!0):(i.precision=t=r-a.e,a=W(a.plus(1),new i(1).minus(a),t+e,1),i.precision=e+4,i.rounding=1,a=a.ln(),i.precision=e,i.rounding=n,a.times(.5))):new i(NaN)};E.inverseSine=E.asin=function(){var e,n,t,r,a=this,i=a.constructor;return a.isZero()?new i(a):(n=a.abs().cmp(1),t=i.precision,r=i.rounding,n!==-1?n===0?(e=$e(i,t+4,r).times(.5),e.s=a.s,e):new i(NaN):(i.precision=t+6,i.rounding=1,a=a.div(new i(1).minus(a.times(a)).sqrt().plus(1)).atan(),i.precision=t,i.rounding=r,a.times(2)))};E.inverseTangent=E.atan=function(){var e,n,t,r,a,i,s,o,l,u=this,d=u.constructor,f=d.precision,m=d.rounding;if(u.isFinite()){if(u.isZero())return new d(u);if(u.abs().eq(1)&&f+4<=gr)return s=$e(d,f+4,m).times(.25),s.s=u.s,s}else{if(!u.s)return new d(NaN);if(f+4<=gr)return s=$e(d,f+4,m).times(.5),s.s=u.s,s}for(d.precision=o=f+10,d.rounding=1,t=Math.min(28,o/L+2|0),e=t;e;--e)u=u.div(u.times(u).plus(1).sqrt().plus(1));for(R=!1,n=Math.ceil(o/L),r=1,l=u.times(u),s=new d(u),a=u;e!==-1;)if(a=a.times(l),i=s.minus(a.div(r+=2)),a=a.times(l),s=i.plus(a.div(r+=2)),s.d[n]!==void 0)for(e=n;s.d[e]===i.d[e]&&e--;);return t&&(s=s.times(2<<t-1)),R=!0,M(s,d.precision=f,d.rounding=m,!0)};E.isFinite=function(){return!!this.d};E.isInteger=E.isInt=function(){return!!this.d&&me(this.e/L)>this.d.length-2};E.isNaN=function(){return!this.s};E.isNegative=E.isNeg=function(){return this.s<0};E.isPositive=E.isPos=function(){return this.s>0};E.isZero=function(){return!!this.d&&this.d[0]===0};E.lessThan=E.lt=function(e){return this.cmp(e)<0};E.lessThanOrEqualTo=E.lte=function(e){return this.cmp(e)<1};E.logarithm=E.log=function(e){var n,t,r,a,i,s,o,l,u=this,d=u.constructor,f=d.precision,m=d.rounding,p=5;if(e==null)e=new d(10),n=!0;else{if(e=new d(e),t=e.d,e.s<0||!t||!t[0]||e.eq(1))return new d(NaN);n=e.eq(10)}if(t=u.d,u.s<0||!t||!t[0]||u.eq(1))return new d(t&&!t[0]?-1/0:u.s!=1?NaN:t?0:1/0);if(n)if(t.length>1)i=!0;else{for(a=t[0];a%10===0;)a/=10;i=a!==1}if(R=!1,o=f+p,s=nn(u,o),r=n?Pt(d,o+10):nn(e,o),l=W(s,r,o,1),Wn(l.d,a=f,m))do if(o+=10,s=nn(u,o),r=n?Pt(d,o+10):nn(e,o),l=W(s,r,o,1),!i){+le(l.d).slice(a+1,a+15)+1==1e14&&(l=M(l,f+1,0));break}while(Wn(l.d,a+=10,m));return R=!0,M(l,f,m)};E.minus=E.sub=function(e){var n,t,r,a,i,s,o,l,u,d,f,m,p=this,w=p.constructor;if(e=new w(e),!p.d||!e.d)return!p.s||!e.s?e=new w(NaN):p.d?e.s=-e.s:e=new w(e.d||p.s!==e.s?p:NaN),e;if(p.s!=e.s)return e.s=-e.s,p.plus(e);if(u=p.d,m=e.d,o=w.precision,l=w.rounding,!u[0]||!m[0]){if(m[0])e.s=-e.s;else if(u[0])e=new w(p);else return new w(l===3?-0:0);return R?M(e,o,l):e}if(t=me(e.e/L),d=me(p.e/L),u=u.slice(),i=d-t,i){for(f=i<0,f?(n=u,i=-i,s=m.length):(n=m,t=d,s=u.length),r=Math.max(Math.ceil(o/L),s)+2,i>r&&(i=r,n.length=1),n.reverse(),r=i;r--;)n.push(0);n.reverse()}else{for(r=u.length,s=m.length,f=r<s,f&&(s=r),r=0;r<s;r++)if(u[r]!=m[r]){f=u[r]<m[r];break}i=0}for(f&&(n=u,u=m,m=n,e.s=-e.s),s=u.length,r=m.length-s;r>0;--r)u[s++]=0;for(r=m.length;r>i;){if(u[--r]<m[r]){for(a=r;a&&u[--a]===0;)u[a]=Pe-1;--u[a],u[r]+=Pe}u[r]-=m[r]}for(;u[--s]===0;)u.pop();for(;u[0]===0;u.shift())--t;return u[0]?(e.d=u,e.e=Wt(u,t),R?M(e,o,l):e):new w(l===3?-0:0)};E.modulo=E.mod=function(e){var n,t=this,r=t.constructor;return e=new r(e),!t.d||!e.s||e.d&&!e.d[0]?new r(NaN):!e.d||t.d&&!t.d[0]?M(new r(t),r.precision,r.rounding):(R=!1,r.modulo==9?(n=W(t,e.abs(),0,3,1),n.s*=e.s):n=W(t,e,0,r.modulo,1),n=n.times(e),R=!0,t.minus(n))};E.naturalExponential=E.exp=function(){return vr(this)};E.naturalLogarithm=E.ln=function(){return nn(this)};E.negated=E.neg=function(){var e=new this.constructor(this);return e.s=-e.s,M(e)};E.plus=E.add=function(e){var n,t,r,a,i,s,o,l,u,d,f=this,m=f.constructor;if(e=new m(e),!f.d||!e.d)return!f.s||!e.s?e=new m(NaN):f.d||(e=new m(e.d||f.s===e.s?f:NaN)),e;if(f.s!=e.s)return e.s=-e.s,f.minus(e);if(u=f.d,d=e.d,o=m.precision,l=m.rounding,!u[0]||!d[0])return d[0]||(e=new m(f)),R?M(e,o,l):e;if(i=me(f.e/L),r=me(e.e/L),u=u.slice(),a=i-r,a){for(a<0?(t=u,a=-a,s=d.length):(t=d,r=i,s=u.length),i=Math.ceil(o/L),s=i>s?i+1:s+1,a>s&&(a=s,t.length=1),t.reverse();a--;)t.push(0);t.reverse()}for(s=u.length,a=d.length,s-a<0&&(a=s,t=d,d=u,u=t),n=0;a;)n=(u[--a]=u[a]+d[a]+n)/Pe|0,u[a]%=Pe;for(n&&(u.unshift(n),++r),s=u.length;u[--s]==0;)u.pop();return e.d=u,e.e=Wt(u,r),R?M(e,o,l):e};E.precision=E.sd=function(e){var n,t=this;if(e!==void 0&&e!==!!e&&e!==1&&e!==0)throw Error(an+e);return t.d?(n=ps(t.d),e&&t.e+1>n&&(n=t.e+1)):n=NaN,n};E.round=function(){var e=this,n=e.constructor;return M(new n(e),e.e+1,n.rounding)};E.sine=E.sin=function(){var e,n,t=this,r=t.constructor;return t.isFinite()?t.isZero()?new r(t):(e=r.precision,n=r.rounding,r.precision=e+Math.max(t.e,t.sd())+L,r.rounding=1,t=ic(r,ys(r,t)),r.precision=e,r.rounding=n,M(Ke>2?t.neg():t,e,n,!0)):new r(NaN)};E.squareRoot=E.sqrt=function(){var e,n,t,r,a,i,s=this,o=s.d,l=s.e,u=s.s,d=s.constructor;if(u!==1||!o||!o[0])return new d(!u||u<0&&(!o||o[0])?NaN:o?s:1/0);for(R=!1,u=Math.sqrt(+s),u==0||u==1/0?(n=le(o),(n.length+l)%2==0&&(n+="0"),u=Math.sqrt(n),l=me((l+1)/2)-(l<0||l%2),u==1/0?n="5e"+l:(n=u.toExponential(),n=n.slice(0,n.indexOf("e")+1)+l),r=new d(n)):r=new d(u.toString()),t=(l=d.precision)+3;;)if(i=r,r=i.plus(W(s,i,t+2,1)).times(.5),le(i.d).slice(0,t)===(n=le(r.d)).slice(0,t))if(n=n.slice(t-3,t+1),n=="9999"||!a&&n=="4999"){if(!a&&(M(i,l+1,0),i.times(i).eq(s))){r=i;break}t+=4,a=1}else{(!+n||!+n.slice(1)&&n.charAt(0)=="5")&&(M(r,l+1,1),e=!r.times(r).eq(s));break}return R=!0,M(r,l,d.rounding,e)};E.tangent=E.tan=function(){var e,n,t=this,r=t.constructor;return t.isFinite()?t.isZero()?new r(t):(e=r.precision,n=r.rounding,r.precision=e+10,r.rounding=1,t=t.sin(),t.s=1,t=W(t,new r(1).minus(t.times(t)).sqrt(),e+10,0),r.precision=e,r.rounding=n,M(Ke==2||Ke==4?t.neg():t,e,n,!0)):new r(NaN)};E.times=E.mul=function(e){var n,t,r,a,i,s,o,l,u,d=this,f=d.constructor,m=d.d,p=(e=new f(e)).d;if(e.s*=d.s,!m||!m[0]||!p||!p[0])return new f(!e.s||m&&!m[0]&&!p||p&&!p[0]&&!m?NaN:!m||!p?e.s/0:e.s*0);for(t=me(d.e/L)+me(e.e/L),l=m.length,u=p.length,l<u&&(i=m,m=p,p=i,s=l,l=u,u=s),i=[],s=l+u,r=s;r--;)i.push(0);for(r=u;--r>=0;){for(n=0,a=l+r;a>r;)o=i[a]+p[r]*m[a-r-1]+n,i[a--]=o%Pe|0,n=o/Pe|0;i[a]=(i[a]+n)%Pe|0}for(;!i[--s];)i.pop();return n?++t:i.shift(),e.d=i,e.e=Wt(i,t),R?M(e,f.precision,f.rounding):e};E.toBinary=function(e,n){return $r(this,2,e,n)};E.toDecimalPlaces=E.toDP=function(e,n){var t=this,r=t.constructor;return t=new r(t),e===void 0?t:(be(e,0,on),n===void 0?n=r.rounding:be(n,0,8),M(t,e+t.e+1,n))};E.toExponential=function(e,n){var t,r=this,a=r.constructor;return e===void 0?t=Ue(r,!0):(be(e,0,on),n===void 0?n=a.rounding:be(n,0,8),r=M(new a(r),e+1,n),t=Ue(r,!0,e+1)),r.isNeg()&&!r.isZero()?"-"+t:t};E.toFixed=function(e,n){var t,r,a=this,i=a.constructor;return e===void 0?t=Ue(a):(be(e,0,on),n===void 0?n=i.rounding:be(n,0,8),r=M(new i(a),e+a.e+1,n),t=Ue(r,!1,e+r.e+1)),a.isNeg()&&!a.isZero()?"-"+t:t};E.toFraction=function(e){var n,t,r,a,i,s,o,l,u,d,f,m,p=this,w=p.d,h=p.constructor;if(!w)return new h(p);if(u=t=new h(1),r=l=new h(0),n=new h(r),i=n.e=ps(w)-p.e-1,s=i%L,n.d[0]=ie(10,s<0?L+s:s),e==null)e=i>0?n:u;else{if(o=new h(e),!o.isInt()||o.lt(u))throw Error(an+o);e=o.gt(n)?i>0?n:u:o}for(R=!1,o=new h(le(w)),d=h.precision,h.precision=i=w.length*L*2;f=W(o,n,0,1,1),a=t.plus(f.times(r)),a.cmp(e)!=1;)t=r,r=a,a=u,u=l.plus(f.times(a)),l=a,a=n,n=o.minus(f.times(a)),o=a;return a=W(e.minus(t),r,0,1,1),l=l.plus(a.times(u)),t=t.plus(a.times(r)),l.s=u.s=p.s,m=W(u,r,i,1).minus(p).abs().cmp(W(l,t,i,1).minus(p).abs())<1?[u,r]:[l,t],h.precision=d,R=!0,m};E.toHexadecimal=E.toHex=function(e,n){return $r(this,16,e,n)};E.toNearest=function(e,n){var t=this,r=t.constructor;if(t=new r(t),e==null){if(!t.d)return t;e=new r(1),n=r.rounding}else{if(e=new r(e),n===void 0?n=r.rounding:be(n,0,8),!t.d)return e.s?t:e;if(!e.d)return e.s&&(e.s=t.s),e}return e.d[0]?(R=!1,t=W(t,e,0,n,1).times(e),R=!0,M(t)):(e.s=t.s,t=e),t};E.toNumber=function(){return+this};E.toOctal=function(e,n){return $r(this,8,e,n)};E.toPower=E.pow=function(e){var n,t,r,a,i,s,o=this,l=o.constructor,u=+(e=new l(e));if(!o.d||!e.d||!o.d[0]||!e.d[0])return new l(ie(+o,u));if(o=new l(o),o.eq(1))return o;if(r=l.precision,i=l.rounding,e.eq(1))return M(o,r,i);if(n=me(e.e/L),n>=e.d.length-1&&(t=u<0?-u:u)<=nc)return a=hs(l,o,t,r),e.s<0?new l(1).div(a):M(a,r,i);if(s=o.s,s<0){if(n<e.d.length-1)return new l(NaN);if((e.d[n]&1)==0&&(s=1),o.e==0&&o.d[0]==1&&o.d.length==1)return o.s=s,o}return t=ie(+o,u),n=t==0||!isFinite(t)?me(u*(Math.log("0."+le(o.d))/Math.LN10+o.e+1)):new l(t+"").e,n>l.maxE+1||n<l.minE-1?new l(n>0?s/0:0):(R=!1,l.rounding=o.s=1,t=Math.min(12,(n+"").length),a=vr(e.times(nn(o,r+t)),r),a.d&&(a=M(a,r+5,1),Wn(a.d,r,i)&&(n=r+10,a=M(vr(e.times(nn(o,n+t)),n),n+5,1),+le(a.d).slice(r+1,r+15)+1==1e14&&(a=M(a,r+1,0)))),a.s=s,R=!0,l.rounding=i,M(a,r,i))};E.toPrecision=function(e,n){var t,r=this,a=r.constructor;return e===void 0?t=Ue(r,r.e<=a.toExpNeg||r.e>=a.toExpPos):(be(e,1,on),n===void 0?n=a.rounding:be(n,0,8),r=M(new a(r),e,n),t=Ue(r,e<=r.e||r.e<=a.toExpNeg,e)),r.isNeg()&&!r.isZero()?"-"+t:t};E.toSignificantDigits=E.toSD=function(e,n){var t=this,r=t.constructor;return e===void 0?(e=r.precision,n=r.rounding):(be(e,1,on),n===void 0?n=r.rounding:be(n,0,8)),M(new r(t),e,n)};E.toString=function(){var e=this,n=e.constructor,t=Ue(e,e.e<=n.toExpNeg||e.e>=n.toExpPos);return e.isNeg()&&!e.isZero()?"-"+t:t};E.truncated=E.trunc=function(){return M(new this.constructor(this),this.e+1,1)};E.valueOf=E.toJSON=function(){var e=this,n=e.constructor,t=Ue(e,e.e<=n.toExpNeg||e.e>=n.toExpPos);return e.isNeg()?"-"+t:t};function le(e){var n,t,r,a=e.length-1,i="",s=e[0];if(a>0){for(i+=s,n=1;n<a;n++)r=e[n]+"",t=L-r.length,t&&(i+=Je(t)),i+=r;s=e[n],r=s+"",t=L-r.length,t&&(i+=Je(t))}else if(s===0)return"0";for(;s%10===0;)s/=10;return i+s}function be(e,n,t){if(e!==~~e||e<n||e>t)throw Error(an+e)}function Wn(e,n,t,r){var a,i,s,o;for(i=e[0];i>=10;i/=10)--n;return--n<0?(n+=L,a=0):(a=Math.ceil((n+1)/L),n%=L),i=ie(10,L-n),o=e[a]%i|0,r==null?n<3?(n==0?o=o/100|0:n==1&&(o=o/10|0),s=t<4&&o==99999||t>3&&o==49999||o==5e4||o==0):s=(t<4&&o+1==i||t>3&&o+1==i/2)&&(e[a+1]/i/100|0)==ie(10,n-2)-1||(o==i/2||o==0)&&(e[a+1]/i/100|0)==0:n<4?(n==0?o=o/1e3|0:n==1?o=o/100|0:n==2&&(o=o/10|0),s=(r||t<4)&&o==9999||!r&&t>3&&o==4999):s=((r||t<4)&&o+1==i||!r&&t>3&&o+1==i/2)&&(e[a+1]/i/1e3|0)==ie(10,n-3)-1,s}function Et(e,n,t){for(var r,a=[0],i,s=0,o=e.length;s<o;){for(i=a.length;i--;)a[i]*=n;for(a[0]+=pr.indexOf(e.charAt(s++)),r=0;r<a.length;r++)a[r]>t-1&&(a[r+1]===void 0&&(a[r+1]=0),a[r+1]+=a[r]/t|0,a[r]%=t)}return a.reverse()}function rc(e,n){var t,r,a;if(n.isZero())return n;r=n.d.length,r<32?(t=Math.ceil(r/3),a=(1/Vt(4,t)).toString()):(t=16,a="2.3283064365386962890625e-10"),e.precision+=t,n=kn(e,1,n.times(a),new e(1));for(var i=t;i--;){var s=n.times(n);n=s.times(s).minus(s).times(8).plus(1)}return e.precision-=t,n}var W=function(){function e(r,a,i){var s,o=0,l=r.length;for(r=r.slice();l--;)s=r[l]*a+o,r[l]=s%i|0,o=s/i|0;return o&&r.unshift(o),r}function n(r,a,i,s){var o,l;if(i!=s)l=i>s?1:-1;else for(o=l=0;o<i;o++)if(r[o]!=a[o]){l=r[o]>a[o]?1:-1;break}return l}function t(r,a,i,s){for(var o=0;i--;)r[i]-=o,o=r[i]<a[i]?1:0,r[i]=o*s+r[i]-a[i];for(;!r[0]&&r.length>1;)r.shift()}return function(r,a,i,s,o,l){var u,d,f,m,p,w,h,_,y,x,v,b,S,T,k,I,N,j,D,F,O=r.constructor,G=r.s==a.s?1:-1,B=r.d,A=a.d;if(!B||!B[0]||!A||!A[0])return new O(!r.s||!a.s||(B?A&&B[0]==A[0]:!A)?NaN:B&&B[0]==0||!A?G*0:G/0);for(l?(p=1,d=r.e-a.e):(l=Pe,p=L,d=me(r.e/p)-me(a.e/p)),D=A.length,N=B.length,y=new O(G),x=y.d=[],f=0;A[f]==(B[f]||0);f++);if(A[f]>(B[f]||0)&&d--,i==null?(T=i=O.precision,s=O.rounding):o?T=i+(r.e-a.e)+1:T=i,T<0)x.push(1),w=!0;else{if(T=T/p+2|0,f=0,D==1){for(m=0,A=A[0],T++;(f<N||m)&&T--;f++)k=m*l+(B[f]||0),x[f]=k/A|0,m=k%A|0;w=m||f<N}else{for(m=l/(A[0]+1)|0,m>1&&(A=e(A,m,l),B=e(B,m,l),D=A.length,N=B.length),I=D,v=B.slice(0,D),b=v.length;b<D;)v[b++]=0;F=A.slice(),F.unshift(0),j=A[0],A[1]>=l/2&&++j;do m=0,u=n(A,v,D,b),u<0?(S=v[0],D!=b&&(S=S*l+(v[1]||0)),m=S/j|0,m>1?(m>=l&&(m=l-1),h=e(A,m,l),_=h.length,b=v.length,u=n(h,v,_,b),u==1&&(m--,t(h,D<_?F:A,_,l))):(m==0&&(u=m=1),h=A.slice()),_=h.length,_<b&&h.unshift(0),t(v,h,b,l),u==-1&&(b=v.length,u=n(A,v,D,b),u<1&&(m++,t(v,D<b?F:A,b,l))),b=v.length):u===0&&(m++,v=[0]),x[f++]=m,u&&v[0]?v[b++]=B[I]||0:(v=[B[I]],b=1);while((I++<N||v[0]!==void 0)&&T--);w=v[0]!==void 0}x[0]||x.shift()}if(p==1)y.e=d,ls=w;else{for(f=1,m=x[0];m>=10;m/=10)f++;y.e=f+d*p-1,M(y,o?i+y.e+1:i,s,w)}return y}}();function M(e,n,t,r){var a,i,s,o,l,u,d,f,m,p=e.constructor;e:if(n!=null){if(f=e.d,!f)return e;for(a=1,o=f[0];o>=10;o/=10)a++;if(i=n-a,i<0)i+=L,s=n,d=f[m=0],l=d/ie(10,a-s-1)%10|0;else if(m=Math.ceil((i+1)/L),o=f.length,m>=o)if(r){for(;o++<=m;)f.push(0);d=l=0,a=1,i%=L,s=i-L+1}else break e;else{for(d=o=f[m],a=1;o>=10;o/=10)a++;i%=L,s=i-L+a,l=s<0?0:d/ie(10,a-s-1)%10|0}if(r=r||n<0||f[m+1]!==void 0||(s<0?d:d%ie(10,a-s-1)),u=t<4?(l||r)&&(t==0||t==(e.s<0?3:2)):l>5||l==5&&(t==4||r||t==6&&(i>0?s>0?d/ie(10,a-s):0:f[m-1])%10&1||t==(e.s<0?8:7)),n<1||!f[0])return f.length=0,u?(n-=e.e+1,f[0]=ie(10,(L-n%L)%L),e.e=-n||0):f[0]=e.e=0,e;if(i==0?(f.length=m,o=1,m--):(f.length=m+1,o=ie(10,L-i),f[m]=s>0?(d/ie(10,a-s)%ie(10,s)|0)*o:0),u)for(;;)if(m==0){for(i=1,s=f[0];s>=10;s/=10)i++;for(s=f[0]+=o,o=1;s>=10;s/=10)o++;i!=o&&(e.e++,f[0]==Pe&&(f[0]=1));break}else{if(f[m]+=o,f[m]!=Pe)break;f[m--]=0,o=1}for(i=f.length;f[--i]===0;)f.pop()}return R&&(e.e>p.maxE?(e.d=null,e.e=NaN):e.e<p.minE&&(e.e=0,e.d=[0])),e}function Ue(e,n,t){if(!e.isFinite())return vs(e);var r,a=e.e,i=le(e.d),s=i.length;return n?(t&&(r=t-s)>0?i=i.charAt(0)+"."+i.slice(1)+Je(r):s>1&&(i=i.charAt(0)+"."+i.slice(1)),i=i+(e.e<0?"e":"e+")+e.e):a<0?(i="0."+Je(-a-1)+i,t&&(r=t-s)>0&&(i+=Je(r))):a>=s?(i+=Je(a+1-s),t&&(r=t-a-1)>0&&(i=i+"."+Je(r))):((r=a+1)<s&&(i=i.slice(0,r)+"."+i.slice(r)),t&&(r=t-s)>0&&(a+1===s&&(i+="."),i+=Je(r))),i}function Wt(e,n){var t=e[0];for(n*=L;t>=10;t/=10)n++;return n}function Pt(e,n,t){if(n>tc)throw R=!0,t&&(e.precision=t),Error(cs);return M(new e(Mt),n,1,!0)}function $e(e,n,t){if(n>gr)throw Error(cs);return M(new e(Ot),n,t,!0)}function ps(e){var n=e.length-1,t=n*L+1;if(n=e[n],n){for(;n%10==0;n/=10)t--;for(n=e[0];n>=10;n/=10)t++}return t}function Je(e){for(var n="";e--;)n+="0";return n}function hs(e,n,t,r){var a,i=new e(1),s=Math.ceil(r/L+4);for(R=!1;;){if(t%2&&(i=i.times(n),ja(i.d,s)&&(a=!0)),t=me(t/2),t===0){t=i.d.length-1,a&&i.d[t]===0&&++i.d[t];break}n=n.times(n),ja(n.d,s)}return R=!0,i}function Ca(e){return e.d[e.d.length-1]&1}function gs(e,n,t){for(var r,a,i=new e(n[0]),s=0;++s<n.length;){if(a=new e(n[s]),!a.s){i=a;break}r=i.cmp(a),(r===t||r===0&&i.s===t)&&(i=a)}return i}function vr(e,n){var t,r,a,i,s,o,l,u=0,d=0,f=0,m=e.constructor,p=m.rounding,w=m.precision;if(!e.d||!e.d[0]||e.e>17)return new m(e.d?e.d[0]?e.s<0?0:1/0:1:e.s?e.s<0?0:e:NaN);for(n==null?(R=!1,l=w):l=n,o=new m(.03125);e.e>-2;)e=e.times(o),f+=5;for(r=Math.log(ie(2,f))/Math.LN10*2+5|0,l+=r,t=i=s=new m(1),m.precision=l;;){if(i=M(i.times(e),l,1),t=t.times(++d),o=s.plus(W(i,t,l,1)),le(o.d).slice(0,l)===le(s.d).slice(0,l)){for(a=f;a--;)s=M(s.times(s),l,1);if(n==null)if(u<3&&Wn(s.d,l-r,p,u))m.precision=l+=10,t=i=o=new m(1),d=0,u++;else return M(s,m.precision=w,p,R=!0);else return m.precision=w,s}s=o}}function nn(e,n){var t,r,a,i,s,o,l,u,d,f,m,p=1,w=10,h=e,_=h.d,y=h.constructor,x=y.rounding,v=y.precision;if(h.s<0||!_||!_[0]||!h.e&&_[0]==1&&_.length==1)return new y(_&&!_[0]?-1/0:h.s!=1?NaN:_?0:h);if(n==null?(R=!1,d=v):d=n,y.precision=d+=w,t=le(_),r=t.charAt(0),Math.abs(i=h.e)<15e14){for(;r<7&&r!=1||r==1&&t.charAt(1)>3;)h=h.times(e),t=le(h.d),r=t.charAt(0),p++;i=h.e,r>1?(h=new y("0."+t),i++):h=new y(r+"."+t.slice(1))}else return u=Pt(y,d+2,v).times(i+""),h=nn(new y(r+"."+t.slice(1)),d-w).plus(u),y.precision=v,n==null?M(h,v,x,R=!0):h;for(f=h,l=s=h=W(h.minus(1),h.plus(1),d,1),m=M(h.times(h),d,1),a=3;;){if(s=M(s.times(m),d,1),u=l.plus(W(s,new y(a),d,1)),le(u.d).slice(0,d)===le(l.d).slice(0,d))if(l=l.times(2),i!==0&&(l=l.plus(Pt(y,d+2,v).times(i+""))),l=W(l,new y(p),d,1),n==null)if(Wn(l.d,d-w,x,o))y.precision=d+=w,u=s=h=W(f.minus(1),f.plus(1),d,1),m=M(h.times(h),d,1),a=o=1;else return M(l,y.precision=v,x,R=!0);else return y.precision=v,l;l=u,a+=2}}function vs(e){return String(e.s*e.s/0)}function Ct(e,n){var t,r,a;for((t=n.indexOf("."))>-1&&(n=n.replace(".","")),(r=n.search(/e/i))>0?(t<0&&(t=r),t+=+n.slice(r+1),n=n.substring(0,r)):t<0&&(t=n.length),r=0;n.charCodeAt(r)===48;r++);for(a=n.length;n.charCodeAt(a-1)===48;--a);if(n=n.slice(r,a),n){if(a-=r,e.e=t=t-r-1,e.d=[],r=(t+1)%L,t<0&&(r+=L),r<a){for(r&&e.d.push(+n.slice(0,r)),a-=L;r<a;)e.d.push(+n.slice(r,r+=L));n=n.slice(r),r=L-n.length}else r-=a;for(;r--;)n+="0";e.d.push(+n),R&&(e.e>e.constructor.maxE?(e.d=null,e.e=NaN):e.e<e.constructor.minE&&(e.e=0,e.d=[0]))}else e.e=0,e.d=[0];return e}function ac(e,n){var t,r,a,i,s,o,l,u,d;if(n.indexOf("_")>-1){if(n=n.replace(/(\d)_(?=\d)/g,"$1"),ms.test(n))return Ct(e,n)}else if(n==="Infinity"||n==="NaN")return+n||(e.s=NaN),e.e=NaN,e.d=null,e;if(Xl.test(n))t=16,n=n.toLowerCase();else if(Jl.test(n))t=2;else if(ec.test(n))t=8;else throw Error(an+n);for(i=n.search(/p/i),i>0?(l=+n.slice(i+1),n=n.substring(2,i)):n=n.slice(2),i=n.indexOf("."),s=i>=0,r=e.constructor,s&&(n=n.replace(".",""),o=n.length,i=o-i,a=hs(r,new r(t),i,i*2)),u=Et(n,t,Pe),d=u.length-1,i=d;u[i]===0;--i)u.pop();return i<0?new r(e.s*0):(e.e=Wt(u,d),e.d=u,R=!1,s&&(e=W(e,a,o*4)),l&&(e=e.times(Math.abs(l)<54?ie(2,l):$.pow(2,l))),R=!0,e)}function ic(e,n){var t,r=n.d.length;if(r<3)return n.isZero()?n:kn(e,2,n,n);t=1.4*Math.sqrt(r),t=t>16?16:t|0,n=n.times(1/Vt(5,t)),n=kn(e,2,n,n);for(var a,i=new e(5),s=new e(16),o=new e(20);t--;)a=n.times(n),n=n.times(i.plus(a.times(s.times(a).minus(o))));return n}function kn(e,n,t,r,a){var i,s,o,l,u=e.precision,d=Math.ceil(u/L);for(R=!1,l=t.times(t),o=new e(r);;){if(s=W(o.times(l),new e(n++*n++),u,1),o=a?r.plus(s):r.minus(s),r=W(s.times(l),new e(n++*n++),u,1),s=o.plus(r),s.d[d]!==void 0){for(i=d;s.d[i]===o.d[i]&&i--;);if(i==-1)break}i=o,o=r,r=s,s=i}return R=!0,s.d.length=d+1,s}function Vt(e,n){for(var t=e;--n;)t*=e;return t}function ys(e,n){var t,r=n.s<0,a=$e(e,e.precision,1),i=a.times(.5);if(n=n.abs(),n.lte(i))return Ke=r?4:1,n;if(t=n.divToInt(a),t.isZero())Ke=r?3:2;else{if(n=n.minus(t.times(a)),n.lte(i))return Ke=Ca(t)?r?2:3:r?4:1,n;Ke=Ca(t)?r?1:4:r?3:2}return n.minus(a).abs()}function $r(e,n,t,r){var a,i,s,o,l,u,d,f,m,p=e.constructor,w=t!==void 0;if(w?(be(t,1,on),r===void 0?r=p.rounding:be(r,0,8)):(t=p.precision,r=p.rounding),!e.isFinite())d=vs(e);else{for(d=Ue(e),s=d.indexOf("."),w?(a=2,n==16?t=t*4-3:n==8&&(t=t*3-2)):a=n,s>=0&&(d=d.replace(".",""),m=new p(1),m.e=d.length-s,m.d=Et(Ue(m),10,a),m.e=m.d.length),f=Et(d,10,a),i=l=f.length;f[--l]==0;)f.pop();if(!f[0])d=w?"0p+0":"0";else{if(s<0?i--:(e=new p(e),e.d=f,e.e=i,e=W(e,m,t,r,0,a),f=e.d,i=e.e,u=ls),s=f[t],o=a/2,u=u||f[t+1]!==void 0,u=r<4?(s!==void 0||u)&&(r===0||r===(e.s<0?3:2)):s>o||s===o&&(r===4||u||r===6&&f[t-1]&1||r===(e.s<0?8:7)),f.length=t,u)for(;++f[--t]>a-1;)f[t]=0,t||(++i,f.unshift(1));for(l=f.length;!f[l-1];--l);for(s=0,d="";s<l;s++)d+=pr.charAt(f[s]);if(w){if(l>1)if(n==16||n==8){for(s=n==16?4:3,--l;l%s;l++)d+="0";for(f=Et(d,a,n),l=f.length;!f[l-1];--l);for(s=1,d="1.";s<l;s++)d+=pr.charAt(f[s])}else d=d.charAt(0)+"."+d.slice(1);d=d+(i<0?"p":"p+")+i}else if(i<0){for(;++i;)d="0"+d;d="0."+d}else if(++i>l)for(i-=l;i--;)d+="0";else i<l&&(d=d.slice(0,i)+"."+d.slice(i))}d=(n==16?"0x":n==2?"0b":n==8?"0o":"")+d}return e.s<0?"-"+d:d}function ja(e,n){if(e.length>n)return e.length=n,!0}function sc(e){return new this(e).abs()}function oc(e){return new this(e).acos()}function uc(e){return new this(e).acosh()}function lc(e,n){return new this(e).plus(n)}function cc(e){return new this(e).asin()}function dc(e){return new this(e).asinh()}function fc(e){return new this(e).atan()}function mc(e){return new this(e).atanh()}function pc(e,n){e=new this(e),n=new this(n);var t,r=this.precision,a=this.rounding,i=r+4;return!e.s||!n.s?t=new this(NaN):!e.d&&!n.d?(t=$e(this,i,1).times(n.s>0?.25:.75),t.s=e.s):!n.d||e.isZero()?(t=n.s<0?$e(this,r,a):new this(0),t.s=e.s):!e.d||n.isZero()?(t=$e(this,i,1).times(.5),t.s=e.s):n.s<0?(this.precision=i,this.rounding=1,t=this.atan(W(e,n,i,1)),n=$e(this,i,1),this.precision=r,this.rounding=a,t=e.s<0?t.minus(n):t.plus(n)):t=this.atan(W(e,n,i,1)),t}function hc(e){return new this(e).cbrt()}function gc(e){return M(e=new this(e),e.e+1,2)}function vc(e,n,t){return new this(e).clamp(n,t)}function yc(e){if(!e||typeof e!="object")throw Error(Kt+"Object expected");var n,t,r,a=e.defaults===!0,i=["precision",1,on,"rounding",0,8,"toExpNeg",-9e15,0,"toExpPos",0,mr,"maxE",0,mr,"minE",-9e15,0,"modulo",0,9];for(n=0;n<i.length;n+=3)if(t=i[n],a&&(this[t]=hr[t]),(r=e[t])!==void 0)if(me(r)===r&&r>=i[n+1]&&r<=i[n+2])this[t]=r;else throw Error(an+t+": "+r);if(t="crypto",a&&(this[t]=hr[t]),(r=e[t])!==void 0)if(r===!0||r===!1||r===0||r===1)if(r)if(typeof crypto<"u"&&crypto&&(crypto.getRandomValues||crypto.randomBytes))this[t]=!0;else throw Error(ds);else this[t]=!1;else throw Error(an+t+": "+r);return this}function wc(e){return new this(e).cos()}function _c(e){return new this(e).cosh()}function ws(e){var n,t,r;function a(i){var s,o,l,u=this;if(!(u instanceof a))return new a(i);if(u.constructor=a,Sa(i)){u.s=i.s,R?!i.d||i.e>a.maxE?(u.e=NaN,u.d=null):i.e<a.minE?(u.e=0,u.d=[0]):(u.e=i.e,u.d=i.d.slice()):(u.e=i.e,u.d=i.d?i.d.slice():i.d);return}if(l=typeof i,l==="number"){if(i===0){u.s=1/i<0?-1:1,u.e=0,u.d=[0];return}if(i<0?(i=-i,u.s=-1):u.s=1,i===~~i&&i<1e7){for(s=0,o=i;o>=10;o/=10)s++;R?s>a.maxE?(u.e=NaN,u.d=null):s<a.minE?(u.e=0,u.d=[0]):(u.e=s,u.d=[i]):(u.e=s,u.d=[i]);return}if(i*0!==0){i||(u.s=NaN),u.e=NaN,u.d=null;return}return Ct(u,i.toString())}if(l==="string")return(o=i.charCodeAt(0))===45?(i=i.slice(1),u.s=-1):(o===43&&(i=i.slice(1)),u.s=1),ms.test(i)?Ct(u,i):ac(u,i);if(l==="bigint")return i<0?(i=-i,u.s=-1):u.s=1,Ct(u,i.toString());throw Error(an+i)}if(a.prototype=E,a.ROUND_UP=0,a.ROUND_DOWN=1,a.ROUND_CEIL=2,a.ROUND_FLOOR=3,a.ROUND_HALF_UP=4,a.ROUND_HALF_DOWN=5,a.ROUND_HALF_EVEN=6,a.ROUND_HALF_CEIL=7,a.ROUND_HALF_FLOOR=8,a.EUCLID=9,a.config=a.set=yc,a.clone=ws,a.isDecimal=Sa,a.abs=sc,a.acos=oc,a.acosh=uc,a.add=lc,a.asin=cc,a.asinh=dc,a.atan=fc,a.atanh=mc,a.atan2=pc,a.cbrt=hc,a.ceil=gc,a.clamp=vc,a.cos=wc,a.cosh=_c,a.div=bc,a.exp=xc,a.floor=Dc,a.hypot=Ec,a.ln=Cc,a.log=jc,a.log10=Nc,a.log2=Sc,a.max=kc,a.min=Ic,a.mod=Tc,a.mul=Ac,a.pow=Fc,a.random=Mc,a.round=Oc,a.sign=Pc,a.sin=Lc,a.sinh=Rc,a.sqrt=Bc,a.sub=$c,a.sum=qc,a.tan=Gc,a.tanh=Uc,a.trunc=Hc,e===void 0&&(e={}),e&&e.defaults!==!0)for(r=["precision","rounding","toExpNeg","toExpPos","maxE","minE","modulo","crypto"],n=0;n<r.length;)e.hasOwnProperty(t=r[n++])||(e[t]=this[t]);return a.config(e),a}function bc(e,n){return new this(e).div(n)}function xc(e){return new this(e).exp()}function Dc(e){return M(e=new this(e),e.e+1,3)}function Ec(){var e,n,t=new this(0);for(R=!1,e=0;e<arguments.length;)if(n=new this(arguments[e++]),n.d)t.d&&(t=t.plus(n.times(n)));else{if(n.s)return R=!0,new this(1/0);t=n}return R=!0,t.sqrt()}function Sa(e){return e instanceof $||e&&e.toStringTag===fs||!1}function Cc(e){return new this(e).ln()}function jc(e,n){return new this(e).log(n)}function Sc(e){return new this(e).log(2)}function Nc(e){return new this(e).log(10)}function kc(){return gs(this,arguments,-1)}function Ic(){return gs(this,arguments,1)}function Tc(e,n){return new this(e).mod(n)}function Ac(e,n){return new this(e).mul(n)}function Fc(e,n){return new this(e).pow(n)}function Mc(e){var n,t,r,a,i=0,s=new this(1),o=[];if(e===void 0?e=this.precision:be(e,1,on),r=Math.ceil(e/L),this.crypto)if(crypto.getRandomValues)for(n=crypto.getRandomValues(new Uint32Array(r));i<r;)a=n[i],a>=429e7?n[i]=crypto.getRandomValues(new Uint32Array(1))[0]:o[i++]=a%1e7;else if(crypto.randomBytes){for(n=crypto.randomBytes(r*=4);i<r;)a=n[i]+(n[i+1]<<8)+(n[i+2]<<16)+((n[i+3]&127)<<24),a>=214e7?crypto.randomBytes(4).copy(n,i):(o.push(a%1e7),i+=4);i=r/4}else throw Error(ds);else for(;i<r;)o[i++]=Math.random()*1e7|0;for(r=o[--i],e%=L,r&&e&&(a=ie(10,L-e),o[i]=(r/a|0)*a);o[i]===0;i--)o.pop();if(i<0)t=0,o=[0];else{for(t=-1;o[0]===0;t-=L)o.shift();for(r=1,a=o[0];a>=10;a/=10)r++;r<L&&(t-=L-r)}return s.e=t,s.d=o,s}function Oc(e){return M(e=new this(e),e.e+1,this.rounding)}function Pc(e){return e=new this(e),e.d?e.d[0]?e.s:0*e.s:e.s||NaN}function Lc(e){return new this(e).sin()}function Rc(e){return new this(e).sinh()}function Bc(e){return new this(e).sqrt()}function $c(e,n){return new this(e).sub(n)}function qc(){var e=0,n=arguments,t=new this(n[e]);for(R=!1;t.s&&++e<n.length;)t=t.plus(n[e]);return R=!0,M(t,this.precision,this.rounding)}function Gc(e){return new this(e).tan()}function Uc(e){return new this(e).tanh()}function Hc(e){return M(e=new this(e),e.e+1,1)}E[Symbol.for("nodejs.util.inspect.custom")]=E.toString;E[Symbol.toStringTag]="Decimal";var $=E.constructor=ws(hr);Mt=new $(Mt);Ot=new $(Ot);new $(10);var et=new $(0),zc=new $(-0);function nt(e,n){var t=n&&n.cache?n.cache:Jc,r=n&&n.serializer?n.serializer:Yc,a=n&&n.strategy?n.strategy:Vc;return a(e,{cache:t,serializer:r})}function Kc(e){return e==null||typeof e=="number"||typeof e=="boolean"}function Wc(e,n,t,r){var a=Kc(r)?r:t(r),i=n.get(a);return typeof i>"u"&&(i=e.call(this,r),n.set(a,i)),i}function _s(e,n,t){var r=Array.prototype.slice.call(arguments,3),a=t(r),i=n.get(a);return typeof i>"u"&&(i=e.apply(this,r),n.set(a,i)),i}function bs(e,n,t,r,a){return t.bind(n,e,r,a)}function Vc(e,n){var t=e.length===1?Wc:_s;return bs(e,this,t,n.cache.create(),n.serializer)}function Zc(e,n){return bs(e,this,_s,n.cache.create(),n.serializer)}var Yc=function(){return JSON.stringify(arguments)},Qc=function(){function e(){this.cache=Object.create(null)}return e.prototype.get=function(n){return this.cache[n]},e.prototype.set=function(n,t){this.cache[n]=t},e}(),Jc={create:function(){return new Qc}},tt={variadic:Zc};function Un(e,n){if(typeof e.repeat=="function")return e.repeat(n);for(var t=new Array(n),r=0;r<t.length;r++)t[r]=e;return t.join("")}function xs(e,n,t,r){e.get(n)||e.set(n,Object.create(null));var a=e.get(n);a[t]=r}function Xc(e,n,t){for(var r=0,a=Object.keys(t);r<a.length;r++){var i=a[r];xs(e,n,i,t[i])}}function ed(e,n,t){return Ds(e,n,t)[t]}function Ds(e,n){for(var t=[],r=2;r<arguments.length;r++)t[r-2]=arguments[r];var a=e.get(n);if(!a)throw new TypeError("".concat(n," InternalSlot has not been initialized"));return t.reduce(function(i,s){return i[s]=a[s],i},Object.create(null))}function nd(e){return e.type==="literal"}function td(e,n,t){var r=t.value;Object.defineProperty(e,n,{configurable:!0,enumerable:!1,writable:!0,value:r})}function rd(e,n,t){Object.defineProperty(e,n,{configurable:!0,enumerable:!0,writable:!0,value:t})}function Q(e,n,t){if(t===void 0&&(t=Error),!e)throw new t(n)}var ad=nt(function(){for(var e,n=[],t=0;t<arguments.length;t++)n[t]=arguments[t];return new((e=Intl.NumberFormat).bind.apply(e,Re([void 0],n,!1)))},{strategy:tt.variadic}),id=nt(function(){for(var e,n=[],t=0;t<arguments.length;t++)n[t]=arguments[t];return new((e=Intl.DateTimeFormat).bind.apply(e,Re([void 0],n,!1)))},{strategy:tt.variadic}),sd=nt(function(){for(var e,n=[],t=0;t<arguments.length;t++)n[t]=arguments[t];return new((e=Intl.PluralRules).bind.apply(e,Re([void 0],n,!1)))},{strategy:tt.variadic}),od=nt(function(){for(var e,n=[],t=0;t<arguments.length;t++)n[t]=arguments[t];return new((e=Intl.Locale).bind.apply(e,Re([void 0],n,!1)))},{strategy:tt.variadic}),ud=nt(function(){for(var e,n=[],t=0;t<arguments.length;t++)n[t]=arguments[t];return new((e=Intl.ListFormat).bind.apply(e,Re([void 0],n,!1)))},{strategy:tt.variadic});function qr(e){if(typeof e=="symbol")throw TypeError("Cannot convert a Symbol value to a string");return String(e)}function Gr(e){if(typeof e=="number")return new $(e);if(Q(typeof e!="bigint"&&typeof e!="symbol","BigInt and Symbol are not supported",TypeError),e===void 0)return new $(NaN);if(e===null||e===0)return et;if(e===!0)return new $(1);if(typeof e=="string")try{return new $(e)}catch{return new $(NaN)}Q(typeof e=="object","object expected",TypeError);var n=Zr(e,"number");return Q(typeof n!="object","object expected",TypeError),Gr(n)}function ld(e){var n=Gr(e);if(n.isNaN()||n.isZero())return et;if(n.isFinite())return n;var t=n.abs().floor();return n.isNegative()&&(t=t.negated()),t}function cd(e){return e.isFinite()?e.abs().greaterThan(8.64*1e15)?new $(NaN):ld(e):new $(NaN)}function Ur(e){if(e==null)throw new TypeError("undefined/null cannot be converted to object");return Object(e)}function dd(e,n){return Object.is?Object.is(e,n):e===n?e!==0||1/e===1/n:e!==e&&n!==n}function Es(e){return new Array(e)}function Cs(e,n){return Object.prototype.hasOwnProperty.call(e,n)}function fd(e){if(e===null)return"Null";if(typeof e>"u")return"Undefined";if(typeof e=="function"||typeof e=="object")return"Object";if(typeof e=="number")return"Number";if(typeof e=="boolean")return"Boolean";if(typeof e=="string")return"String";if(typeof e=="symbol")return"Symbol";if(typeof e=="bigint")return"BigInt"}var js=864e5;function rt(e,n){return e-Math.floor(e/n)*n}function Hr(e){return Math.floor(e/js)}function md(e){return rt(Hr(e)+4,7)}function Ss(e){return Date.UTC(e,0)/js}function pd(e){return Date.UTC(e,0)}function zr(e){return new Date(e).getUTCFullYear()}function Ns(e){return e%4!==0?365:e%100!==0?366:e%400!==0?365:366}function Kr(e){return Hr(e)-Ss(zr(e))}function Wr(e){return Ns(zr(e))===365?0:1}function ks(e){var n=Kr(e),t=Wr(e);if(n>=0&&n<31)return 0;if(n<59+t)return 1;if(n<90+t)return 2;if(n<120+t)return 3;if(n<151+t)return 4;if(n<181+t)return 5;if(n<212+t)return 6;if(n<243+t)return 7;if(n<273+t)return 8;if(n<304+t)return 9;if(n<334+t)return 10;if(n<365+t)return 11;throw new Error("Invalid time")}function hd(e){var n=Kr(e),t=ks(e),r=Wr(e);if(t===0)return n+1;if(t===1)return n-30;if(t===2)return n-58-r;if(t===3)return n-89-r;if(t===4)return n-119-r;if(t===5)return n-150-r;if(t===6)return n-180-r;if(t===7)return n-211-r;if(t===8)return n-242-r;if(t===9)return n-272-r;if(t===10)return n-303-r;if(t===11)return n-333-r;throw new Error("Invalid time")}var gd=24,Is=60,Ts=60,Vr=1e3,As=Vr*Ts,vd=As*Is;function yd(e){return rt(Math.floor(e/vd),gd)}function wd(e){return rt(Math.floor(e/As),Is)}function _d(e){return rt(Math.floor(e/Vr),Ts)}function Fs(e){return typeof e=="function"}function bd(e,n,t){if(!Fs(e))return!1;if(t!=null&&t.boundTargetFunction){var r=t==null?void 0:t.boundTargetFunction;return n instanceof r}if(typeof n!="object")return!1;var a=e.prototype;if(typeof a!="object")throw new TypeError("OrdinaryHasInstance called on an object with an invalid prototype property.");return Object.prototype.isPrototypeOf.call(a,n)}function xd(e){return rt(e,Vr)}function Dd(e,n){var t;n==="string"?t=["toString","valueOf"]:t=["valueOf","toString"];for(var r=0,a=t;r<a.length;r++){var i=a[r],s=e[i];if(Fs(s)){var o=s.call(e);if(typeof o!="object")return o}}throw new TypeError("Cannot convert object to primitive value")}function Zr(e,n){if(typeof e=="object"&&e!=null){var t=Symbol.toPrimitive in e?e[Symbol.toPrimitive]:void 0,r=void 0;if(t!==void 0){n===void 0?r="default":n==="string"?r="string":(Q(n==="number",'preferredType must be "string" or "number"'),r="number");var a=t.call(e,r);if(typeof a!="object")return a;throw new TypeError("Cannot convert exotic object to primitive.")}return n===void 0&&(n="number"),Dd(e,n)}return e}function Ms(e){return typeof e>"u"?Object.create(null):Ur(e)}function Rn(e,n,t,r){if(e===void 0)return r;var a=Number(e);if(isNaN(a)||a<n||a>t)throw new RangeError("".concat(a," is outside of range [").concat(n,", ").concat(t,"]"));return Math.floor(a)}function yr(e,n,t,r,a){var i=e[n];return Rn(i,t,r,a)}function fe(e,n,t,r,a){if(typeof e!="object")throw new TypeError("Options must be an object");var i=e[n];if(i!==void 0){if(t!=="boolean"&&t!=="string")throw new TypeError("invalid type");if(t==="boolean"&&(i=!!i),t==="string"&&(i=qr(i)),r!==void 0&&!r.filter(function(s){return s==i}).length)throw new RangeError("".concat(i," is not within ").concat(r.join(", ")));return i}return a}function Ed(e){if(typeof e>"u")return Object.create(null);if(typeof e=="object")return e;throw new TypeError("Options must be an object")}function Os(e,n,t,r,a,i){var s=e[n];if(s===void 0)return i;if(s===!0)return r;var o=!!s;if(o===!1)return a;if(s=qr(s),s==="true"||s==="false")return i;if((t||[]).indexOf(s)===-1)throw new RangeError("Invalid value ".concat(s));return s}var Ps=["angle-degree","area-acre","area-hectare","concentr-percent","digital-bit","digital-byte","digital-gigabit","digital-gigabyte","digital-kilobit","digital-kilobyte","digital-megabit","digital-megabyte","digital-petabyte","digital-terabit","digital-terabyte","duration-day","duration-hour","duration-millisecond","duration-minute","duration-month","duration-second","duration-week","duration-year","length-centimeter","length-foot","length-inch","length-kilometer","length-meter","length-mile-scandinavian","length-mile","length-millimeter","length-yard","mass-gram","mass-kilogram","mass-ounce","mass-pound","mass-stone","temperature-celsius","temperature-fahrenheit","volume-fluid-ounce","volume-gallon","volume-liter","volume-milliliter"];function Ls(e){return e.slice(e.indexOf("-")+1)}var Rs=Ps.map(Ls);function jt(e){return Rs.indexOf(e)>-1}function Cd(e,n){var t=n.zoneNamesFromData,r=n.uppercaseLinks,a=e.toUpperCase(),i=new Set,s=new Set;return t.map(function(o){return o.toUpperCase()}).forEach(function(o){return i.add(o)}),Object.keys(r).forEach(function(o){s.add(o.toUpperCase()),i.add(r[o].toUpperCase())}),i.has(a)||s.has(a)}function jd(e){return e.replace(/([a-z])/g,function(n,t){return t.toUpperCase()})}var Sd=/[^A-Z]/;function Bs(e){return e=jd(e),!(e.length!==3||Sd.test(e))}function Nd(e){return e.replace(/([A-Z])/g,function(n,t){return t.toLowerCase()})}function $s(e){if(e=Nd(e),jt(e))return!0;var n=e.split("-per-");if(n.length!==2)return!1;var t=n[0],r=n[1];return!(!jt(t)||!jt(r))}function Yr(e,n,t,r){if(e.eq(n)||(Q(n.lessThan(e)&&e.lessThan(t),"x should be between r1 and r2 but x=".concat(e,", r1=").concat(n,", r2=").concat(t)),r==="zero"))return n;if(r==="infinity")return t;var a=e.minus(n),i=t.minus(e);if(a.lessThan(i))return n;if(i.lessThan(a))return t;if(Q(a.eq(i),"d1 should be equal to d2"),r==="half-zero")return n;if(r==="half-infinity")return t;Q(r==="half-even","unsignedRoundingMode should be half-even");var s=n.div(t.minus(n)).mod(2);return s.isZero()?n:t}var Na=new Set(["unit","exponentMinusSign","minusSign","plusSign","percentSign","exponentSeparator","percent","percentSign","currency","literal"]);function qs(e,n,t){for(var r=t.getInternalSlots,a=r(e),i=a.dataLocaleData.numbers.symbols[a.numberingSystem],s=new RegExp("s?[".concat(i.rangeSign,"]s?")),o=n.findIndex(function(m){return m.type==="literal"&&s.test(m.value)}),l=[],u=o-1;u>=0&&Na.has(n[u].type);u--)l.unshift(n[u]);if(Array.from(l.map(function(m){return m.value}).join("")).length>1){var d=Array.from(n);return d.splice(o-l.length,l.length),d}for(var f=[],u=o+1;u<n.length&&Na.has(n[u].type);u++)f.push(n[u]);if(Array.from(f.map(function(m){return m.value}).join("")).length>1){var d=Array.from(n);return d.splice(o+1,f.length),d}return n}$.set({toExpPos:100});function wr(e,n){var t=e.notation,r=e.dataLocaleData,a=e.numberingSystem;switch(t){case"standard":return 0;case"scientific":return n.toNumber();case"engineering":var i=n.div(3).floor();return i.times(3).toNumber();default:{Q(t==="compact","Invalid notation");var s=e.compactDisplay,o=e.style,l=e.currencyDisplay,u=void 0;if(o==="currency"&&l!=="name"){var d=r.numbers.currency[a]||r.numbers.currency[r.numbers.nu[0]];u=d.short}else{var f=r.numbers.decimal[a]||r.numbers.decimal[r.numbers.nu[0]];u=s==="long"?f.long:f.short}if(!u)return 0;var m=$.pow(10,n).toString(),p=Object.keys(u);if(m<p[0])return 0;if(m>p[p.length-1])return p[p.length-1].length-1;var w=p.indexOf(m);if(w===-1)return 0;var h=p[w],_=u[h].other;return _==="0"?0:h.length-u[h].other.match(/0+/)[0].length}}}var kd={ceil:"zero",floor:"infinity",expand:"infinity",trunc:"zero",halfCeil:"half-zero",halfFloor:"half-infinity",halfExpand:"half-infinity",halfTrunc:"half-zero",halfEven:"half-even"},Id={ceil:"infinity",floor:"zero",expand:"infinity",trunc:"zero",halfCeil:"half-infinity",halfFloor:"half-zero",halfExpand:"half-infinity",halfTrunc:"half-zero",halfEven:"half-even"};function Qr(e,n){return n?kd[e]:Id[e]}$.set({toExpPos:100});function Gs(e,n){return e.times($.pow(10,-n))}function Td(e,n,t){var r=e.times($.pow(10,n)).floor(),a=r.div(t).floor().times(t),i=Gs(a,n);return{n1:a,r1:i}}function Ad(e,n,t){var r=e.times($.pow(10,n)).ceil(),a=r.div(t).ceil().times(t),i=Gs(a,n);return{n2:a,r2:i}}function Lt(e,n,t,r,a){var i=t,s=Td(e,i,r),o=s.n1,l=s.r1,u=Ad(e,i,r),d=u.n2,f=u.r2,m=Yr(e,l,f,a),p,w,h;m.eq(l)?(p=o,w=l):(p=d,w=f),p.isZero()?h="0":h=p.toString();var _;if(i!==0){var y=h.length;if(y<=i){var x=Un("0",i-y+1);h=x+h,y=i+1}var v=h.slice(0,y-i),b=h.slice(h.length-i);h=v+"."+b,_=v.length}else _=h.length;for(var S=t-n;S>0&&h[h.length-1]==="0";)h=h.slice(0,h.length-1),S--;return h[h.length-1]==="."&&(h=h.slice(0,h.length-1)),{formattedString:h,roundedNumber:w,integerDigitsCount:_,roundingMagnitude:-i}}function Fd(e,n){for(var t=$.pow(10,n),r=$.pow(10,n-1),a=e.div(r).log(10).plus(n).minus(1).ceil(),i=a;;){var s=e.div($.pow(10,i.minus(n).plus(1))).floor();if(s.lessThan(t)&&s.greaterThanOrEqualTo(r)){var o=s.times($.pow(10,i.minus(n).plus(1)));if(o.lessThanOrEqualTo(e))return{n1:s,e1:i,r1:o}}i=i.minus(1)}}function Md(e,n){for(var t=$.pow(10,n),r=$.pow(10,n-1),a=e.div(t).log(10).plus(n).minus(1).floor(),i=a;;){var s=e.div($.pow(10,i.minus(n).plus(1))).ceil();if(s.lessThan(t)&&s.greaterThanOrEqualTo(r)){var o=s.times($.pow(10,i.minus(n).plus(1)));if(o.greaterThanOrEqualTo(e))return{n2:s,e2:i,r2:o}}i=i.plus(1)}}function _r(e,n,t,r){var a=t,i,s,o;if(e.isZero())i=Un("0",a),s=0,o=et;else{var l=Fd(e,a),u=l.n1,d=l.e1,f=l.r1,m=Md(e,a),p=m.n2,w=m.e2,h=m.r2,_=Yr(e,f,h,r),y=void 0;_.eq(f)?(y=u,s=d.toNumber(),o=f):(y=p,s=w.toNumber(),o=h),i=y.toString()}var x;if(s>=a-1?(i=i+Un("0",s-a+1),x=s+1):s>=0?(i=i.slice(0,s+1)+"."+i.slice(i.length-(a-(s+1))),x=s+1):(Q(s<0,"e should be less than 0"),i="0."+Un("0",-s-1)+i,x=1),i.includes(".")&&t>n){for(var v=t-n;v>0&&i[i.length-1]==="0";)i=i.slice(0,i.length-1),v--;i[i.length-1]==="."&&(i=i.slice(0,i.length-1))}return{formattedString:i,roundedNumber:o,integerDigitsCount:x,roundingMagnitude:s}}function Jr(e,n){var t=n,r;t.isZero()&&t.isNegative()?(r="negative",t=et):(Q(t.isFinite(),"NumberFormatDigitInternalSlots value is not finite"),t.lessThan(0)?r="negative":r="positive",r==="negative"&&(t=t.negated()));var a,i=e.roundingType,s=Qr(e.roundingMode,r==="negative");switch(i){case"significantDigits":a=_r(t,e.minimumSignificantDigits,e.maximumSignificantDigits,s);break;case"fractionDigits":a=Lt(t,e.minimumFractionDigits,e.maximumFractionDigits,e.roundingIncrement,s);break;default:var o=_r(t,e.minimumSignificantDigits,e.maximumSignificantDigits,s),l=Lt(t,e.minimumFractionDigits,e.maximumFractionDigits,e.roundingIncrement,s);e.roundingType==="morePrecision"?o.roundingMagnitude<=l.roundingMagnitude?a=o:a=l:(Q(e.roundingType==="lessPrecision","Invalid roundingType"),o.roundingMagnitude<=l.roundingMagnitude?a=l:a=o);break}t=a.roundedNumber;var u=a.formattedString;if(e.trailingZeroDisplay==="stripIfInteger"&&t.isInteger()){var d=u.indexOf(".");d>-1&&(u=u.slice(0,d))}var f=a.integerDigitsCount,m=e.minimumIntegerDigits;if(f<m){var p=Un("0",m-f);u=p+u}return r==="negative"&&(t.isZero()?t=zc:t=t.negated()),{roundedNumber:t,formattedString:u}}function Us(e,n){if(n.isZero())return[0,0];n.isNegative()&&(n=n.negated());var t=n.log(10).floor(),r=wr(e,t);n=n.times($.pow(10,-r));var a=Jr(e,n);if(a.roundedNumber.isZero())return[r,t.toNumber()];var i=a.roundedNumber.log(10).floor();return i.eq(t.minus(r))?[r,t.toNumber()]:[wr(e,t.plus(1)),t.plus(1).toNumber()]}function Hs(e,n){var t=n.currencyDigitsData;return Cs(t,e)?t[e]:2}var zs=/[\$\+<->\^`\|~\xA2-\xA6\xA8\xA9\xAC\xAE-\xB1\xB4\xB8\xD7\xF7\u02C2-\u02C5\u02D2-\u02DF\u02E5-\u02EB\u02ED\u02EF-\u02FF\u0375\u0384\u0385\u03F6\u0482\u058D-\u058F\u0606-\u0608\u060B\u060E\u060F\u06DE\u06E9\u06FD\u06FE\u07F6\u07FE\u07FF\u09F2\u09F3\u09FA\u09FB\u0AF1\u0B70\u0BF3-\u0BFA\u0C7F\u0D4F\u0D79\u0E3F\u0F01-\u0F03\u0F13\u0F15-\u0F17\u0F1A-\u0F1F\u0F34\u0F36\u0F38\u0FBE-\u0FC5\u0FC7-\u0FCC\u0FCE\u0FCF\u0FD5-\u0FD8\u109E\u109F\u1390-\u1399\u166D\u17DB\u1940\u19DE-\u19FF\u1B61-\u1B6A\u1B74-\u1B7C\u1FBD\u1FBF-\u1FC1\u1FCD-\u1FCF\u1FDD-\u1FDF\u1FED-\u1FEF\u1FFD\u1FFE\u2044\u2052\u207A-\u207C\u208A-\u208C\u20A0-\u20BF\u2100\u2101\u2103-\u2106\u2108\u2109\u2114\u2116-\u2118\u211E-\u2123\u2125\u2127\u2129\u212E\u213A\u213B\u2140-\u2144\u214A-\u214D\u214F\u218A\u218B\u2190-\u2307\u230C-\u2328\u232B-\u2426\u2440-\u244A\u249C-\u24E9\u2500-\u2767\u2794-\u27C4\u27C7-\u27E5\u27F0-\u2982\u2999-\u29D7\u29DC-\u29FB\u29FE-\u2B73\u2B76-\u2B95\u2B97-\u2BFF\u2CE5-\u2CEA\u2E50\u2E51\u2E80-\u2E99\u2E9B-\u2EF3\u2F00-\u2FD5\u2FF0-\u2FFB\u3004\u3012\u3013\u3020\u3036\u3037\u303E\u303F\u309B\u309C\u3190\u3191\u3196-\u319F\u31C0-\u31E3\u3200-\u321E\u322A-\u3247\u3250\u3260-\u327F\u328A-\u32B0\u32C0-\u33FF\u4DC0-\u4DFF\uA490-\uA4C6\uA700-\uA716\uA720\uA721\uA789\uA78A\uA828-\uA82B\uA836-\uA839\uAA77-\uAA79\uAB5B\uAB6A\uAB6B\uFB29\uFBB2-\uFBC1\uFDFC\uFDFD\uFE62\uFE64-\uFE66\uFE69\uFF04\uFF0B\uFF1C-\uFF1E\uFF3E\uFF40\uFF5C\uFF5E\uFFE0-\uFFE6\uFFE8-\uFFEE\uFFFC\uFFFD]|\uD800[\uDD37-\uDD3F\uDD79-\uDD89\uDD8C-\uDD8E\uDD90-\uDD9C\uDDA0\uDDD0-\uDDFC]|\uD802[\uDC77\uDC78\uDEC8]|\uD805\uDF3F|\uD807[\uDFD5-\uDFF1]|\uD81A[\uDF3C-\uDF3F\uDF45]|\uD82F\uDC9C|\uD834[\uDC00-\uDCF5\uDD00-\uDD26\uDD29-\uDD64\uDD6A-\uDD6C\uDD83\uDD84\uDD8C-\uDDA9\uDDAE-\uDDE8\uDE00-\uDE41\uDE45\uDF00-\uDF56]|\uD835[\uDEC1\uDEDB\uDEFB\uDF15\uDF35\uDF4F\uDF6F\uDF89\uDFA9\uDFC3]|\uD836[\uDC00-\uDDFF\uDE37-\uDE3A\uDE6D-\uDE74\uDE76-\uDE83\uDE85\uDE86]|\uD838[\uDD4F\uDEFF]|\uD83B[\uDCAC\uDCB0\uDD2E\uDEF0\uDEF1]|\uD83C[\uDC00-\uDC2B\uDC30-\uDC93\uDCA0-\uDCAE\uDCB1-\uDCBF\uDCC1-\uDCCF\uDCD1-\uDCF5\uDD0D-\uDDAD\uDDE6-\uDE02\uDE10-\uDE3B\uDE40-\uDE48\uDE50\uDE51\uDE60-\uDE65\uDF00-\uDFFF]|\uD83D[\uDC00-\uDED7\uDEE0-\uDEEC\uDEF0-\uDEFC\uDF00-\uDF73\uDF80-\uDFD8\uDFE0-\uDFEB]|\uD83E[\uDC00-\uDC0B\uDC10-\uDC47\uDC50-\uDC59\uDC60-\uDC87\uDC90-\uDCAD\uDCB0\uDCB1\uDD00-\uDD78\uDD7A-\uDDCB\uDDCD-\uDE53\uDE60-\uDE6D\uDE70-\uDE74\uDE78-\uDE7A\uDE80-\uDE86\uDE90-\uDEA8\uDEB0-\uDEB6\uDEC0-\uDEC2\uDED0-\uDED6\uDF00-\uDF92\uDF94-\uDFCA]/,Od={adlm:["𞥐","𞥑","𞥒","𞥓","𞥔","𞥕","𞥖","𞥗","𞥘","𞥙"],ahom:["𑜰","𑜱","𑜲","𑜳","𑜴","𑜵","𑜶","𑜷","𑜸","𑜹"],arab:["٠","١","٢","٣","٤","٥","٦","٧","٨","٩"],arabext:["۰","۱","۲","۳","۴","۵","۶","۷","۸","۹"],bali:["᭐","᭑","᭒","᭓","᭔","᭕","᭖","᭗","᭘","᭙"],beng:["০","১","২","৩","৪","৫","৬","৭","৮","৯"],bhks:["𑱐","𑱑","𑱒","𑱓","𑱔","𑱕","𑱖","𑱗","𑱘","𑱙"],brah:["𑁦","𑁧","𑁨","𑁩","𑁪","𑁫","𑁬","𑁭","𑁮","𑁯"],cakm:["𑄶","𑄷","𑄸","𑄹","𑄺","𑄻","𑄼","𑄽","𑄾","𑄿"],cham:["꩐","꩑","꩒","꩓","꩔","꩕","꩖","꩗","꩘","꩙"],deva:["०","१","२","३","४","५","६","७","८","९"],diak:["𑥐","𑥑","𑥒","𑥓","𑥔","𑥕","𑥖","𑥗","𑥘","𑥙"],fullwide:["０","１","２","３","４","５","６","７","８","９"],gong:["𑶠","𑶡","𑶢","𑶣","𑶤","𑶥","𑶦","𑶧","𑶨","𑶩"],gonm:["𑵐","𑵑","𑵒","𑵓","𑵔","𑵕","𑵖","𑵗","𑵘","𑵙"],gujr:["૦","૧","૨","૩","૪","૫","૬","૭","૮","૯"],guru:["੦","੧","੨","੩","੪","੫","੬","੭","੮","੯"],hanidec:["〇","一","二","三","四","五","六","七","八","九"],hmng:["𖭐","𖭑","𖭒","𖭓","𖭔","𖭕","𖭖","𖭗","𖭘","𖭙"],hmnp:["𞅀","𞅁","𞅂","𞅃","𞅄","𞅅","𞅆","𞅇","𞅈","𞅉"],java:["꧐","꧑","꧒","꧓","꧔","꧕","꧖","꧗","꧘","꧙"],kali:["꤀","꤁","꤂","꤃","꤄","꤅","꤆","꤇","꤈","꤉"],khmr:["០","១","២","៣","៤","៥","៦","៧","៨","៩"],knda:["೦","೧","೨","೩","೪","೫","೬","೭","೮","೯"],lana:["᪀","᪁","᪂","᪃","᪄","᪅","᪆","᪇","᪈","᪉"],lanatham:["᪐","᪑","᪒","᪓","᪔","᪕","᪖","᪗","᪘","᪙"],laoo:["໐","໑","໒","໓","໔","໕","໖","໗","໘","໙"],lepc:["᪐","᪑","᪒","᪓","᪔","᪕","᪖","᪗","᪘","᪙"],limb:["᥆","᥇","᥈","᥉","᥊","᥋","᥌","᥍","᥎","᥏"],mathbold:["𝟎","𝟏","𝟐","𝟑","𝟒","𝟓","𝟔","𝟕","𝟖","𝟗"],mathdbl:["𝟘","𝟙","𝟚","𝟛","𝟜","𝟝","𝟞","𝟟","𝟠","𝟡"],mathmono:["𝟶","𝟷","𝟸","𝟹","𝟺","𝟻","𝟼","𝟽","𝟾","𝟿"],mathsanb:["𝟬","𝟭","𝟮","𝟯","𝟰","𝟱","𝟲","𝟳","𝟴","𝟵"],mathsans:["𝟢","𝟣","𝟤","𝟥","𝟦","𝟧","𝟨","𝟩","𝟪","𝟫"],mlym:["൦","൧","൨","൩","൪","൫","൬","൭","൮","൯"],modi:["𑙐","𑙑","𑙒","𑙓","𑙔","𑙕","𑙖","𑙗","𑙘","𑙙"],mong:["᠐","᠑","᠒","᠓","᠔","᠕","᠖","᠗","᠘","᠙"],mroo:["𖩠","𖩡","𖩢","𖩣","𖩤","𖩥","𖩦","𖩧","𖩨","𖩩"],mtei:["꯰","꯱","꯲","꯳","꯴","꯵","꯶","꯷","꯸","꯹"],mymr:["၀","၁","၂","၃","၄","၅","၆","၇","၈","၉"],mymrshan:["႐","႑","႒","႓","႔","႕","႖","႗","႘","႙"],mymrtlng:["꧰","꧱","꧲","꧳","꧴","꧵","꧶","꧷","꧸","꧹"],newa:["𑑐","𑑑","𑑒","𑑓","𑑔","𑑕","𑑖","𑑗","𑑘","𑑙"],nkoo:["߀","߁","߂","߃","߄","߅","߆","߇","߈","߉"],olck:["᱐","᱑","᱒","᱓","᱔","᱕","᱖","᱗","᱘","᱙"],orya:["୦","୧","୨","୩","୪","୫","୬","୭","୮","୯"],osma:["𐒠","𐒡","𐒢","𐒣","𐒤","𐒥","𐒦","𐒧","𐒨","𐒩"],rohg:["𐴰","𐴱","𐴲","𐴳","𐴴","𐴵","𐴶","𐴷","𐴸","𐴹"],saur:["꣐","꣑","꣒","꣓","꣔","꣕","꣖","꣗","꣘","꣙"],segment:["🯰","🯱","🯲","🯳","🯴","🯵","🯶","🯷","🯸","🯹"],shrd:["𑇐","𑇑","𑇒","𑇓","𑇔","𑇕","𑇖","𑇗","𑇘","𑇙"],sind:["𑋰","𑋱","𑋲","𑋳","𑋴","𑋵","𑋶","𑋷","𑋸","𑋹"],sinh:["෦","෧","෨","෩","෪","෫","෬","෭","෮","෯"],sora:["𑃰","𑃱","𑃲","𑃳","𑃴","𑃵","𑃶","𑃷","𑃸","𑃹"],sund:["᮰","᮱","᮲","᮳","᮴","᮵","᮶","᮷","᮸","᮹"],takr:["𑛀","𑛁","𑛂","𑛃","𑛄","𑛅","𑛆","𑛇","𑛈","𑛉"],talu:["᧐","᧑","᧒","᧓","᧔","᧕","᧖","᧗","᧘","᧙"],tamldec:["௦","௧","௨","௩","௪","௫","௬","௭","௮","௯"],telu:["౦","౧","౨","౩","౪","౫","౬","౭","౮","౯"],thai:["๐","๑","๒","๓","๔","๕","๖","๗","๘","๙"],tibt:["༠","༡","༢","༣","༤","༥","༦","༧","༨","༩"],tirh:["𑓐","𑓑","𑓒","𑓓","𑓔","𑓕","𑓖","𑓗","𑓘","𑓙"],vaii:["ᘠ","ᘡ","ᘢ","ᘣ","ᘤ","ᘥ","ᘦ","ᘧ","ᘨ","ᘩ"],wara:["𑣠","𑣡","𑣢","𑣣","𑣤","𑣥","𑣦","𑣧","𑣨","𑣩"],wcho:["𞋰","𞋱","𞋲","𞋳","𞋴","𞋵","𞋶","𞋷","𞋸","𞋹"]},Pd=new RegExp("^".concat(zs.source)),Ld=new RegExp("".concat(zs.source,"$")),ka=/[#0](?:[\.,][#0]+)*/g;function Ks(e,n,t,r){var a,i=e.sign,s=e.exponent,o=e.magnitude,l=r.notation,u=r.style,d=r.numberingSystem,f=n.numbers.nu[0],m=null;l==="compact"&&o&&(m=Bd(e,t,n,u,r.compactDisplay,r.currencyDisplay,d));var p;if(u==="currency"&&r.currencyDisplay!=="name"){var w=n.currencies[r.currency];if(w)switch(r.currencyDisplay){case"code":p=r.currency;break;case"symbol":p=w.symbol;break;default:p=w.narrow;break}else p=r.currency}var h;if(m)h=m;else if(u==="decimal"||u==="unit"||u==="currency"&&r.currencyDisplay==="name"){var _=n.numbers.decimal[d]||n.numbers.decimal[f];h=St(_.standard,i)}else if(u==="currency"){var y=n.numbers.currency[d]||n.numbers.currency[f];h=St(y[r.currencySign],i)}else{var x=n.numbers.percent[d]||n.numbers.percent[f];h=St(x,i)}var v=ka.exec(h)[0];if(h=h.replace(ka,"{0}").replace(/'(.)'/g,"$1"),u==="currency"&&r.currencyDisplay!=="name"){var y=n.numbers.currency[d]||n.numbers.currency[f],b=y.currencySpacing.afterInsertBetween;b&&!Ld.test(p)&&(h=h.replace("¤{0}","¤".concat(b,"{0}")));var S=y.currencySpacing.beforeInsertBetween;S&&!Pd.test(p)&&(h=h.replace("{0}¤","{0}".concat(S,"¤")))}for(var T=h.split(/({c:[^}]+}|\{0\}|[¤%\-\+])/g),k=[],I=n.numbers.symbols[d]||n.numbers.symbols[f],N=0,j=T;N<j.length;N++){var D=j[N];if(D)switch(D){case"{0}":{k.push.apply(k,Rd(I,e,l,s,d,!m&&((a=r.useGrouping)!==null&&a!==void 0?a:!0),v,u,r.roundingIncrement,Qr(r.roundingMode,i===-1)));break}case"-":k.push({type:"minusSign",value:I.minusSign});break;case"+":k.push({type:"plusSign",value:I.plusSign});break;case"%":k.push({type:"percentSign",value:I.percentSign});break;case"¤":k.push({type:"currency",value:p});break;default:/^\{c:/.test(D)?k.push({type:"compact",value:D.substring(3,D.length-1)}):k.push({type:"literal",value:D});break}}switch(u){case"currency":if(r.currencyDisplay==="name"){var F=(n.numbers.currency[d]||n.numbers.currency[f]).unitPattern,O=void 0,G=n.currencies[r.currency];G?O=xn(t,e.roundedNumber.times($.pow(10,s)).toNumber(),G.displayName):O=r.currency;for(var B=F.split(/(\{[01]\})/g),A=[],V=0,xe=B;V<xe.length;V++){var D=xe[V];switch(D){case"{0}":A.push.apply(A,k);break;case"{1}":A.push({type:"currency",value:O});break;default:D&&A.push({type:"literal",value:D});break}}return A}else return k;case"unit":{var ee=r.unit,H=r.unitDisplay,ge=n.units.simple[ee],F=void 0;if(ge)F=xn(t,e.roundedNumber.times($.pow(10,s)).toNumber(),n.units.simple[ee][H]);else{var je=ee.split("-per-"),Fe=je[0],te=je[1];ge=n.units.simple[Fe];var re=xn(t,e.roundedNumber.times($.pow(10,s)).toNumber(),n.units.simple[Fe][H]),ue=n.units.simple[te].perUnit[H];if(ue)F=ue.replace("{0}",re);else{var pe=n.units.compound.per[H],X=xn(t,1,n.units.simple[te][H]);F=F=pe.replace("{0}",re).replace("{1}",X.replace("{0}",""))}}for(var A=[],ve=0,ne=F.split(/(\s*\{0\}\s*)/);ve<ne.length;ve++){var D=ne[ve],ce=/^(\s*)\{0\}(\s*)$/.exec(D);ce?(ce[1]&&A.push({type:"literal",value:ce[1]}),A.push.apply(A,k),ce[2]&&A.push({type:"literal",value:ce[2]})):D&&A.push({type:"unit",value:D})}return A}default:return k}}function Rd(e,n,t,r,a,i,s,o,l,u){var d=[],f=n.formattedString,m=n.roundedNumber;if(m.isNaN())return[{type:"nan",value:f}];if(!m.isFinite())return[{type:"infinity",value:f}];var p=Od[a];p&&(f=f.replace(/\d/g,function(F){return p[+F]||F}));var w=f.indexOf("."),h,_;w>0?(h=f.slice(0,w),_=f.slice(w+1)):h=f;var y=!1;if(i==="always"?y=!0:i==="min2"?y=m.greaterThanOrEqualTo(1e4):(i==="auto"||i)&&(y=t!=="compact"||m.greaterThanOrEqualTo(1e4)),y){var x=o==="currency"&&e.currencyGroup!=null?e.currencyGroup:e.group,v=[],b=s.split(".")[0],S=b.split(","),T=3,k=3;S.length>1&&(T=S[S.length-1].length),S.length>2&&(k=S[S.length-2].length);var I=h.length-T;if(I>0){for(v.push(h.slice(I,I+T)),I-=k;I>0;I-=k)v.push(h.slice(I,I+k));v.push(h.slice(0,I+k))}else v.push(h);for(;v.length>0;){var N=v.pop();d.push({type:"integer",value:N}),v.length>0&&d.push({type:"group",value:x})}}else d.push({type:"integer",value:h});if(_!==void 0){var j=o==="currency"&&e.currencyDecimal!=null?e.currencyDecimal:e.decimal;d.push({type:"decimal",value:j},{type:"fraction",value:_})}if((t==="scientific"||t==="engineering")&&m.isFinite()){d.push({type:"exponentSeparator",value:e.exponential}),r<0&&(d.push({type:"exponentMinusSign",value:e.minusSign}),r=-r);var D=Lt(new $(r),0,0,l,u);d.push({type:"exponentInteger",value:D.formattedString})}return d}function St(e,n){e.indexOf(";")<0&&(e="".concat(e,";-").concat(e));var t=e.split(";"),r=t[0],a=t[1];switch(n){case 0:return r;case-1:return a;default:return a.indexOf("-")>=0?a.replace(/-/g,"+"):"+".concat(r)}}function Bd(e,n,t,r,a,i,s){var o,l=e.roundedNumber,u=e.sign,d=e.magnitude,f=String(Math.pow(10,d)),m=t.numbers.nu[0],p;if(r==="currency"&&i!=="name"){var w=t.numbers.currency,h=w[s]||w[m],_=(o=h.short)===null||o===void 0?void 0:o[f];if(!_)return null;p=xn(n,l.toNumber(),_)}else{var w=t.numbers.decimal,y=w[s]||w[m],x=y[a][f];if(!x)return null;p=xn(n,l.toNumber(),x)}return p==="0"?null:(p=St(p,u).replace(/([^\s;\-\+\d¤]+)/g,"{c:$1}").replace(/0+/,"0"),p)}function xn(e,n,t){return t[e.select(n)]||t.other}function Ws(e,n){var t=e.dataLocaleData.numbers.symbols[e.numberingSystem],r=t.approximatelySign;return n.push({type:"approximatelySign",value:r}),n}function Vn(e,n){var t,r=n,a=0,i=e.pl,s=e.dataLocaleData,o=e.numberingSystem,l=s.numbers.symbols[o]||s.numbers.symbols[s.numbers.nu[0]],u=0,d;if(r.isNaN())d=l.nan;else if(!r.isFinite())d=l.infinity;else{r.isZero()||(Q(r.isFinite(),"Input must be a mathematical value"),e.style=="percent"&&(r=r.times(100)),t=Us(e,r),u=t[0],a=t[1],r=r.times($.pow(10,-u)));var f=Jr(e,r);d=f.formattedString,r=f.roundedNumber}var m,p=e.signDisplay;switch(p){case"never":m=0;break;case"auto":r.isPositive()||r.isNaN()?m=0:m=-1;break;case"always":r.isPositive()||r.isNaN()?m=1:m=-1;break;case"exceptZero":r.isZero()?m=0:r.isNegative()?m=-1:m=1;break;default:Q(p==="negative",'signDisplay must be "negative"'),r.isNegative()&&!r.isZero()?m=-1:m=0;break}return Ks({roundedNumber:r,formattedString:d,exponent:u,magnitude:a,sign:m},e.dataLocaleData,i,e)}function br(e,n){var t=Vn(e,n);return t.map(function(r){return r.value}).join("")}function Xr(e,n,t,r){var a=r.getInternalSlots;Q(!n.isNaN()&&!t.isNaN(),"Input must be a number",RangeError);var i=a(e),s=Vn(i,n),o=Vn(i,t);if(br(i,n)===br(i,t)){var l=Ws(i,s);return l.forEach(function(f){f.source="shared"}),l}var u=[];s.forEach(function(f){f.source="startRange",u.push(f)});var d=i.dataLocaleData.numbers.symbols[i.numberingSystem].rangeSign;return u.push({type:"literal",value:d,source:"shared"}),o.forEach(function(f){f.source="endRange",u.push(f)}),qs(e,u,{getInternalSlots:a})}function $d(e,n,t,r){var a=r.getInternalSlots,i=Xr(e,n,t,{getInternalSlots:a});return i.map(function(s){return s.value}).join("")}function qd(e,n,t,r){var a=r.getInternalSlots,i=Xr(e,n,t,{getInternalSlots:a});return i.map(function(s,o){return{type:s.type,value:s.value,source:s.source,result:o.toString()}})}function Gd(e,n,t){for(var r=Vn(t.getInternalSlots(e),n),a=Es(0),i=0,s=r;i<s.length;i++){var o=s[i];a.push({type:o.type,value:o.value})}return a}function Ud(e){return Intl.getCanonicalLocales(e)}var rr={supplemental:{languageMatching:{"written-new":[{paradigmLocales:{_locales:"en en_GB es es_419 pt_BR pt_PT"}},{$enUS:{_value:"AS+CA+GU+MH+MP+PH+PR+UM+US+VI"}},{$cnsar:{_value:"HK+MO"}},{$americas:{_value:"019"}},{$maghreb:{_value:"MA+DZ+TN+LY+MR+EH"}},{no:{_desired:"nb",_distance:"1"}},{bs:{_desired:"hr",_distance:"4"}},{bs:{_desired:"sh",_distance:"4"}},{hr:{_desired:"sh",_distance:"4"}},{sr:{_desired:"sh",_distance:"4"}},{aa:{_desired:"ssy",_distance:"4"}},{de:{_desired:"gsw",_distance:"4",_oneway:"true"}},{de:{_desired:"lb",_distance:"4",_oneway:"true"}},{no:{_desired:"da",_distance:"8"}},{nb:{_desired:"da",_distance:"8"}},{ru:{_desired:"ab",_distance:"30",_oneway:"true"}},{en:{_desired:"ach",_distance:"30",_oneway:"true"}},{nl:{_desired:"af",_distance:"20",_oneway:"true"}},{en:{_desired:"ak",_distance:"30",_oneway:"true"}},{en:{_desired:"am",_distance:"30",_oneway:"true"}},{es:{_desired:"ay",_distance:"20",_oneway:"true"}},{ru:{_desired:"az",_distance:"30",_oneway:"true"}},{ur:{_desired:"bal",_distance:"20",_oneway:"true"}},{ru:{_desired:"be",_distance:"20",_oneway:"true"}},{en:{_desired:"bem",_distance:"30",_oneway:"true"}},{hi:{_desired:"bh",_distance:"30",_oneway:"true"}},{en:{_desired:"bn",_distance:"30",_oneway:"true"}},{zh:{_desired:"bo",_distance:"20",_oneway:"true"}},{fr:{_desired:"br",_distance:"20",_oneway:"true"}},{es:{_desired:"ca",_distance:"20",_oneway:"true"}},{fil:{_desired:"ceb",_distance:"30",_oneway:"true"}},{en:{_desired:"chr",_distance:"20",_oneway:"true"}},{ar:{_desired:"ckb",_distance:"30",_oneway:"true"}},{fr:{_desired:"co",_distance:"20",_oneway:"true"}},{fr:{_desired:"crs",_distance:"20",_oneway:"true"}},{sk:{_desired:"cs",_distance:"20"}},{en:{_desired:"cy",_distance:"20",_oneway:"true"}},{en:{_desired:"ee",_distance:"30",_oneway:"true"}},{en:{_desired:"eo",_distance:"30",_oneway:"true"}},{es:{_desired:"eu",_distance:"20",_oneway:"true"}},{da:{_desired:"fo",_distance:"20",_oneway:"true"}},{nl:{_desired:"fy",_distance:"20",_oneway:"true"}},{en:{_desired:"ga",_distance:"20",_oneway:"true"}},{en:{_desired:"gaa",_distance:"30",_oneway:"true"}},{en:{_desired:"gd",_distance:"20",_oneway:"true"}},{es:{_desired:"gl",_distance:"20",_oneway:"true"}},{es:{_desired:"gn",_distance:"20",_oneway:"true"}},{hi:{_desired:"gu",_distance:"30",_oneway:"true"}},{en:{_desired:"ha",_distance:"30",_oneway:"true"}},{en:{_desired:"haw",_distance:"20",_oneway:"true"}},{fr:{_desired:"ht",_distance:"20",_oneway:"true"}},{ru:{_desired:"hy",_distance:"30",_oneway:"true"}},{en:{_desired:"ia",_distance:"30",_oneway:"true"}},{en:{_desired:"ig",_distance:"30",_oneway:"true"}},{en:{_desired:"is",_distance:"20",_oneway:"true"}},{id:{_desired:"jv",_distance:"20",_oneway:"true"}},{en:{_desired:"ka",_distance:"30",_oneway:"true"}},{fr:{_desired:"kg",_distance:"30",_oneway:"true"}},{ru:{_desired:"kk",_distance:"30",_oneway:"true"}},{en:{_desired:"km",_distance:"30",_oneway:"true"}},{en:{_desired:"kn",_distance:"30",_oneway:"true"}},{en:{_desired:"kri",_distance:"30",_oneway:"true"}},{tr:{_desired:"ku",_distance:"30",_oneway:"true"}},{ru:{_desired:"ky",_distance:"30",_oneway:"true"}},{it:{_desired:"la",_distance:"20",_oneway:"true"}},{en:{_desired:"lg",_distance:"30",_oneway:"true"}},{fr:{_desired:"ln",_distance:"30",_oneway:"true"}},{en:{_desired:"lo",_distance:"30",_oneway:"true"}},{en:{_desired:"loz",_distance:"30",_oneway:"true"}},{fr:{_desired:"lua",_distance:"30",_oneway:"true"}},{hi:{_desired:"mai",_distance:"20",_oneway:"true"}},{en:{_desired:"mfe",_distance:"30",_oneway:"true"}},{fr:{_desired:"mg",_distance:"30",_oneway:"true"}},{en:{_desired:"mi",_distance:"20",_oneway:"true"}},{en:{_desired:"ml",_distance:"30",_oneway:"true"}},{ru:{_desired:"mn",_distance:"30",_oneway:"true"}},{hi:{_desired:"mr",_distance:"30",_oneway:"true"}},{id:{_desired:"ms",_distance:"30",_oneway:"true"}},{en:{_desired:"mt",_distance:"30",_oneway:"true"}},{en:{_desired:"my",_distance:"30",_oneway:"true"}},{en:{_desired:"ne",_distance:"30",_oneway:"true"}},{nb:{_desired:"nn",_distance:"20"}},{no:{_desired:"nn",_distance:"20"}},{en:{_desired:"nso",_distance:"30",_oneway:"true"}},{en:{_desired:"ny",_distance:"30",_oneway:"true"}},{en:{_desired:"nyn",_distance:"30",_oneway:"true"}},{fr:{_desired:"oc",_distance:"20",_oneway:"true"}},{en:{_desired:"om",_distance:"30",_oneway:"true"}},{en:{_desired:"or",_distance:"30",_oneway:"true"}},{en:{_desired:"pa",_distance:"30",_oneway:"true"}},{en:{_desired:"pcm",_distance:"20",_oneway:"true"}},{en:{_desired:"ps",_distance:"30",_oneway:"true"}},{es:{_desired:"qu",_distance:"30",_oneway:"true"}},{de:{_desired:"rm",_distance:"20",_oneway:"true"}},{en:{_desired:"rn",_distance:"30",_oneway:"true"}},{fr:{_desired:"rw",_distance:"30",_oneway:"true"}},{hi:{_desired:"sa",_distance:"30",_oneway:"true"}},{en:{_desired:"sd",_distance:"30",_oneway:"true"}},{en:{_desired:"si",_distance:"30",_oneway:"true"}},{en:{_desired:"sn",_distance:"30",_oneway:"true"}},{en:{_desired:"so",_distance:"30",_oneway:"true"}},{en:{_desired:"sq",_distance:"30",_oneway:"true"}},{en:{_desired:"st",_distance:"30",_oneway:"true"}},{id:{_desired:"su",_distance:"20",_oneway:"true"}},{en:{_desired:"sw",_distance:"30",_oneway:"true"}},{en:{_desired:"ta",_distance:"30",_oneway:"true"}},{en:{_desired:"te",_distance:"30",_oneway:"true"}},{ru:{_desired:"tg",_distance:"30",_oneway:"true"}},{en:{_desired:"ti",_distance:"30",_oneway:"true"}},{ru:{_desired:"tk",_distance:"30",_oneway:"true"}},{en:{_desired:"tlh",_distance:"30",_oneway:"true"}},{en:{_desired:"tn",_distance:"30",_oneway:"true"}},{en:{_desired:"to",_distance:"30",_oneway:"true"}},{ru:{_desired:"tt",_distance:"30",_oneway:"true"}},{en:{_desired:"tum",_distance:"30",_oneway:"true"}},{zh:{_desired:"ug",_distance:"20",_oneway:"true"}},{ru:{_desired:"uk",_distance:"20",_oneway:"true"}},{en:{_desired:"ur",_distance:"30",_oneway:"true"}},{ru:{_desired:"uz",_distance:"30",_oneway:"true"}},{fr:{_desired:"wo",_distance:"30",_oneway:"true"}},{en:{_desired:"xh",_distance:"30",_oneway:"true"}},{en:{_desired:"yi",_distance:"30",_oneway:"true"}},{en:{_desired:"yo",_distance:"30",_oneway:"true"}},{zh:{_desired:"za",_distance:"20",_oneway:"true"}},{en:{_desired:"zu",_distance:"30",_oneway:"true"}},{ar:{_desired:"aao",_distance:"10",_oneway:"true"}},{ar:{_desired:"abh",_distance:"10",_oneway:"true"}},{ar:{_desired:"abv",_distance:"10",_oneway:"true"}},{ar:{_desired:"acm",_distance:"10",_oneway:"true"}},{ar:{_desired:"acq",_distance:"10",_oneway:"true"}},{ar:{_desired:"acw",_distance:"10",_oneway:"true"}},{ar:{_desired:"acx",_distance:"10",_oneway:"true"}},{ar:{_desired:"acy",_distance:"10",_oneway:"true"}},{ar:{_desired:"adf",_distance:"10",_oneway:"true"}},{ar:{_desired:"aeb",_distance:"10",_oneway:"true"}},{ar:{_desired:"aec",_distance:"10",_oneway:"true"}},{ar:{_desired:"afb",_distance:"10",_oneway:"true"}},{ar:{_desired:"ajp",_distance:"10",_oneway:"true"}},{ar:{_desired:"apc",_distance:"10",_oneway:"true"}},{ar:{_desired:"apd",_distance:"10",_oneway:"true"}},{ar:{_desired:"arq",_distance:"10",_oneway:"true"}},{ar:{_desired:"ars",_distance:"10",_oneway:"true"}},{ar:{_desired:"ary",_distance:"10",_oneway:"true"}},{ar:{_desired:"arz",_distance:"10",_oneway:"true"}},{ar:{_desired:"auz",_distance:"10",_oneway:"true"}},{ar:{_desired:"avl",_distance:"10",_oneway:"true"}},{ar:{_desired:"ayh",_distance:"10",_oneway:"true"}},{ar:{_desired:"ayl",_distance:"10",_oneway:"true"}},{ar:{_desired:"ayn",_distance:"10",_oneway:"true"}},{ar:{_desired:"ayp",_distance:"10",_oneway:"true"}},{ar:{_desired:"bbz",_distance:"10",_oneway:"true"}},{ar:{_desired:"pga",_distance:"10",_oneway:"true"}},{ar:{_desired:"shu",_distance:"10",_oneway:"true"}},{ar:{_desired:"ssh",_distance:"10",_oneway:"true"}},{az:{_desired:"azb",_distance:"10",_oneway:"true"}},{et:{_desired:"vro",_distance:"10",_oneway:"true"}},{ff:{_desired:"ffm",_distance:"10",_oneway:"true"}},{ff:{_desired:"fub",_distance:"10",_oneway:"true"}},{ff:{_desired:"fue",_distance:"10",_oneway:"true"}},{ff:{_desired:"fuf",_distance:"10",_oneway:"true"}},{ff:{_desired:"fuh",_distance:"10",_oneway:"true"}},{ff:{_desired:"fui",_distance:"10",_oneway:"true"}},{ff:{_desired:"fuq",_distance:"10",_oneway:"true"}},{ff:{_desired:"fuv",_distance:"10",_oneway:"true"}},{gn:{_desired:"gnw",_distance:"10",_oneway:"true"}},{gn:{_desired:"gui",_distance:"10",_oneway:"true"}},{gn:{_desired:"gun",_distance:"10",_oneway:"true"}},{gn:{_desired:"nhd",_distance:"10",_oneway:"true"}},{iu:{_desired:"ikt",_distance:"10",_oneway:"true"}},{kln:{_desired:"enb",_distance:"10",_oneway:"true"}},{kln:{_desired:"eyo",_distance:"10",_oneway:"true"}},{kln:{_desired:"niq",_distance:"10",_oneway:"true"}},{kln:{_desired:"oki",_distance:"10",_oneway:"true"}},{kln:{_desired:"pko",_distance:"10",_oneway:"true"}},{kln:{_desired:"sgc",_distance:"10",_oneway:"true"}},{kln:{_desired:"tec",_distance:"10",_oneway:"true"}},{kln:{_desired:"tuy",_distance:"10",_oneway:"true"}},{kok:{_desired:"gom",_distance:"10",_oneway:"true"}},{kpe:{_desired:"gkp",_distance:"10",_oneway:"true"}},{luy:{_desired:"ida",_distance:"10",_oneway:"true"}},{luy:{_desired:"lkb",_distance:"10",_oneway:"true"}},{luy:{_desired:"lko",_distance:"10",_oneway:"true"}},{luy:{_desired:"lks",_distance:"10",_oneway:"true"}},{luy:{_desired:"lri",_distance:"10",_oneway:"true"}},{luy:{_desired:"lrm",_distance:"10",_oneway:"true"}},{luy:{_desired:"lsm",_distance:"10",_oneway:"true"}},{luy:{_desired:"lto",_distance:"10",_oneway:"true"}},{luy:{_desired:"lts",_distance:"10",_oneway:"true"}},{luy:{_desired:"lwg",_distance:"10",_oneway:"true"}},{luy:{_desired:"nle",_distance:"10",_oneway:"true"}},{luy:{_desired:"nyd",_distance:"10",_oneway:"true"}},{luy:{_desired:"rag",_distance:"10",_oneway:"true"}},{lv:{_desired:"ltg",_distance:"10",_oneway:"true"}},{mg:{_desired:"bhr",_distance:"10",_oneway:"true"}},{mg:{_desired:"bjq",_distance:"10",_oneway:"true"}},{mg:{_desired:"bmm",_distance:"10",_oneway:"true"}},{mg:{_desired:"bzc",_distance:"10",_oneway:"true"}},{mg:{_desired:"msh",_distance:"10",_oneway:"true"}},{mg:{_desired:"skg",_distance:"10",_oneway:"true"}},{mg:{_desired:"tdx",_distance:"10",_oneway:"true"}},{mg:{_desired:"tkg",_distance:"10",_oneway:"true"}},{mg:{_desired:"txy",_distance:"10",_oneway:"true"}},{mg:{_desired:"xmv",_distance:"10",_oneway:"true"}},{mg:{_desired:"xmw",_distance:"10",_oneway:"true"}},{mn:{_desired:"mvf",_distance:"10",_oneway:"true"}},{ms:{_desired:"bjn",_distance:"10",_oneway:"true"}},{ms:{_desired:"btj",_distance:"10",_oneway:"true"}},{ms:{_desired:"bve",_distance:"10",_oneway:"true"}},{ms:{_desired:"bvu",_distance:"10",_oneway:"true"}},{ms:{_desired:"coa",_distance:"10",_oneway:"true"}},{ms:{_desired:"dup",_distance:"10",_oneway:"true"}},{ms:{_desired:"hji",_distance:"10",_oneway:"true"}},{ms:{_desired:"id",_distance:"10",_oneway:"true"}},{ms:{_desired:"jak",_distance:"10",_oneway:"true"}},{ms:{_desired:"jax",_distance:"10",_oneway:"true"}},{ms:{_desired:"kvb",_distance:"10",_oneway:"true"}},{ms:{_desired:"kvr",_distance:"10",_oneway:"true"}},{ms:{_desired:"kxd",_distance:"10",_oneway:"true"}},{ms:{_desired:"lce",_distance:"10",_oneway:"true"}},{ms:{_desired:"lcf",_distance:"10",_oneway:"true"}},{ms:{_desired:"liw",_distance:"10",_oneway:"true"}},{ms:{_desired:"max",_distance:"10",_oneway:"true"}},{ms:{_desired:"meo",_distance:"10",_oneway:"true"}},{ms:{_desired:"mfa",_distance:"10",_oneway:"true"}},{ms:{_desired:"mfb",_distance:"10",_oneway:"true"}},{ms:{_desired:"min",_distance:"10",_oneway:"true"}},{ms:{_desired:"mqg",_distance:"10",_oneway:"true"}},{ms:{_desired:"msi",_distance:"10",_oneway:"true"}},{ms:{_desired:"mui",_distance:"10",_oneway:"true"}},{ms:{_desired:"orn",_distance:"10",_oneway:"true"}},{ms:{_desired:"ors",_distance:"10",_oneway:"true"}},{ms:{_desired:"pel",_distance:"10",_oneway:"true"}},{ms:{_desired:"pse",_distance:"10",_oneway:"true"}},{ms:{_desired:"tmw",_distance:"10",_oneway:"true"}},{ms:{_desired:"urk",_distance:"10",_oneway:"true"}},{ms:{_desired:"vkk",_distance:"10",_oneway:"true"}},{ms:{_desired:"vkt",_distance:"10",_oneway:"true"}},{ms:{_desired:"xmm",_distance:"10",_oneway:"true"}},{ms:{_desired:"zlm",_distance:"10",_oneway:"true"}},{ms:{_desired:"zmi",_distance:"10",_oneway:"true"}},{ne:{_desired:"dty",_distance:"10",_oneway:"true"}},{om:{_desired:"gax",_distance:"10",_oneway:"true"}},{om:{_desired:"hae",_distance:"10",_oneway:"true"}},{om:{_desired:"orc",_distance:"10",_oneway:"true"}},{or:{_desired:"spv",_distance:"10",_oneway:"true"}},{ps:{_desired:"pbt",_distance:"10",_oneway:"true"}},{ps:{_desired:"pst",_distance:"10",_oneway:"true"}},{qu:{_desired:"qub",_distance:"10",_oneway:"true"}},{qu:{_desired:"qud",_distance:"10",_oneway:"true"}},{qu:{_desired:"quf",_distance:"10",_oneway:"true"}},{qu:{_desired:"qug",_distance:"10",_oneway:"true"}},{qu:{_desired:"quh",_distance:"10",_oneway:"true"}},{qu:{_desired:"quk",_distance:"10",_oneway:"true"}},{qu:{_desired:"qul",_distance:"10",_oneway:"true"}},{qu:{_desired:"qup",_distance:"10",_oneway:"true"}},{qu:{_desired:"qur",_distance:"10",_oneway:"true"}},{qu:{_desired:"qus",_distance:"10",_oneway:"true"}},{qu:{_desired:"quw",_distance:"10",_oneway:"true"}},{qu:{_desired:"qux",_distance:"10",_oneway:"true"}},{qu:{_desired:"quy",_distance:"10",_oneway:"true"}},{qu:{_desired:"qva",_distance:"10",_oneway:"true"}},{qu:{_desired:"qvc",_distance:"10",_oneway:"true"}},{qu:{_desired:"qve",_distance:"10",_oneway:"true"}},{qu:{_desired:"qvh",_distance:"10",_oneway:"true"}},{qu:{_desired:"qvi",_distance:"10",_oneway:"true"}},{qu:{_desired:"qvj",_distance:"10",_oneway:"true"}},{qu:{_desired:"qvl",_distance:"10",_oneway:"true"}},{qu:{_desired:"qvm",_distance:"10",_oneway:"true"}},{qu:{_desired:"qvn",_distance:"10",_oneway:"true"}},{qu:{_desired:"qvo",_distance:"10",_oneway:"true"}},{qu:{_desired:"qvp",_distance:"10",_oneway:"true"}},{qu:{_desired:"qvs",_distance:"10",_oneway:"true"}},{qu:{_desired:"qvw",_distance:"10",_oneway:"true"}},{qu:{_desired:"qvz",_distance:"10",_oneway:"true"}},{qu:{_desired:"qwa",_distance:"10",_oneway:"true"}},{qu:{_desired:"qwc",_distance:"10",_oneway:"true"}},{qu:{_desired:"qwh",_distance:"10",_oneway:"true"}},{qu:{_desired:"qws",_distance:"10",_oneway:"true"}},{qu:{_desired:"qxa",_distance:"10",_oneway:"true"}},{qu:{_desired:"qxc",_distance:"10",_oneway:"true"}},{qu:{_desired:"qxh",_distance:"10",_oneway:"true"}},{qu:{_desired:"qxl",_distance:"10",_oneway:"true"}},{qu:{_desired:"qxn",_distance:"10",_oneway:"true"}},{qu:{_desired:"qxo",_distance:"10",_oneway:"true"}},{qu:{_desired:"qxp",_distance:"10",_oneway:"true"}},{qu:{_desired:"qxr",_distance:"10",_oneway:"true"}},{qu:{_desired:"qxt",_distance:"10",_oneway:"true"}},{qu:{_desired:"qxu",_distance:"10",_oneway:"true"}},{qu:{_desired:"qxw",_distance:"10",_oneway:"true"}},{sc:{_desired:"sdc",_distance:"10",_oneway:"true"}},{sc:{_desired:"sdn",_distance:"10",_oneway:"true"}},{sc:{_desired:"sro",_distance:"10",_oneway:"true"}},{sq:{_desired:"aae",_distance:"10",_oneway:"true"}},{sq:{_desired:"aat",_distance:"10",_oneway:"true"}},{sq:{_desired:"aln",_distance:"10",_oneway:"true"}},{syr:{_desired:"aii",_distance:"10",_oneway:"true"}},{uz:{_desired:"uzs",_distance:"10",_oneway:"true"}},{yi:{_desired:"yih",_distance:"10",_oneway:"true"}},{zh:{_desired:"cdo",_distance:"10",_oneway:"true"}},{zh:{_desired:"cjy",_distance:"10",_oneway:"true"}},{zh:{_desired:"cpx",_distance:"10",_oneway:"true"}},{zh:{_desired:"czh",_distance:"10",_oneway:"true"}},{zh:{_desired:"czo",_distance:"10",_oneway:"true"}},{zh:{_desired:"gan",_distance:"10",_oneway:"true"}},{zh:{_desired:"hak",_distance:"10",_oneway:"true"}},{zh:{_desired:"hsn",_distance:"10",_oneway:"true"}},{zh:{_desired:"lzh",_distance:"10",_oneway:"true"}},{zh:{_desired:"mnp",_distance:"10",_oneway:"true"}},{zh:{_desired:"nan",_distance:"10",_oneway:"true"}},{zh:{_desired:"wuu",_distance:"10",_oneway:"true"}},{zh:{_desired:"yue",_distance:"10",_oneway:"true"}},{"*":{_desired:"*",_distance:"80"}},{"en-Latn":{_desired:"am-Ethi",_distance:"10",_oneway:"true"}},{"ru-Cyrl":{_desired:"az-Latn",_distance:"10",_oneway:"true"}},{"en-Latn":{_desired:"bn-Beng",_distance:"10",_oneway:"true"}},{"zh-Hans":{_desired:"bo-Tibt",_distance:"10",_oneway:"true"}},{"ru-Cyrl":{_desired:"hy-Armn",_distance:"10",_oneway:"true"}},{"en-Latn":{_desired:"ka-Geor",_distance:"10",_oneway:"true"}},{"en-Latn":{_desired:"km-Khmr",_distance:"10",_oneway:"true"}},{"en-Latn":{_desired:"kn-Knda",_distance:"10",_oneway:"true"}},{"en-Latn":{_desired:"lo-Laoo",_distance:"10",_oneway:"true"}},{"en-Latn":{_desired:"ml-Mlym",_distance:"10",_oneway:"true"}},{"en-Latn":{_desired:"my-Mymr",_distance:"10",_oneway:"true"}},{"en-Latn":{_desired:"ne-Deva",_distance:"10",_oneway:"true"}},{"en-Latn":{_desired:"or-Orya",_distance:"10",_oneway:"true"}},{"en-Latn":{_desired:"pa-Guru",_distance:"10",_oneway:"true"}},{"en-Latn":{_desired:"ps-Arab",_distance:"10",_oneway:"true"}},{"en-Latn":{_desired:"sd-Arab",_distance:"10",_oneway:"true"}},{"en-Latn":{_desired:"si-Sinh",_distance:"10",_oneway:"true"}},{"en-Latn":{_desired:"ta-Taml",_distance:"10",_oneway:"true"}},{"en-Latn":{_desired:"te-Telu",_distance:"10",_oneway:"true"}},{"en-Latn":{_desired:"ti-Ethi",_distance:"10",_oneway:"true"}},{"ru-Cyrl":{_desired:"tk-Latn",_distance:"10",_oneway:"true"}},{"en-Latn":{_desired:"ur-Arab",_distance:"10",_oneway:"true"}},{"ru-Cyrl":{_desired:"uz-Latn",_distance:"10",_oneway:"true"}},{"en-Latn":{_desired:"yi-Hebr",_distance:"10",_oneway:"true"}},{"sr-Cyrl":{_desired:"sr-Latn",_distance:"5"}},{"zh-Hans":{_desired:"za-Latn",_distance:"10",_oneway:"true"}},{"zh-Hans":{_desired:"zh-Hani",_distance:"20",_oneway:"true"}},{"zh-Hant":{_desired:"zh-Hani",_distance:"20",_oneway:"true"}},{"ar-Arab":{_desired:"ar-Latn",_distance:"20",_oneway:"true"}},{"bn-Beng":{_desired:"bn-Latn",_distance:"20",_oneway:"true"}},{"gu-Gujr":{_desired:"gu-Latn",_distance:"20",_oneway:"true"}},{"hi-Deva":{_desired:"hi-Latn",_distance:"20",_oneway:"true"}},{"kn-Knda":{_desired:"kn-Latn",_distance:"20",_oneway:"true"}},{"ml-Mlym":{_desired:"ml-Latn",_distance:"20",_oneway:"true"}},{"mr-Deva":{_desired:"mr-Latn",_distance:"20",_oneway:"true"}},{"ta-Taml":{_desired:"ta-Latn",_distance:"20",_oneway:"true"}},{"te-Telu":{_desired:"te-Latn",_distance:"20",_oneway:"true"}},{"zh-Hans":{_desired:"zh-Latn",_distance:"20",_oneway:"true"}},{"ja-Jpan":{_desired:"ja-Latn",_distance:"5",_oneway:"true"}},{"ja-Jpan":{_desired:"ja-Hani",_distance:"5",_oneway:"true"}},{"ja-Jpan":{_desired:"ja-Hira",_distance:"5",_oneway:"true"}},{"ja-Jpan":{_desired:"ja-Kana",_distance:"5",_oneway:"true"}},{"ja-Jpan":{_desired:"ja-Hrkt",_distance:"5",_oneway:"true"}},{"ja-Hrkt":{_desired:"ja-Hira",_distance:"5",_oneway:"true"}},{"ja-Hrkt":{_desired:"ja-Kana",_distance:"5",_oneway:"true"}},{"ko-Kore":{_desired:"ko-Hani",_distance:"5",_oneway:"true"}},{"ko-Kore":{_desired:"ko-Hang",_distance:"5",_oneway:"true"}},{"ko-Kore":{_desired:"ko-Jamo",_distance:"5",_oneway:"true"}},{"ko-Hang":{_desired:"ko-Jamo",_distance:"5",_oneway:"true"}},{"*-*":{_desired:"*-*",_distance:"50"}},{"ar-*-$maghreb":{_desired:"ar-*-$maghreb",_distance:"4"}},{"ar-*-$!maghreb":{_desired:"ar-*-$!maghreb",_distance:"4"}},{"ar-*-*":{_desired:"ar-*-*",_distance:"5"}},{"en-*-$enUS":{_desired:"en-*-$enUS",_distance:"4"}},{"en-*-GB":{_desired:"en-*-$!enUS",_distance:"3"}},{"en-*-$!enUS":{_desired:"en-*-$!enUS",_distance:"4"}},{"en-*-*":{_desired:"en-*-*",_distance:"5"}},{"es-*-$americas":{_desired:"es-*-$americas",_distance:"4"}},{"es-*-$!americas":{_desired:"es-*-$!americas",_distance:"4"}},{"es-*-*":{_desired:"es-*-*",_distance:"5"}},{"pt-*-$americas":{_desired:"pt-*-$americas",_distance:"4"}},{"pt-*-$!americas":{_desired:"pt-*-$!americas",_distance:"4"}},{"pt-*-*":{_desired:"pt-*-*",_distance:"5"}},{"zh-Hant-$cnsar":{_desired:"zh-Hant-$cnsar",_distance:"4"}},{"zh-Hant-$!cnsar":{_desired:"zh-Hant-$!cnsar",_distance:"4"}},{"zh-Hant-*":{_desired:"zh-Hant-*",_distance:"5"}},{"*-*-*":{_desired:"*-*-*",_distance:"4"}}]}}},Hd={"001":["001","001-status-grouping","002","005","009","011","013","014","015","017","018","019","021","029","030","034","035","039","053","054","057","061","142","143","145","150","151","154","155","AC","AD","AE","AF","AG","AI","AL","AM","AO","AQ","AR","AS","AT","AU","AW","AX","AZ","BA","BB","BD","BE","BF","BG","BH","BI","BJ","BL","BM","BN","BO","BQ","BR","BS","BT","BV","BW","BY","BZ","CA","CC","CD","CF","CG","CH","CI","CK","CL","CM","CN","CO","CP","CQ","CR","CU","CV","CW","CX","CY","CZ","DE","DG","DJ","DK","DM","DO","DZ","EA","EC","EE","EG","EH","ER","ES","ET","EU","EZ","FI","FJ","FK","FM","FO","FR","GA","GB","GD","GE","GF","GG","GH","GI","GL","GM","GN","GP","GQ","GR","GS","GT","GU","GW","GY","HK","HM","HN","HR","HT","HU","IC","ID","IE","IL","IM","IN","IO","IQ","IR","IS","IT","JE","JM","JO","JP","KE","KG","KH","KI","KM","KN","KP","KR","KW","KY","KZ","LA","LB","LC","LI","LK","LR","LS","LT","LU","LV","LY","MA","MC","MD","ME","MF","MG","MH","MK","ML","MM","MN","MO","MP","MQ","MR","MS","MT","MU","MV","MW","MX","MY","MZ","NA","NC","NE","NF","NG","NI","NL","NO","NP","NR","NU","NZ","OM","PA","PE","PF","PG","PH","PK","PL","PM","PN","PR","PS","PT","PW","PY","QA","QO","RE","RO","RS","RU","RW","SA","SB","SC","SD","SE","SG","SH","SI","SJ","SK","SL","SM","SN","SO","SR","SS","ST","SV","SX","SY","SZ","TA","TC","TD","TF","TG","TH","TJ","TK","TL","TM","TN","TO","TR","TT","TV","TW","TZ","UA","UG","UM","UN","US","UY","UZ","VA","VC","VE","VG","VI","VN","VU","WF","WS","XK","YE","YT","ZA","ZM","ZW"],"002":["002","002-status-grouping","011","014","015","017","018","202","AO","BF","BI","BJ","BW","CD","CF","CG","CI","CM","CV","DJ","DZ","EA","EG","EH","ER","ET","GA","GH","GM","GN","GQ","GW","IC","IO","KE","KM","LR","LS","LY","MA","MG","ML","MR","MU","MW","MZ","NA","NE","NG","RE","RW","SC","SD","SH","SL","SN","SO","SS","ST","SZ","TD","TF","TG","TN","TZ","UG","YT","ZA","ZM","ZW"],"003":["003","013","021","029","AG","AI","AW","BB","BL","BM","BQ","BS","BZ","CA","CR","CU","CW","DM","DO","GD","GL","GP","GT","HN","HT","JM","KN","KY","LC","MF","MQ","MS","MX","NI","PA","PM","PR","SV","SX","TC","TT","US","VC","VG","VI"],"005":["005","AR","BO","BR","BV","CL","CO","EC","FK","GF","GS","GY","PE","PY","SR","UY","VE"],"009":["009","053","054","057","061","AC","AQ","AS","AU","CC","CK","CP","CX","DG","FJ","FM","GU","HM","KI","MH","MP","NC","NF","NR","NU","NZ","PF","PG","PN","PW","QO","SB","TA","TK","TO","TV","UM","VU","WF","WS"],"011":["011","BF","BJ","CI","CV","GH","GM","GN","GW","LR","ML","MR","NE","NG","SH","SL","SN","TG"],"013":["013","BZ","CR","GT","HN","MX","NI","PA","SV"],"014":["014","BI","DJ","ER","ET","IO","KE","KM","MG","MU","MW","MZ","RE","RW","SC","SO","SS","TF","TZ","UG","YT","ZM","ZW"],"015":["015","DZ","EA","EG","EH","IC","LY","MA","SD","TN"],"017":["017","AO","CD","CF","CG","CM","GA","GQ","ST","TD"],"018":["018","BW","LS","NA","SZ","ZA"],"019":["003","005","013","019","019-status-grouping","021","029","419","AG","AI","AR","AW","BB","BL","BM","BO","BQ","BR","BS","BV","BZ","CA","CL","CO","CR","CU","CW","DM","DO","EC","FK","GD","GF","GL","GP","GS","GT","GY","HN","HT","JM","KN","KY","LC","MF","MQ","MS","MX","NI","PA","PE","PM","PR","PY","SR","SV","SX","TC","TT","US","UY","VC","VE","VG","VI"],"021":["021","BM","CA","GL","PM","US"],"029":["029","AG","AI","AW","BB","BL","BQ","BS","CU","CW","DM","DO","GD","GP","HT","JM","KN","KY","LC","MF","MQ","MS","PR","SX","TC","TT","VC","VG","VI"],"030":["030","CN","HK","JP","KP","KR","MN","MO","TW"],"034":["034","AF","BD","BT","IN","IR","LK","MV","NP","PK"],"035":["035","BN","ID","KH","LA","MM","MY","PH","SG","TH","TL","VN"],"039":["039","AD","AL","BA","ES","GI","GR","HR","IT","ME","MK","MT","PT","RS","SI","SM","VA","XK"],"053":["053","AU","CC","CX","HM","NF","NZ"],"054":["054","FJ","NC","PG","SB","VU"],"057":["057","FM","GU","KI","MH","MP","NR","PW","UM"],"061":["061","AS","CK","NU","PF","PN","TK","TO","TV","WF","WS"],142:["030","034","035","142","143","145","AE","AF","AM","AZ","BD","BH","BN","BT","CN","CY","GE","HK","ID","IL","IN","IQ","IR","JO","JP","KG","KH","KP","KR","KW","KZ","LA","LB","LK","MM","MN","MO","MV","MY","NP","OM","PH","PK","PS","QA","SA","SG","SY","TH","TJ","TL","TM","TR","TW","UZ","VN","YE"],143:["143","KG","KZ","TJ","TM","UZ"],145:["145","AE","AM","AZ","BH","CY","GE","IL","IQ","JO","KW","LB","OM","PS","QA","SA","SY","TR","YE"],150:["039","150","151","154","155","AD","AL","AT","AX","BA","BE","BG","BY","CH","CQ","CZ","DE","DK","EE","ES","FI","FO","FR","GB","GG","GI","GR","HR","HU","IE","IM","IS","IT","JE","LI","LT","LU","LV","MC","MD","ME","MK","MT","NL","NO","PL","PT","RO","RS","RU","SE","SI","SJ","SK","SM","UA","VA","XK"],151:["151","BG","BY","CZ","HU","MD","PL","RO","RU","SK","UA"],154:["154","AX","CQ","DK","EE","FI","FO","GB","GG","IE","IM","IS","JE","LT","LV","NO","SE","SJ"],155:["155","AT","BE","CH","DE","FR","LI","LU","MC","NL"],202:["011","014","017","018","202","AO","BF","BI","BJ","BW","CD","CF","CG","CI","CM","CV","DJ","ER","ET","GA","GH","GM","GN","GQ","GW","IO","KE","KM","LR","LS","MG","ML","MR","MU","MW","MZ","NA","NE","NG","RE","RW","SC","SH","SL","SN","SO","SS","ST","SZ","TD","TF","TG","TZ","UG","YT","ZA","ZM","ZW"],419:["005","013","029","419","AG","AI","AR","AW","BB","BL","BO","BQ","BR","BS","BV","BZ","CL","CO","CR","CU","CW","DM","DO","EC","FK","GD","GF","GP","GS","GT","GY","HN","HT","JM","KN","KY","LC","MF","MQ","MS","MX","NI","PA","PE","PR","PY","SR","SV","SX","TC","TT","UY","VC","VE","VG","VI"],EU:["AT","BE","BG","CY","CZ","DE","DK","EE","ES","EU","FI","FR","GR","HR","HU","IE","IT","LT","LU","LV","MT","NL","PL","PT","RO","SE","SI","SK"],EZ:["AT","BE","CY","DE","EE","ES","EZ","FI","FR","GR","IE","IT","LT","LU","LV","MT","NL","PT","SI","SK"],QO:["AC","AQ","CP","DG","QO","TA"],UN:["AD","AE","AF","AG","AL","AM","AO","AR","AT","AU","AZ","BA","BB","BD","BE","BF","BG","BH","BI","BJ","BN","BO","BR","BS","BT","BW","BY","BZ","CA","CD","CF","CG","CH","CI","CL","CM","CN","CO","CR","CU","CV","CY","CZ","DE","DJ","DK","DM","DO","DZ","EC","EE","EG","ER","ES","ET","FI","FJ","FM","FR","GA","GB","GD","GE","GH","GM","GN","GQ","GR","GT","GW","GY","HN","HR","HT","HU","ID","IE","IL","IN","IQ","IR","IS","IT","JM","JO","JP","KE","KG","KH","KI","KM","KN","KP","KR","KW","KZ","LA","LB","LC","LI","LK","LR","LS","LT","LU","LV","LY","MA","MC","MD","ME","MG","MH","MK","ML","MM","MN","MR","MT","MU","MV","MW","MX","MY","MZ","NA","NE","NG","NI","NL","NO","NP","NR","NZ","OM","PA","PE","PG","PH","PK","PL","PT","PW","PY","QA","RO","RS","RU","RW","SA","SB","SC","SD","SE","SG","SI","SK","SL","SM","SN","SO","SR","SS","ST","SV","SY","SZ","TD","TG","TH","TJ","TL","TM","TN","TO","TR","TT","TV","TZ","UA","UG","UN","US","UY","UZ","VC","VE","VN","VU","WS","YE","ZA","ZM","ZW"]},ea=/-u(?:-[0-9a-z]{2,8})+/gi;function We(e,n,t){if(t===void 0&&(t=Error),!e)throw new t(n)}var zd=838,ar;function Kd(){var e,n;if(!ar){var t=(n=(e=rr.supplemental.languageMatching["written-new"][0])===null||e===void 0?void 0:e.paradigmLocales)===null||n===void 0?void 0:n._locales.split(" "),r=rr.supplemental.languageMatching["written-new"].slice(1,5),a=rr.supplemental.languageMatching["written-new"].slice(5),i=a.map(function(s){var o=Object.keys(s)[0],l=s[o];return{supported:o,desired:l._desired,distance:+l._distance,oneway:l.oneway==="true"}},{});ar={matches:i,matchVariables:r.reduce(function(s,o){var l=Object.keys(o)[0],u=o[l];return s[l.slice(1)]=u._value.split("+"),s},{}),paradigmLocales:Re(Re([],t,!0),t.map(function(s){return new Intl.Locale(s.replace(/_/g,"-")).maximize().toString()}),!0)}}return ar}function mt(e,n,t){var r=n.split("-"),a=r[0],i=r[1],s=r[2],o=!0;if(s&&s[0]==="$"){var l=s[1]!=="!",u=l?t[s.slice(1)]:t[s.slice(2)],d=u.map(function(f){return Hd[f]||[f]}).reduce(function(f,m){return Re(Re([],f,!0),m,!0)},[]);o&&(o=d.indexOf(e.region||"")>-1==l)}else o&&(o=e.region?s==="*"||s===e.region:!0);return o&&(o=e.script?i==="*"||i===e.script:!0),o&&(o=e.language?a==="*"||a===e.language:!0),o}function Ia(e){return[e.language,e.script,e.region].filter(Boolean).join("-")}function ir(e,n,t){for(var r=0,a=t.matches;r<a.length;r++){var i=a[r],s=mt(e,i.desired,t.matchVariables)&&mt(n,i.supported,t.matchVariables);if(!i.oneway&&!s&&(s=mt(e,i.supported,t.matchVariables)&&mt(n,i.desired,t.matchVariables)),s){var o=i.distance*10;return t.paradigmLocales.indexOf(Ia(e))>-1!=t.paradigmLocales.indexOf(Ia(n))>-1?o-1:o}}throw new Error("No matching distance found")}function Wd(e,n){var t=new Intl.Locale(e).maximize(),r=new Intl.Locale(n).maximize(),a={language:t.language,script:t.script||"",region:t.region||""},i={language:r.language,script:r.script||"",region:r.region||""},s=0,o=Kd();return a.language!==i.language&&(s+=ir({language:t.language,script:"",region:""},{language:r.language,script:"",region:""},o)),a.script!==i.script&&(s+=ir({language:t.language,script:a.script,region:""},{language:r.language,script:i.script,region:""},o)),a.region!==i.region&&(s+=ir(a,i,o)),s}function Vd(e,n,t){t===void 0&&(t=zd);var r=1/0,a={matchedDesiredLocale:"",distances:{}};return e.forEach(function(i,s){a.distances[i]||(a.distances[i]={}),n.forEach(function(o){var l=Wd(i,o)+0+s*40;a.distances[i][o]=l,l<r&&(r=l,a.matchedDesiredLocale=i,a.matchedSupportedLocale=o)})}),r>=t&&(a.matchedDesiredLocale=void 0,a.matchedSupportedLocale=void 0),a}function Zd(e,n,t){var r,a,i=[],s=n.reduce(function(l,u){var d=u.replace(ea,"");return i.push(d),l[d]=u,l},{}),o=Vd(i,e);return o.matchedSupportedLocale&&o.matchedDesiredLocale&&(r=o.matchedSupportedLocale,a=s[o.matchedDesiredLocale].slice(o.matchedDesiredLocale.length)||void 0),r?{locale:r,extension:a}:{locale:t()}}function Yd(e,n){var t=n.toLowerCase();We(e!==void 0,"ukey must be defined");var r=t;return r}function Ta(e){return Intl.getCanonicalLocales(e)[0]}function Qd(e,n,t){We(e.indexOf("-u-")===-1,"Expected locale to not have a Unicode locale extension");for(var r="-u",a=0,i=n;a<i.length;a++){var s=i[a];r+="-".concat(s)}for(var o=0,l=t;o<l.length;o++){var u=l[o],d=u.key,f=u.value;r+="-".concat(d),f!==""&&(r+="-".concat(f))}if(r==="-u")return Ta(e);var m=e.indexOf("-x-"),p;if(m===-1)p=e+r;else{var w=e.slice(0,m),h=e.slice(m);p=w+r+h}return Ta(p)}function Vs(e,n){for(var t=n;;){if(e.indexOf(t)>-1)return t;var r=t.lastIndexOf("-");if(!~r)return;r>=2&&t[r-2]==="-"&&(r-=2),t=t.slice(0,r)}}function Jd(e,n,t){for(var r={locale:""},a=0,i=n;a<i.length;a++){var s=i[a],o=s.replace(ea,""),l=Vs(e,o);if(l)return r.locale=l,s!==o&&(r.extension=s.slice(o.length,s.length)),r}return r.locale=t(),r}function Xd(e){We(e===e.toLowerCase(),"Expected extension to be lowercase"),We(e.slice(0,3)==="-u-","Expected extension to be a Unicode locale extension");for(var n=[],t=[],r,a=e.length,i=3;i<a;){var s=e.indexOf("-",i),o=void 0;s===-1?o=a-i:o=s-i;var l=e.slice(i,i+o);We(o>=2,"Expected a subtag to have at least 2 characters"),r===void 0&&o!=2?n.indexOf(l)===-1&&n.push(l):o===2?(r={key:l,value:""},t.find(function(u){return u.key===(r==null?void 0:r.key)})===void 0&&t.push(r)):(r==null?void 0:r.value)===""?r.value=l:(We(r!==void 0,"Expected keyword to be defined"),r.value+="-"+l),i+=o+1}return{attributes:n,keywords:t}}function na(e,n,t,r,a,i){var s,o=t.localeMatcher,l;o==="lookup"?l=Jd(Array.from(e),n,i):l=Zd(Array.from(e),n,i),l==null&&(l={locale:i(),extension:""});var u=l.locale,d=a[u],f={locale:"en",dataLocale:u},m,p;l.extension?(m=Xd(l.extension),p=m.keywords):p=[];for(var w=[],h=function(b){var S=(s=d==null?void 0:d[b])!==null&&s!==void 0?s:[];We(Array.isArray(S),"keyLocaleData for ".concat(b," must be an array"));var T=S[0];We(T===void 0||typeof T=="string","value must be a string or undefined");var k=void 0,I=p.find(function(F){return F.key===b});if(I){var N=I.value;N!==""?S.indexOf(N)>-1&&(T=N,k={key:b,value:T}):S.indexOf("true")>-1&&(T="true",k={key:b,value:T})}var j=t[b];if(We(j==null||typeof j=="string","optionsValue must be a string or undefined"),typeof j=="string"){var D=b.toLowerCase();j=Yd(D,j),j===""&&(j="true")}j!==T&&S.indexOf(j)>-1&&(T=j,k=void 0),k&&w.push(k),f[b]=T},_=0,y=r;_<y.length;_++){var x=y[_];h(x)}var v=[];return w.length>0&&(v=[],u=Qd(u,v,w)),f.locale=u,f}function xr(e,n){for(var t=[],r=0,a=n;r<a.length;r++){var i=a[r],s=i.replace(ea,""),o=Vs(e,s);o&&t.push(o)}return t}function ef(e,n,t,r){return na(n,Ud(e),{localeMatcher:(r==null?void 0:r.algorithm)||"best fit"},[],{},function(){return t}).locale}const nf=Object.freeze(Object.defineProperty({__proto__:null,LookupSupportedLocales:xr,ResolveLocale:na,match:ef},Symbol.toStringTag,{value:"Module"}));var Aa=new Set([1,2,5,10,20,25,50,100,200,250,500,1e3,2e3,2500,5e3]);function Zs(e,n,t,r,a){var i=yr(n,"minimumIntegerDigits",1,21,1),s=n.minimumFractionDigits,o=n.maximumFractionDigits,l=n.minimumSignificantDigits,u=n.maximumSignificantDigits;e.minimumIntegerDigits=i;var d=yr(n,"roundingIncrement",1,5e3,1);Q(Aa.has(d),"Invalid rounding increment value: ".concat(d,`.
Valid values are `).concat(Array.from(Aa).join(", "),"."));var f=fe(n,"roundingMode","string",["ceil","floor","expand","trunc","halfCeil","halfFloor","halfExpand","halfTrunc","halfEven"],"halfExpand"),m=fe(n,"roundingPriority","string",["auto","morePrecision","lessPrecision"],"auto"),p=fe(n,"trailingZeroDisplay","string",["auto","stripIfInteger"],"auto");d!==1&&(r=t),e.roundingIncrement=d,e.roundingMode=f,e.trailingZeroDisplay=p;var w=l!==void 0||u!==void 0,h=s!==void 0||o!==void 0,_=!0,y=!0;if(m==="auto"&&(_=w,(w||!h&&a==="compact")&&(y=!1)),_&&(w?(e.minimumSignificantDigits=Rn(l,1,21,1),e.maximumSignificantDigits=Rn(u,e.minimumSignificantDigits,21,21)):(e.minimumSignificantDigits=1,e.maximumSignificantDigits=21)),y)if(h){if(s=Rn(s,0,100,void 0),o=Rn(o,0,100,void 0),s===void 0)Q(o!==void 0,"maximumFractionDigits must be defined"),s=Math.min(t,o);else if(o===void 0)o=Math.max(r,s);else if(s>o)throw new RangeError("Invalid range, ".concat(s," > ").concat(o));e.minimumFractionDigits=s,e.maximumFractionDigits=o}else e.minimumFractionDigits=t,e.maximumFractionDigits=r;!_&&!y?(e.minimumFractionDigits=0,e.maximumFractionDigits=0,e.minimumSignificantDigits=1,e.maximumSignificantDigits=2,e.roundingType="morePrecision",e.roundingPriority="morePrecision"):m==="morePrecision"?(e.roundingType="morePrecision",e.roundingPriority="morePrecision"):m==="lessPrecision"?(e.roundingType="lessPrecision",e.roundingPriority="lessPrecision"):w?(e.roundingType="significantDigits",e.roundingPriority="auto"):(e.roundingType="fractionDigits",e.roundingPriority="auto"),d!==1&&(Q(e.roundingType==="fractionDigits","Invalid roundingType",TypeError),Q(e.maximumFractionDigits===e.minimumFractionDigits,"With roundingIncrement > 1, maximumFractionDigits and minimumFractionDigits must be equal.",RangeError))}function Ys(e,n){n===void 0&&(n=Object.create(null));var t=fe(n,"style","string",["decimal","percent","currency","unit"],"decimal");e.style=t;var r=fe(n,"currency","string",void 0,void 0);Q(r===void 0||Bs(r),"Malformed currency code",RangeError),Q(t!=="currency"||r!==void 0,"currency cannot be undefined",TypeError);var a=fe(n,"currencyDisplay","string",["code","symbol","narrowSymbol","name"],"symbol"),i=fe(n,"currencySign","string",["standard","accounting"],"standard"),s=fe(n,"unit","string",void 0,void 0);Q(s===void 0||$s(s),"Invalid unit argument for Intl.NumberFormat()",RangeError),Q(t!=="unit"||s!==void 0,"unit cannot be undefined",TypeError);var o=fe(n,"unitDisplay","string",["short","narrow","long"],"short");t==="currency"&&(e.currency=r.toUpperCase(),e.currencyDisplay=a,e.currencySign=i),t==="unit"&&(e.unit=s,e.unitDisplay=o)}function tf(e,n,t,r){var a=r.getInternalSlots,i=r.localeData,s=r.availableLocales,o=r.numberingSystemNames,l=r.getDefaultLocale,u=r.currencyDigitsData,d=us(n),f=Ms(t),m=Object.create(null),p=fe(f,"localeMatcher","string",["lookup","best fit"],"best fit");m.localeMatcher=p;var w=fe(f,"numberingSystem","string",void 0,void 0);if(w!==void 0&&o.indexOf(w)<0)throw RangeError("Invalid numberingSystems: ".concat(w));m.nu=w;var h=na(Array.from(s),d,m,["nu"],i,l),_=i[h.dataLocale];Q(!!_,"Missing locale data for ".concat(h.dataLocale));var y=a(e);y.locale=h.locale,y.dataLocale=h.dataLocale,y.numberingSystem=h.nu,y.dataLocaleData=_,Ys(y,f);var x=y.style,v=fe(f,"notation","string",["standard","scientific","engineering","compact"],"standard");y.notation=v;var b,S;if(x==="currency"&&v==="standard"){var T=y.currency,k=Hs(T,{currencyDigitsData:u});b=k,S=k}else b=0,S=x==="percent"?0:3;Zs(y,f,b,S,v);var I=fe(f,"compactDisplay","string",["short","long"],"short"),N="auto";v==="compact"&&(y.compactDisplay=I,N="min2");var j=Os(f,"useGrouping",["min2","auto","always"],"always",!1,N);y.useGrouping=j;var D=fe(f,"signDisplay","string",["auto","never","always","exceptZero","negative"],"auto");return y.signDisplay=D,e}function rf(e){for(var n=[],t=e.indexOf("{"),r=0,a=0,i=e.length;t<e.length&&t>-1;)r=e.indexOf("}",t),Q(r>t,"Invalid pattern ".concat(e)),t>a&&n.push({type:"literal",value:e.substring(a,t)}),n.push({type:e.substring(t+1,r),value:void 0}),a=r+1,t=e.indexOf("{",a);return a<i&&n.push({type:"literal",value:e.substring(a,i)}),n}function af(e,n,t){var r="best fit";return t!==void 0&&(t=Ur(t),r=fe(t,"localeMatcher","string",["lookup","best fit"],"best fit")),xr(Array.from(e),n)}(function(e){Rr(n,e);function n(){var t=e!==null&&e.apply(this,arguments)||this;return t.type="MISSING_LOCALE_DATA",t}return n})(Error);function sf(e){return e.type==="MISSING_LOCALE_DATA"}var Dr;(function(e){e.startRange="startRange",e.shared="shared",e.endRange="endRange"})(Dr||(Dr={}));function of(e){var n=Zr(e,"number");if(typeof n=="bigint")return new $(n);if(n===void 0)return new $(NaN);if(n===!0)return new $(1);if(n===!1)return new $(0);if(n===null)return new $(0);try{return new $(n)}catch{return new $(NaN)}}const uf=Object.freeze(Object.defineProperty({__proto__:null,ApplyUnsignedRoundingMode:Yr,ArrayCreate:Es,CanonicalizeLocaleList:us,CanonicalizeTimeZoneName:Ql,CoerceOptionsToObject:Ms,CollapseNumberRange:qs,ComputeExponent:Us,ComputeExponentForMagnitude:wr,CurrencyDigits:Hs,DateFromTime:hd,Day:Hr,DayFromYear:Ss,DayWithinYear:Kr,DaysInYear:Ns,FormatApproximately:Ws,FormatNumeric:br,FormatNumericRange:$d,FormatNumericRangeToParts:qd,FormatNumericToParts:Gd,FormatNumericToString:Jr,GetNumberOption:yr,GetOption:fe,GetOptionsObject:Ed,GetStringOrBooleanOption:Os,GetUnsignedRoundingMode:Qr,HasOwnProperty:Cs,HourFromTime:yd,InLeapYear:Wr,InitializeNumberFormat:tf,IsSanctionedSimpleUnitIdentifier:jt,IsValidTimeZoneName:Cd,IsWellFormedCurrencyCode:Bs,IsWellFormedUnitIdentifier:$s,MinFromTime:wd,MonthFromTime:ks,OrdinaryHasInstance:bd,PartitionNumberPattern:Vn,PartitionNumberRangePattern:Xr,PartitionPattern:rf,get RangePatternType(){return Dr},SANCTIONED_UNITS:Ps,SIMPLE_UNITS:Rs,SameValue:dd,SecFromTime:_d,SetNumberFormatDigitOptions:Zs,SetNumberFormatUnitOptions:Ys,SupportedLocales:af,TimeClip:cd,TimeFromYear:pd,ToIntlMathematicalValue:of,ToNumber:Gr,ToObject:Ur,ToPrimitive:Zr,ToRawFixed:Lt,ToRawPrecision:_r,ToString:qr,Type:fd,WeekDay:md,YearFromTime:zr,ZERO:et,_formatToParts:Ks,createDataProperty:rd,createMemoizedDateTimeFormat:id,createMemoizedListFormat:ud,createMemoizedLocale:od,createMemoizedNumberFormat:ad,createMemoizedPluralRules:sd,defineProperty:td,getInternalSlot:ed,getMultiInternalSlots:Ds,invariant:Q,isLiteralPart:nd,isMissingLocaleDataError:sf,msFromTime:xd,removeUnitNamespace:Ls,setInternalSlot:xs,setMultiInternalSlots:Xc},Symbol.toStringTag,{value:"Module"})),at=Cr(uf),lf=Cr(nf);var pt={},Fa;function cf(){if(Fa)return pt;Fa=1,Object.defineProperty(pt,"__esModule",{value:!0}),pt.GetDurationUnitOptions=n;var e=at;function n(t,r,a,i,s,o){var l=(0,e.GetOption)(r,t,"string",i,void 0),u="always";l===void 0&&(a==="digital"?(t!=="hours"&&t!=="minutes"&&t!=="seconds"&&(u="auto"),l=s):(u="auto",o==="numeric"||o==="2-digit"?l="numeric":l=a));var d="".concat(t,"Display"),f=(0,e.GetOption)(r,d,"string",["always","auto"],u);if(o==="numeric"||o==="2-digit"){if(l!=="numeric"&&l!=="2-digit")throw new RangeError("Can't mix numeric and non-numeric styles");if((t==="minutes"||t==="seconds")&&(l="2-digit"),l==="numeric"&&f==="always"&&(t==="milliseconds"||t==="microseconds"||t==="nanoseconds"))throw new RangeError("Can't display milliseconds, microseconds, or nanoseconds in numeric format")}return{style:l,display:f}}return pt}var ht={},cn={},Ma;function ta(){return Ma||(Ma=1,Object.defineProperty(cn,"__esModule",{value:!0}),cn.TABLE_2=cn.TABLE_1=void 0,cn.TABLE_1=["years","months","weeks","days","hours","minutes","seconds","milliseconds","microseconds","nanoseconds"],cn.TABLE_2=[{valueField:"years",styleSlot:"years",displaySlot:"yearsDisplay",unit:"years",numberFormatUnit:"year"},{valueField:"months",styleSlot:"months",displaySlot:"monthsDisplay",unit:"months",numberFormatUnit:"month"},{valueField:"weeks",styleSlot:"weeks",displaySlot:"weeksDisplay",unit:"weeks",numberFormatUnit:"week"},{valueField:"days",styleSlot:"days",displaySlot:"daysDisplay",unit:"days",numberFormatUnit:"day"},{valueField:"hours",styleSlot:"hours",displaySlot:"hoursDisplay",unit:"hours",numberFormatUnit:"hour"},{valueField:"minutes",styleSlot:"minutes",displaySlot:"minutesDisplay",unit:"minutes",numberFormatUnit:"minute"},{valueField:"seconds",styleSlot:"seconds",displaySlot:"secondsDisplay",unit:"seconds",numberFormatUnit:"second"},{valueField:"milliseconds",styleSlot:"milliseconds",displaySlot:"millisecondsDisplay",unit:"milliseconds",numberFormatUnit:"millisecond"},{valueField:"microseconds",styleSlot:"microseconds",displaySlot:"microsecondsDisplay",unit:"microseconds",numberFormatUnit:"microsecond"},{valueField:"nanoseconds",styleSlot:"nanoseconds",displaySlot:"nanosecondsDisplay",unit:"nanoseconds",numberFormatUnit:"nanosecond"}]),cn}var gt={},Oa;function Qs(){if(Oa)return gt;Oa=1,Object.defineProperty(gt,"__esModule",{value:!0}),gt.getInternalSlots=n;var e=new WeakMap;function n(t){var r=e.get(t);return r||(r=Object.create(null),e.set(t,r)),r}return gt}var Pa;function df(){if(Pa)return ht;Pa=1,Object.defineProperty(ht,"__esModule",{value:!0}),ht.PartitionDurationFormatPattern=a;var e=at,n=ta(),t=Js(),r=Qs();function a(i,s){var o=[],l=!1,u=!1,d=(0,r.getInternalSlots)(i),f=d.dataLocale,m=t.DurationFormat.localeData[f];if(!m)throw new TypeError("Invalid locale");for(var p=d.numberingSystem,w=m.digitalFormat[p],h=function(Fe){var te=n.TABLE_2[Fe],re=s[te.valueField],ue=d[te.styleSlot],pe=d[te.displaySlot],X=te.unit,ve=te.numberFormatUnit,ne=Object.create(null);if(X==="seconds"||X==="milliseconds"||X==="microseconds"){var ce=void 0;X==="seconds"?ce=d.milliseconds:X==="milliseconds"?ce=d.microseconds:ce=d.nanoseconds,ce==="numeric"&&(X==="seconds"?re+=s.milliseconds/1e3+s.microseconds/1e6+s.nanoseconds/1e9:X==="milliseconds"?re+=s.microseconds/1e3+s.nanoseconds/1e6:re+=s.nanoseconds/1e3,d.fractionalDigits===void 0?(ne.maximumFractionDigits=9,ne.minimumFractionDigits=0):(ne.maximumFractionDigits=d.fractionalDigits,ne.minimumFractionDigits=d.fractionalDigits),ne.roundingMode="trunc",l=!0)}if(re!==0||pe!=="auto"){ne.numberingSystem=d.numberingSystem,ue==="2-digit"&&(ne.minimumIntegerDigits=2),ue!=="2-digit"&&ue!=="numeric"&&(ne.style="unit",ne.unit=ve,ne.unitDisplay=ue);var In=(0,e.createMemoizedNumberFormat)(d.locale,ne),Be;u?(Be=o[o.length-1],Be.push({type:"literal",value:w})):Be=[];var Tn=In.formatToParts(re);Tn.forEach(function(hn){var gn=hn.type,vn=hn.value;Be.push({type:gn,value:vn,unit:ve})}),u||((ue==="2-digit"||ue==="numeric")&&(u=!0),o.push(Be))}else u=!1},_=0;_<n.TABLE_2.length&&!l;_++)h(_);var y=Object.create(null);y.type="unit";var x=d.style;x==="digital"&&(x="short"),y.style=x;for(var v=(0,e.createMemoizedListFormat)(d.locale,y),b=[],S=0,T=o;S<T.length;S++){for(var k=T[S],I="",N=0,j=k;N<j.length;N++){var D=j[N].value;I+=D}b.push(I)}for(var F=v.formatToParts(b),O=0,G=o.length,B=[],A=0,V=F;A<V.length;A++){var xe=V[A],ee=xe.type,D=xe.value;if(ee==="element"){(0,e.invariant)(O<G,"Index out of bounds");for(var k=o[O],H=0,ge=k;H<ge.length;H++){var je=ge[H];B.push(je)}O++}else(0,e.invariant)(ee==="literal","Type must be literal"),B.push({type:"literal",value:D})}return B}return ht}var vt={},yt={},wt={},La;function ff(){if(La)return wt;La=1,Object.defineProperty(wt,"__esModule",{value:!0}),wt.DurationRecordSign=n;var e=ta();function n(t){for(var r=0,a=e.TABLE_1;r<a.length;r++){var i=a[r];if(t[i]<0)return-1;if(t[i]>0)return 1}return 0}return wt}var Ra;function mf(){if(Ra)return yt;Ra=1,Object.defineProperty(yt,"__esModule",{value:!0}),yt.IsValidDurationRecord=r;var e=at,n=ta(),t=ff();function r(a){for(var i=(0,t.DurationRecordSign)(a),s=0,o=n.TABLE_1;s<o.length;s++){var l=o[s],u=a[l];if((0,e.invariant)(isFinite(Number(u)),"".concat(l," is not finite")),u<0&&i>0||u>0&&i<0)return!1}return!0}return yt}var _t={},Ba;function pf(){if(Ba)return _t;Ba=1,Object.defineProperty(_t,"__esModule",{value:!0}),_t.ToIntegerIfIntegral=n;var e=at;function n(t){var r=(0,e.ToNumber)(t);return(0,e.invariant)(r.isInteger(),"".concat(t," is not an integer")),r.toNumber()}return _t}var $a;function hf(){if($a)return vt;$a=1,Object.defineProperty(vt,"__esModule",{value:!0}),vt.ToDurationRecord=t;var e=mf(),n=pf();function t(r){if(typeof r!="object")throw typeof r=="string"?new RangeError("Invalid duration format"):new TypeError("Invalid duration");var a={years:0,months:0,weeks:0,days:0,hours:0,minutes:0,seconds:0,milliseconds:0,microseconds:0,nanoseconds:0};if(r.days!==void 0&&(a.days=(0,n.ToIntegerIfIntegral)(r.days)),r.hours!==void 0&&(a.hours=(0,n.ToIntegerIfIntegral)(r.hours)),r.microseconds!==void 0&&(a.microseconds=(0,n.ToIntegerIfIntegral)(r.microseconds)),r.milliseconds!==void 0&&(a.milliseconds=(0,n.ToIntegerIfIntegral)(r.milliseconds)),r.minutes!==void 0&&(a.minutes=(0,n.ToIntegerIfIntegral)(r.minutes)),r.months!==void 0&&(a.months=(0,n.ToIntegerIfIntegral)(r.months)),r.nanoseconds!==void 0&&(a.nanoseconds=(0,n.ToIntegerIfIntegral)(r.nanoseconds)),r.seconds!==void 0&&(a.seconds=(0,n.ToIntegerIfIntegral)(r.seconds)),r.weeks!==void 0&&(a.weeks=(0,n.ToIntegerIfIntegral)(r.weeks)),r.years!==void 0&&(a.years=(0,n.ToIntegerIfIntegral)(r.years)),r.years===void 0&&r.months===void 0&&r.weeks===void 0&&r.days===void 0&&r.hours===void 0&&r.minutes===void 0&&r.seconds===void 0&&r.milliseconds===void 0&&r.microseconds===void 0&&r.nanoseconds===void 0)throw new TypeError("Invalid duration format");if(!(0,e.IsValidDurationRecord)(a))throw new RangeError("Invalid duration format");return a}return vt}var Pn={},qa;function gf(){return qa||(qa=1,Object.defineProperty(Pn,"__esModule",{value:!0}),Pn.numberingSystemNames=void 0,Pn.numberingSystemNames=["adlm","ahom","arab","arabext","armn","armnlow","bali","beng","bhks","brah","cakm","cham","cyrl","deva","diak","ethi","fullwide","gara","geor","gong","gonm","grek","greklow","gujr","gukh","guru","hanidays","hanidec","hans","hansfin","hant","hantfin","hebr","hmng","hmnp","java","jpan","jpanfin","jpanyear","kali","kawi","khmr","knda","krai","lana","lanatham","laoo","latn","lepc","limb","mathbold","mathdbl","mathmono","mathsanb","mathsans","mlym","modi","mong","mroo","mtei","mymr","mymrepka","mymrpao","mymrshan","mymrtlng","nagm","newa","nkoo","olck","onao","orya","osma","outlined","rohg","roman","romanlow","saur","segment","shrd","sind","sinh","sora","sund","sunu","takr","talu","taml","tamldec","telu","thai","tibt","tirh","tnsa","vaii","wara","wcho"]),Pn}var Ln={},Ga;function vf(){return Ga||(Ga=1,Object.defineProperty(Ln,"__esModule",{value:!0}),Ln.TIME_SEPARATORS=void 0,Ln.TIME_SEPARATORS={default:":",localeData:{aa:{nu:["latn"]},"aa-DJ":{nu:["latn"]},"aa-ER":{nu:["latn"]},ab:{nu:["latn"]},af:{nu:["latn"]},"af-NA":{nu:["latn"]},agq:{nu:["latn"]},ak:{nu:["latn"]},am:{nu:["latn"]},an:{nu:["latn"]},ann:{nu:["latn"]},apc:{nu:["latn"]},ar:{nu:["latn","latn"]},"ar-AE":{nu:["latn","latn"]},"ar-BH":{nu:["arab","latn"]},"ar-DJ":{nu:["arab","latn"]},"ar-DZ":{nu:["latn","latn"]},"ar-EG":{nu:["arab","latn"]},"ar-EH":{nu:["latn","latn"]},"ar-ER":{nu:["arab","latn"]},"ar-IL":{nu:["arab","latn"]},"ar-IQ":{nu:["arab","latn"]},"ar-JO":{nu:["arab","latn"]},"ar-KM":{nu:["arab","latn"]},"ar-KW":{nu:["arab","latn"]},"ar-LB":{nu:["arab","latn"]},"ar-LY":{nu:["latn","latn"]},"ar-MA":{nu:["latn","latn"]},"ar-MR":{nu:["arab","latn"]},"ar-OM":{nu:["arab","latn"]},"ar-PS":{nu:["arab","latn"]},"ar-QA":{nu:["arab","latn"]},"ar-SA":{nu:["arab","latn"]},"ar-SD":{nu:["arab","latn"]},"ar-SO":{nu:["arab","latn"]},"ar-SS":{nu:["arab","latn"]},"ar-SY":{nu:["arab","latn"]},"ar-TD":{nu:["arab","latn"]},"ar-TN":{nu:["latn","latn"]},"ar-YE":{nu:["arab","latn"]},arn:{nu:["latn"]},as:{nu:["beng"]},asa:{nu:["latn"]},ast:{nu:["latn"]},az:{nu:["latn"]},"az-Arab":{nu:["arabext"]},"az-Arab-IQ":{nu:["arabext"]},"az-Arab-TR":{nu:["arabext"]},"az-Cyrl":{nu:["latn"]},"az-Latn":{nu:["latn"]},ba:{nu:["latn"]},bal:{nu:["latn"]},"bal-Arab":{nu:["latn"]},"bal-Latn":{nu:["latn"]},bas:{nu:["latn"]},be:{nu:["latn"]},"be-tarask":{nu:["latn"]},bem:{nu:["latn"]},bew:{nu:["latn"]},bez:{nu:["latn"]},bg:{nu:["latn"]},bgc:{nu:["deva"]},bgn:{nu:["arabext"]},"bgn-AE":{nu:["arabext"]},"bgn-AF":{nu:["arabext"]},"bgn-IR":{nu:["arabext"]},"bgn-OM":{nu:["arabext"]},bho:{nu:["deva"]},blo:{nu:["latn"]},blt:{nu:["latn"]},bm:{nu:["latn"]},"bm-Nkoo":{nu:["latn"]},bn:{nu:["beng"]},"bn-IN":{nu:["beng"]},bo:{nu:["latn"]},"bo-IN":{nu:["latn"]},br:{nu:["latn"]},brx:{nu:["latn"]},bs:{nu:["latn"]},"bs-Cyrl":{nu:["latn"]},"bs-Latn":{nu:["latn"]},bss:{nu:["latn"]},byn:{nu:["latn"]},ca:{nu:["latn"]},"ca-AD":{nu:["latn"]},"ca-ES-valencia":{nu:["latn"]},"ca-FR":{nu:["latn"]},"ca-IT":{nu:["latn"]},cad:{nu:["latn"]},cch:{nu:["latn"]},ccp:{nu:["cakm"]},"ccp-IN":{nu:["cakm"]},ce:{nu:["latn"]},ceb:{nu:["latn"]},cgg:{nu:["latn"]},cho:{nu:["latn"]},chr:{nu:["latn"]},cic:{nu:["latn"]},ckb:{nu:["arab"]},"ckb-IR":{nu:["arab"]},co:{nu:["latn"]},cs:{nu:["latn"]},csw:{nu:["latn"]},cu:{nu:["latn"]},cv:{nu:["latn"]},cy:{nu:["latn"]},da:{nu:["latn"],separator:{latn:"."}},"da-GL":{nu:["latn"],separator:{latn:"."}},dav:{nu:["latn"]},de:{nu:["latn"]},"de-AT":{nu:["latn"]},"de-BE":{nu:["latn"]},"de-CH":{nu:["latn"]},"de-IT":{nu:["latn"]},"de-LI":{nu:["latn"]},"de-LU":{nu:["latn"]},dje:{nu:["latn"]},doi:{nu:["latn"]},dsb:{nu:["latn"]},dua:{nu:["latn"]},dv:{nu:["latn"]},dyo:{nu:["latn"]},dz:{nu:["tibt"]},ebu:{nu:["latn"]},ee:{nu:["latn"]},"ee-TG":{nu:["latn"]},el:{nu:["latn"]},"el-CY":{nu:["latn"]},"el-polyton":{nu:["latn"]},en:{nu:["latn"]},"en-001":{nu:["latn"]},"en-150":{nu:["latn"]},"en-AE":{nu:["latn"]},"en-AG":{nu:["latn"]},"en-AI":{nu:["latn"]},"en-AS":{nu:["latn"]},"en-AT":{nu:["latn"]},"en-AU":{nu:["latn"]},"en-BB":{nu:["latn"]},"en-BE":{nu:["latn"]},"en-BI":{nu:["latn"]},"en-BM":{nu:["latn"]},"en-BS":{nu:["latn"]},"en-BW":{nu:["latn"]},"en-BZ":{nu:["latn"]},"en-CA":{nu:["latn"]},"en-CC":{nu:["latn"]},"en-CH":{nu:["latn"]},"en-CK":{nu:["latn"]},"en-CM":{nu:["latn"]},"en-CX":{nu:["latn"]},"en-CY":{nu:["latn"]},"en-DE":{nu:["latn"]},"en-DG":{nu:["latn"]},"en-DK":{nu:["latn"],separator:{latn:"."}},"en-DM":{nu:["latn"]},"en-Dsrt":{nu:["latn"]},"en-ER":{nu:["latn"]},"en-FI":{nu:["latn"],separator:{latn:"."}},"en-FJ":{nu:["latn"]},"en-FK":{nu:["latn"]},"en-FM":{nu:["latn"]},"en-GB":{nu:["latn"]},"en-GD":{nu:["latn"]},"en-GG":{nu:["latn"]},"en-GH":{nu:["latn"]},"en-GI":{nu:["latn"]},"en-GM":{nu:["latn"]},"en-GU":{nu:["latn"]},"en-GY":{nu:["latn"]},"en-HK":{nu:["latn"]},"en-ID":{nu:["latn"]},"en-IE":{nu:["latn"]},"en-IL":{nu:["latn"]},"en-IM":{nu:["latn"]},"en-IN":{nu:["latn"]},"en-IO":{nu:["latn"]},"en-JE":{nu:["latn"]},"en-JM":{nu:["latn"]},"en-KE":{nu:["latn"]},"en-KI":{nu:["latn"]},"en-KN":{nu:["latn"]},"en-KY":{nu:["latn"]},"en-LC":{nu:["latn"]},"en-LR":{nu:["latn"]},"en-LS":{nu:["latn"]},"en-MG":{nu:["latn"]},"en-MH":{nu:["latn"]},"en-MO":{nu:["latn"]},"en-MP":{nu:["latn"]},"en-MS":{nu:["latn"]},"en-MT":{nu:["latn"]},"en-MU":{nu:["latn"]},"en-MV":{nu:["latn"]},"en-MW":{nu:["latn"]},"en-MY":{nu:["latn"]},"en-NA":{nu:["latn"]},"en-NF":{nu:["latn"]},"en-NG":{nu:["latn"]},"en-NL":{nu:["latn"]},"en-NR":{nu:["latn"]},"en-NU":{nu:["latn"]},"en-NZ":{nu:["latn"]},"en-PG":{nu:["latn"]},"en-PH":{nu:["latn"]},"en-PK":{nu:["latn"]},"en-PN":{nu:["latn"]},"en-PR":{nu:["latn"]},"en-PW":{nu:["latn"]},"en-RW":{nu:["latn"]},"en-SB":{nu:["latn"]},"en-SC":{nu:["latn"]},"en-SD":{nu:["latn"]},"en-SE":{nu:["latn"]},"en-SG":{nu:["latn"]},"en-SH":{nu:["latn"]},"en-SI":{nu:["latn"]},"en-SL":{nu:["latn"]},"en-SS":{nu:["latn"]},"en-SX":{nu:["latn"]},"en-SZ":{nu:["latn"]},"en-Shaw":{nu:["latn"]},"en-TC":{nu:["latn"]},"en-TK":{nu:["latn"]},"en-TO":{nu:["latn"]},"en-TT":{nu:["latn"]},"en-TV":{nu:["latn"]},"en-TZ":{nu:["latn"]},"en-UG":{nu:["latn"]},"en-UM":{nu:["latn"]},"en-VC":{nu:["latn"]},"en-VG":{nu:["latn"]},"en-VI":{nu:["latn"]},"en-VU":{nu:["latn"]},"en-WS":{nu:["latn"]},"en-ZA":{nu:["latn"]},"en-ZM":{nu:["latn"]},"en-ZW":{nu:["latn"]},eo:{nu:["latn"]},es:{nu:["latn"]},"es-419":{nu:["latn"]},"es-AR":{nu:["latn"]},"es-BO":{nu:["latn"]},"es-BR":{nu:["latn"]},"es-BZ":{nu:["latn"]},"es-CL":{nu:["latn"]},"es-CO":{nu:["latn"]},"es-CR":{nu:["latn"]},"es-CU":{nu:["latn"]},"es-DO":{nu:["latn"]},"es-EA":{nu:["latn"]},"es-EC":{nu:["latn"]},"es-GQ":{nu:["latn"]},"es-GT":{nu:["latn"]},"es-HN":{nu:["latn"]},"es-IC":{nu:["latn"]},"es-MX":{nu:["latn"]},"es-NI":{nu:["latn"]},"es-PA":{nu:["latn"]},"es-PE":{nu:["latn"]},"es-PH":{nu:["latn"]},"es-PR":{nu:["latn"]},"es-PY":{nu:["latn"]},"es-SV":{nu:["latn"]},"es-US":{nu:["latn"]},"es-UY":{nu:["latn"]},"es-VE":{nu:["latn"]},et:{nu:["latn"]},eu:{nu:["latn"]},ewo:{nu:["latn"]},fa:{nu:["arabext"]},"fa-AF":{nu:["arabext"]},ff:{nu:["latn"]},"ff-Adlm":{nu:["adlm"]},"ff-Adlm-BF":{nu:["adlm"]},"ff-Adlm-CM":{nu:["adlm"]},"ff-Adlm-GH":{nu:["adlm"]},"ff-Adlm-GM":{nu:["adlm"]},"ff-Adlm-GW":{nu:["adlm"]},"ff-Adlm-LR":{nu:["adlm"]},"ff-Adlm-MR":{nu:["adlm"]},"ff-Adlm-NE":{nu:["adlm"]},"ff-Adlm-NG":{nu:["adlm"]},"ff-Adlm-SL":{nu:["adlm"]},"ff-Adlm-SN":{nu:["adlm"]},"ff-Latn":{nu:["latn"]},"ff-Latn-BF":{nu:["latn"]},"ff-Latn-CM":{nu:["latn"]},"ff-Latn-GH":{nu:["latn"]},"ff-Latn-GM":{nu:["latn"]},"ff-Latn-GN":{nu:["latn"]},"ff-Latn-GW":{nu:["latn"]},"ff-Latn-LR":{nu:["latn"]},"ff-Latn-MR":{nu:["latn"]},"ff-Latn-NE":{nu:["latn"]},"ff-Latn-NG":{nu:["latn"]},"ff-Latn-SL":{nu:["latn"]},fi:{nu:["latn"],separator:{latn:"."}},fil:{nu:["latn"]},fo:{nu:["latn"]},"fo-DK":{nu:["latn"]},fr:{nu:["latn"]},"fr-BE":{nu:["latn"]},"fr-BF":{nu:["latn"]},"fr-BI":{nu:["latn"]},"fr-BJ":{nu:["latn"]},"fr-BL":{nu:["latn"]},"fr-CA":{nu:["latn"]},"fr-CD":{nu:["latn"]},"fr-CF":{nu:["latn"]},"fr-CG":{nu:["latn"]},"fr-CH":{nu:["latn"]},"fr-CI":{nu:["latn"]},"fr-CM":{nu:["latn"]},"fr-DJ":{nu:["latn"]},"fr-DZ":{nu:["latn"]},"fr-GA":{nu:["latn"]},"fr-GF":{nu:["latn"]},"fr-GN":{nu:["latn"]},"fr-GP":{nu:["latn"]},"fr-GQ":{nu:["latn"]},"fr-HT":{nu:["latn"]},"fr-KM":{nu:["latn"]},"fr-LU":{nu:["latn"]},"fr-MA":{nu:["latn"]},"fr-MC":{nu:["latn"]},"fr-MF":{nu:["latn"]},"fr-MG":{nu:["latn"]},"fr-ML":{nu:["latn"]},"fr-MQ":{nu:["latn"]},"fr-MR":{nu:["latn"]},"fr-MU":{nu:["latn"]},"fr-NC":{nu:["latn"]},"fr-NE":{nu:["latn"]},"fr-PF":{nu:["latn"]},"fr-PM":{nu:["latn"]},"fr-RE":{nu:["latn"]},"fr-RW":{nu:["latn"]},"fr-SC":{nu:["latn"]},"fr-SN":{nu:["latn"]},"fr-SY":{nu:["latn"]},"fr-TD":{nu:["latn"]},"fr-TG":{nu:["latn"]},"fr-TN":{nu:["latn"]},"fr-VU":{nu:["latn"]},"fr-WF":{nu:["latn"]},"fr-YT":{nu:["latn"]},frr:{nu:["latn"]},fur:{nu:["latn"]},fy:{nu:["latn"]},ga:{nu:["latn"]},"ga-GB":{nu:["latn"]},gaa:{nu:["latn"]},gd:{nu:["latn"]},gez:{nu:["latn"]},"gez-ER":{nu:["latn"]},gl:{nu:["latn"]},gn:{nu:["latn"]},gsw:{nu:["latn"]},"gsw-FR":{nu:["latn"]},"gsw-LI":{nu:["latn"]},gu:{nu:["latn"]},guz:{nu:["latn"]},gv:{nu:["latn"]},ha:{nu:["latn"]},"ha-Arab":{nu:["latn"]},"ha-Arab-SD":{nu:["latn"]},"ha-GH":{nu:["latn"]},"ha-NE":{nu:["latn"]},haw:{nu:["latn"]},he:{nu:["latn"]},hi:{nu:["latn"]},"hi-Latn":{nu:["latn"]},hnj:{nu:["hmnp","latn"]},"hnj-Hmnp":{nu:["hmnp","latn"]},hr:{nu:["latn"]},"hr-BA":{nu:["latn"]},hsb:{nu:["latn"]},hu:{nu:["latn"]},hy:{nu:["latn"]},ia:{nu:["latn"]},id:{nu:["latn"],separator:{latn:"."}},ie:{nu:["latn"]},ig:{nu:["latn"]},ii:{nu:["latn"]},io:{nu:["latn"]},is:{nu:["latn"]},it:{nu:["latn"]},"it-CH":{nu:["latn"]},"it-SM":{nu:["latn"]},"it-VA":{nu:["latn"]},iu:{nu:["latn"]},"iu-Latn":{nu:["latn"]},ja:{nu:["latn"]},jbo:{nu:["latn"]},jgo:{nu:["latn"]},jmc:{nu:["latn"]},jv:{nu:["latn"]},ka:{nu:["latn"]},kaa:{nu:["latn"]},"kaa-Cyrl":{nu:["latn"]},"kaa-Latn":{nu:["latn"]},kab:{nu:["latn"]},kaj:{nu:["latn"]},kam:{nu:["latn"]},kcg:{nu:["latn"]},kde:{nu:["latn"]},kea:{nu:["latn"]},ken:{nu:["latn"]},kgp:{nu:["latn"]},khq:{nu:["latn"]},ki:{nu:["latn"]},kk:{nu:["latn"]},"kk-Arab":{nu:["latn"]},"kk-Cyrl":{nu:["latn"]},"kk-KZ":{nu:["latn"]},kkj:{nu:["latn"]},kl:{nu:["latn"]},kln:{nu:["latn"]},km:{nu:["latn"]},kn:{nu:["latn"]},ko:{nu:["latn"]},"ko-CN":{nu:["latn"]},"ko-KP":{nu:["latn"]},kok:{nu:["latn"]},"kok-Deva":{nu:["latn"]},"kok-Latn":{nu:["latn"]},kpe:{nu:["latn"]},"kpe-GN":{nu:["latn"]},ks:{nu:["arabext"]},"ks-Arab":{nu:["arabext"]},"ks-Deva":{nu:["latn"]},ksb:{nu:["latn"]},ksf:{nu:["latn"]},ksh:{nu:["latn"]},ku:{nu:["latn"]},kw:{nu:["latn"]},kxv:{nu:["latn"]},"kxv-Deva":{nu:["latn"]},"kxv-Latn":{nu:["latn"]},"kxv-Orya":{nu:["latn"]},"kxv-Telu":{nu:["latn"]},ky:{nu:["latn"]},la:{nu:["latn"]},lag:{nu:["latn"]},lb:{nu:["latn"]},lg:{nu:["latn"]},lij:{nu:["latn"]},lkt:{nu:["latn"]},lld:{nu:["latn"]},lmo:{nu:["latn"]},ln:{nu:["latn"]},"ln-AO":{nu:["latn"]},"ln-CF":{nu:["latn"]},"ln-CG":{nu:["latn"]},lo:{nu:["latn"]},lrc:{nu:["arabext"]},"lrc-IQ":{nu:["arabext"]},lt:{nu:["latn"]},ltg:{nu:["latn"]},lu:{nu:["latn"]},luo:{nu:["latn"]},luy:{nu:["latn"]},lv:{nu:["latn"]},mai:{nu:["latn"]},mas:{nu:["latn"]},"mas-TZ":{nu:["latn"]},mdf:{nu:["latn"]},mer:{nu:["latn"]},mfe:{nu:["latn"]},mg:{nu:["latn"]},mgh:{nu:["latn"]},mgo:{nu:["latn"]},mhn:{nu:["latn"]},mi:{nu:["latn"]},mic:{nu:["latn"]},mk:{nu:["latn"]},ml:{nu:["latn"]},mn:{nu:["latn"]},"mn-Mong":{nu:["latn"]},"mn-Mong-MN":{nu:["latn"]},mni:{nu:["beng"]},"mni-Beng":{nu:["beng"]},"mni-Mtei":{nu:["mtei"]},moh:{nu:["latn"]},mr:{nu:["deva"]},ms:{nu:["latn"]},"ms-Arab":{nu:["latn"]},"ms-Arab-BN":{nu:["latn"]},"ms-BN":{nu:["latn"]},"ms-ID":{nu:["latn"],separator:{latn:"."}},"ms-SG":{nu:["latn"]},mt:{nu:["latn"]},mua:{nu:["latn"]},mus:{nu:["latn"]},my:{nu:["mymr"]},myv:{nu:["latn"]},mzn:{nu:["arabext"]},naq:{nu:["latn"]},nb:{nu:["latn"]},"nb-SJ":{nu:["latn"]},nd:{nu:["latn"]},nds:{nu:["latn"]},"nds-NL":{nu:["latn"]},ne:{nu:["deva"]},"ne-IN":{nu:["deva"]},nl:{nu:["latn"]},"nl-AW":{nu:["latn"]},"nl-BE":{nu:["latn"]},"nl-BQ":{nu:["latn"]},"nl-CW":{nu:["latn"]},"nl-SR":{nu:["latn"]},"nl-SX":{nu:["latn"]},nmg:{nu:["latn"]},nn:{nu:["latn"]},nnh:{nu:["latn"]},no:{nu:["latn"]},nqo:{nu:["nkoo"]},nr:{nu:["latn"]},nso:{nu:["latn"]},nus:{nu:["latn"]},nv:{nu:["latn"]},ny:{nu:["latn"]},nyn:{nu:["latn"]},oc:{nu:["latn"]},"oc-ES":{nu:["latn"]},om:{nu:["latn"]},"om-KE":{nu:["latn"]},or:{nu:["latn"]},os:{nu:["latn"]},"os-RU":{nu:["latn"]},osa:{nu:["latn"]},pa:{nu:["latn"]},"pa-Arab":{nu:["arabext"]},"pa-Guru":{nu:["latn"]},pap:{nu:["latn"]},"pap-AW":{nu:["latn"]},pcm:{nu:["latn"]},pis:{nu:["latn"]},pl:{nu:["latn"]},prg:{nu:["latn"]},ps:{nu:["arabext"]},"ps-PK":{nu:["arabext"]},pt:{nu:["latn"]},"pt-AO":{nu:["latn"]},"pt-CH":{nu:["latn"]},"pt-CV":{nu:["latn"]},"pt-GQ":{nu:["latn"]},"pt-GW":{nu:["latn"]},"pt-LU":{nu:["latn"]},"pt-MO":{nu:["latn"]},"pt-MZ":{nu:["latn"]},"pt-PT":{nu:["latn"]},"pt-ST":{nu:["latn"]},"pt-TL":{nu:["latn"]},qu:{nu:["latn"]},"qu-BO":{nu:["latn"]},"qu-EC":{nu:["latn"]},quc:{nu:["latn"]},raj:{nu:["deva"]},rhg:{nu:["latn"]},"rhg-Rohg":{nu:["latn"]},"rhg-Rohg-BD":{nu:["latn"]},rif:{nu:["latn"]},rm:{nu:["latn"]},rn:{nu:["latn"]},ro:{nu:["latn"]},"ro-MD":{nu:["latn"]},rof:{nu:["latn"]},ru:{nu:["latn"]},"ru-BY":{nu:["latn"]},"ru-KG":{nu:["latn"]},"ru-KZ":{nu:["latn"]},"ru-MD":{nu:["latn"]},"ru-UA":{nu:["latn"]},rw:{nu:["latn"]},rwk:{nu:["latn"]},sa:{nu:["deva"]},sah:{nu:["latn"]},saq:{nu:["latn"]},sat:{nu:["olck"]},"sat-Deva":{nu:["deva"]},"sat-Olck":{nu:["olck"]},sbp:{nu:["latn"]},sc:{nu:["latn"]},scn:{nu:["latn"]},sd:{nu:["arab"]},"sd-Arab":{nu:["arab"]},"sd-Deva":{nu:["latn"]},sdh:{nu:["arab"]},"sdh-IQ":{nu:["arab"]},se:{nu:["latn"]},"se-FI":{nu:["latn"]},"se-SE":{nu:["latn"]},seh:{nu:["latn"]},ses:{nu:["latn"]},sg:{nu:["latn"]},shi:{nu:["latn"]},"shi-Latn":{nu:["latn"]},"shi-Tfng":{nu:["latn"]},shn:{nu:["latn"]},"shn-TH":{nu:["latn"]},si:{nu:["latn"],separator:{latn:"."}},sid:{nu:["latn"]},sk:{nu:["latn"]},skr:{nu:["latn"]},sl:{nu:["latn"]},sma:{nu:["latn"]},"sma-NO":{nu:["latn"]},smj:{nu:["latn"]},"smj-NO":{nu:["latn"]},smn:{nu:["latn"],separator:{latn:"."}},sms:{nu:["latn"]},sn:{nu:["latn"]},so:{nu:["latn"]},"so-DJ":{nu:["latn"]},"so-ET":{nu:["latn"]},"so-KE":{nu:["latn"]},sq:{nu:["latn"]},"sq-MK":{nu:["latn"]},"sq-XK":{nu:["latn"]},sr:{nu:["latn"]},"sr-Cyrl":{nu:["latn"]},"sr-Cyrl-BA":{nu:["latn"]},"sr-Cyrl-ME":{nu:["latn"]},"sr-Cyrl-XK":{nu:["latn"]},"sr-Latn":{nu:["latn"]},"sr-Latn-BA":{nu:["latn"]},"sr-Latn-ME":{nu:["latn"]},"sr-Latn-XK":{nu:["latn"]},ss:{nu:["latn"]},"ss-SZ":{nu:["latn"]},ssy:{nu:["latn"]},st:{nu:["latn"]},"st-LS":{nu:["latn"]},su:{nu:["latn"],separator:{latn:"."}},"su-Latn":{nu:["latn"],separator:{latn:"."}},sv:{nu:["latn"]},"sv-AX":{nu:["latn"]},"sv-FI":{nu:["latn"],separator:{latn:"."}},sw:{nu:["latn"]},"sw-CD":{nu:["latn"]},"sw-KE":{nu:["latn"]},"sw-UG":{nu:["latn"]},syr:{nu:["latn"]},"syr-SY":{nu:["latn"]},szl:{nu:["latn"]},ta:{nu:["latn"]},"ta-LK":{nu:["latn"]},"ta-MY":{nu:["latn"]},"ta-SG":{nu:["latn"]},te:{nu:["latn"]},teo:{nu:["latn"]},"teo-KE":{nu:["latn"]},tg:{nu:["latn"]},th:{nu:["latn"]},ti:{nu:["latn"]},"ti-ER":{nu:["latn"]},tig:{nu:["latn"]},tk:{nu:["latn"]},tn:{nu:["latn"]},"tn-BW":{nu:["latn"]},to:{nu:["latn"]},tok:{nu:["latn"]},tpi:{nu:["latn"]},tr:{nu:["latn"]},"tr-CY":{nu:["latn"]},trv:{nu:["latn"]},trw:{nu:["latn"]},ts:{nu:["latn"]},tt:{nu:["latn"]},twq:{nu:["latn"]},tyv:{nu:["latn"]},tzm:{nu:["latn"]},ug:{nu:["latn"]},uk:{nu:["latn"]},und:{nu:["latn"]},ur:{nu:["latn"]},"ur-IN":{nu:["arabext"],separator:{arabext:"٫"}},uz:{nu:["latn"]},"uz-Arab":{nu:["arabext"]},"uz-Cyrl":{nu:["latn"]},"uz-Latn":{nu:["latn"]},vai:{nu:["latn"]},"vai-Latn":{nu:["latn"]},"vai-Vaii":{nu:["latn"]},ve:{nu:["latn"]},vec:{nu:["latn"]},vi:{nu:["latn"]},vmw:{nu:["latn"]},vo:{nu:["latn"]},vun:{nu:["latn"]},wa:{nu:["latn"]},wae:{nu:["latn"]},wal:{nu:["latn"]},wbp:{nu:["latn"]},wo:{nu:["latn"]},xh:{nu:["latn"]},xnr:{nu:["latn"]},xog:{nu:["latn"]},yav:{nu:["latn"]},yi:{nu:["latn"]},yo:{nu:["latn"]},"yo-BJ":{nu:["latn"]},yrl:{nu:["latn"]},"yrl-CO":{nu:["latn"]},"yrl-VE":{nu:["latn"]},yue:{nu:["latn"]},"yue-Hans":{nu:["latn"]},"yue-Hant":{nu:["latn"]},"yue-Hant-CN":{nu:["latn"]},za:{nu:["latn"]},zgh:{nu:["latn"]},zh:{nu:["latn"]},"zh-Hans":{nu:["latn"]},"zh-Hans-HK":{nu:["latn"]},"zh-Hans-MO":{nu:["latn"]},"zh-Hans-MY":{nu:["latn"]},"zh-Hans-SG":{nu:["latn"]},"zh-Hant":{nu:["latn"]},"zh-Hant-HK":{nu:["latn"]},"zh-Hant-MO":{nu:["latn"]},"zh-Hant-MY":{nu:["latn"]},"zh-Latn":{nu:["latn"]},zu:{nu:["latn"]}}}),Ln}var Ua;function Js(){if(Ua)return On;Ua=1,Object.defineProperty(On,"__esModule",{value:!0}),On.DurationFormat=void 0;var e=at,n=lf,t=cf(),r=df(),a=hf(),i=Qs(),s=gf(),o=vf(),l=["locale","style","years","yearsDisplay","months","monthsDisplay","weeks","weeksDisplay","days","daysDisplay","hours","hoursDisplay","minutes","minutesDisplay","seconds","secondsDisplay","milliseconds","millisecondsDisplay","microseconds","microsecondsDisplay","nanoseconds","nanosecondsDisplay","numberingSystem","fractionalDigits"],u=[{styleSlot:"years",displaySlot:"yearsDisplay",unit:"years",values:["long","short","narrow"],digitalDefault:"short"},{styleSlot:"months",displaySlot:"monthsDisplay",unit:"months",values:["long","short","narrow"],digitalDefault:"short"},{styleSlot:"weeks",displaySlot:"weeksDisplay",unit:"weeks",values:["long","short","narrow"],digitalDefault:"short"},{styleSlot:"days",displaySlot:"daysDisplay",unit:"days",values:["long","short","narrow"],digitalDefault:"short"},{styleSlot:"hours",displaySlot:"hoursDisplay",unit:"hours",values:["long","short","narrow","numeric","2-digit"],digitalDefault:"numeric"},{styleSlot:"minutes",displaySlot:"minutesDisplay",unit:"minutes",values:["long","short","narrow","numeric","2-digit"],digitalDefault:"numeric"},{styleSlot:"seconds",displaySlot:"secondsDisplay",unit:"seconds",values:["long","short","narrow","numeric","2-digit"],digitalDefault:"numeric"},{styleSlot:"milliseconds",displaySlot:"millisecondsDisplay",unit:"milliseconds",values:["long","short","narrow","numeric"],digitalDefault:"numeric"},{styleSlot:"microseconds",displaySlot:"microsecondsDisplay",unit:"microseconds",values:["long","short","narrow","numeric"],digitalDefault:"numeric"},{styleSlot:"nanoseconds",displaySlot:"nanosecondsDisplay",unit:"nanoseconds",values:["long","short","narrow","numeric"],digitalDefault:"numeric"}],d=function(){function f(m,p){var w=this&&this instanceof f?this.constructor:void 0;if(!w)throw new TypeError("Intl.DurationFormat must be called with 'new'");var h=(0,e.CanonicalizeLocaleList)(m),_=Object.create(null),y=p===void 0?Object.create(null):(0,e.ToObject)(p),x=(0,e.GetOption)(y,"localeMatcher","string",["best fit","lookup"],"best fit"),v=(0,e.GetOption)(y,"numberingSystem","string",void 0,void 0);if(v!==void 0&&s.numberingSystemNames.indexOf(v)<0)throw RangeError("Invalid numberingSystems: ".concat(v));_.nu=v,_.localeMatcher=x;var b=f.localeData,S=f.availableLocales,T=(0,n.ResolveLocale)(S,h,_,["nu"],b,f.getDefaultLocale),k=T.locale,I=(0,i.getInternalSlots)(this);I.initializedDurationFormat=!0,I.locale=k,I.numberingSystem=T.nu;var N=(0,e.GetOption)(y,"style","string",["long","short","narrow","digital"],"short");I.style=N,I.dataLocale=T.dataLocale;var j="";u.forEach(function(D){var F=D.styleSlot,O=D.displaySlot,G=D.unit,B=D.values,A=D.digitalDefault,V=(0,t.GetDurationUnitOptions)(G,y,N,B,A,j);I[F]=V.style,I[O]=V.display,(G==="hours"||G==="minutes"||G==="seconds"||G==="milliseconds"||G==="microseconds")&&(j=V.style)}),I.fractionalDigits=(0,e.GetNumberOption)(y,"fractionalDigits",0,9,void 0)}return f.prototype.resolvedOptions=function(){if(typeof this!="object"||!(0,e.OrdinaryHasInstance)(f,this))throw TypeError("Method Intl.DurationFormat.prototype.resolvedOptions called on incompatible receiver");for(var m=(0,i.getInternalSlots)(this),p={},w=0,h=l;w<h.length;w++){var _=h[w],y=m[_];_==="fractionalDigits"?y!==void 0&&(y=Number(y)):(0,e.invariant)(y!==void 0,"Missing internal slot ".concat(_)),p[_]=y}return p},f.prototype.formatToParts=function(m){var p=this,w=(0,i.getInternalSlots)(this);if(w.initializedDurationFormat===void 0)throw new TypeError("Error uninitialized locale");for(var h=(0,a.ToDurationRecord)(m),_=(0,r.PartitionDurationFormatPattern)(p,h),y=[],x=0,v=_;x<v.length;x++){var b=v[x],S=b.type,T=b.unit,k=b.value,I={type:S,value:k};T&&(I.unit=T),y.push(I)}return y},f.prototype.format=function(m){var p=this,w=(0,i.getInternalSlots)(this);if(w.initializedDurationFormat===void 0)throw new TypeError("Error uninitialized locale");for(var h=(0,a.ToDurationRecord)(m),_=(0,r.PartitionDurationFormatPattern)(p,h),y="",x=0,v=_;x<v.length;x++){var b=v[x].value;y+=b}return y},f.supportedLocalesOf=function(m,p){return(0,e.SupportedLocales)(f.availableLocales,(0,e.CanonicalizeLocaleList)(m),p)},f.__defaultLocale="en",f.availableLocales=new Set,f.localeData=Object.keys(o.TIME_SEPARATORS.localeData).reduce(function(m,p){f.availableLocales.add(p);var w=o.TIME_SEPARATORS.localeData[p].nu;return m[p]={nu:w,digitalFormat:o.TIME_SEPARATORS.localeData[p].separator||w.reduce(function(h,_){return h[_]=o.TIME_SEPARATORS.default,h},{})},m},{}),f.getDefaultLocale=function(){return f.__defaultLocale},f.polyfilled=!0,f}();return On.DurationFormat=d,On}var Ha;function yf(){return Ha||(Ha=1,function(e){Object.defineProperty(e,"__esModule",{value:!0});var n=Yl;n.__exportStar(Js(),e)}(tr)),tr}var bt={},za;function wf(){if(za)return bt;za=1,Object.defineProperty(bt,"__esModule",{value:!0}),bt.shouldPolyfill=e;function e(){return typeof Intl>"u"||!("DurationFormat"in Intl)}return bt}var Ka;function _f(){if(Ka)return nr;Ka=1,Object.defineProperty(nr,"__esModule",{value:!0});var e=yf(),n=wf();return typeof Intl>"u"&&(typeof window<"u"?Object.defineProperty(window,"Intl",{value:{}}):typeof sa<"u"&&Object.defineProperty(sa,"Intl",{value:{}})),(0,n.shouldPolyfill)()&&Object.defineProperty(Intl,"DurationFormat",{value:e.DurationFormat}),nr}_f();const Ye=(e,n)=>e.cooldown.reason===n||n.includes(e.cooldown.reason),bf=()=>{var p,w,h;const{character:e,actions:{rest:n,fight:t,gathering:r},lastAction:a,timeUntilReady:i,error:s,togglePause:o,status:l}=Ce(),u=zl(g.useMemo(()=>({x:(e==null?void 0:e.x)||0,y:(e==null?void 0:e.y)||0}),[e])),d=u&&u.data.name+(u.data.content?`[${(p=u.data.content)==null?void 0:p.code}]`:""),f=[{key:"rest",label:c.jsxs(c.Fragment,{children:[c.jsx(U,{icon:vo})," Rest"]}),variant:"success",action:n},{key:"fight",label:c.jsxs(c.Fragment,{children:[c.jsx(U,{icon:yo})," Fight"]}),variant:"danger",action:t},{key:"gather",label:c.jsxs(c.Fragment,{children:[c.jsx(U,{icon:wo})," Gather"]}),variant:"warning",action:r}],m=g.useMemo(()=>{if(!a)return"";if(Ye(a,"movement"))return`Moving to ${a.destination.name}`;if(Ye(a,"fight"))return c.jsxs(c.Fragment,{children:["Fight: ",a.fight.result,!!a.fight.drops.length&&". Found: ",a.fight.drops.map(_=>c.jsxs("div",{className:"me-1 d-inline-block",children:[c.jsx(ke,{code:_.code})," ",c.jsxs("small",{className:"text-muted",children:["x",_.quantity]})]},_.code))]});if(Ye(a,"gathering"))return c.jsxs(c.Fragment,{children:["Gathered"," ",a.details.items.map(_=>c.jsxs("div",{className:"ms-1 d-inline-block",children:[c.jsx(ke,{code:_.code}),c.jsxs("small",{className:"text-muted",children:[" x",_.quantity]})]},_.code))]});if(Ye(a,"rest"))return`Restored ${a.hp_restored}hp`;if(Ye(a,["withdraw_gold","deposit_gold"]))return`Bank gold updated. New amount: ${a.bank.quantity.toLocaleString()}`;if(Ye(a,"withdraw"))return c.jsxs(c.Fragment,{children:[c.jsx(ke,{code:a.item.code})," withdrawn"]});if(Ye(a,"deposit"))return c.jsxs(c.Fragment,{children:[c.jsx(ke,{code:a.item.code})," deposited"]});if(Ye(a,["equip","unequip"]))return c.jsxs(c.Fragment,{children:[c.jsx(ke,{code:a.item.code})," ",a.cooldown.reason,"ped"]})},[a]);return c.jsxs(Y,{children:[c.jsxs(Y.Body,{className:"d-flex flex-column gap-2",children:[c.jsxs(Y.Title,{className:"d-flex justify-content-between flex-column",children:[c.jsxs("div",{className:"d-flex justify-content-between align-items-between",children:[c.jsxs("div",{children:[c.jsx(Y.Img,{style:{maxWidth:20},src:`https://www.artifactsmmo.com/images/characters/${e==null?void 0:e.skin}.png`,className:"me-1"}),e==null?void 0:e.name," ",c.jsxs("small",{className:"text-muted",children:["lvl",e==null?void 0:e.level]})]}),c.jsxs(It,{style:{textTransform:"capitalize"},bg:Al[l],onClick:o,children:[l!==en.Cooldown&&l,l===en.Cooldown&&(i==null?void 0:i.round("seconds").toLocaleString()),l===en.Cooldown&&!i&&l]})]}),c.jsx("div",{children:c.jsxs("small",{className:"text-muted",children:[e==null?void 0:e.x,",",e==null?void 0:e.y,"@",d]})})]}),!e&&c.jsx(Nt,{children:c.jsxs(kt,{children:[c.jsx(Xe,{lg:3}),c.jsxs(Xe,{className:"d-flex flex-column gap-2",children:[c.jsx(_n,{variant:"danger",striped:!0,animated:!0,now:100,label:"Loading..."}),c.jsx(_n,{variant:"success",striped:!0,animated:!0,now:100,label:"Loading..."})]})]})}),e&&c.jsx(Nt,{children:c.jsxs(kt,{children:[c.jsx(Xe,{xs:3,children:c.jsx(Y.Img,{style:{maxWidth:80},src:`https://www.artifactsmmo.com/images/maps/${u==null?void 0:u.data.skin}.png`,alt:(w=u==null?void 0:u.data.content)==null?void 0:w.code,title:(h=u==null?void 0:u.data.content)==null?void 0:h.code})}),c.jsx(Xe,{children:c.jsxs(Dn,{gap:2,children:[c.jsx(_n,{variant:"danger",max:e==null?void 0:e.max_hp,now:e==null?void 0:e.hp,label:`${e==null?void 0:e.hp} / ${e==null?void 0:e.max_hp}`}),c.jsx(_n,{variant:"success",max:e==null?void 0:e.max_xp,now:e==null?void 0:e.xp,label:`${e==null?void 0:e.xp} / ${e==null?void 0:e.max_xp}`}),c.jsx(Dn,{gap:1,direction:"horizontal",children:c.jsx("span",{children:m||s})})]})})]})})]}),c.jsx(Y.Footer,{className:"d-flex gap-2",children:f.map(_=>c.jsxs(Nr,{size:"sm",children:[c.jsx(z,{variant:_.variant,onClick:()=>_.action(),children:_.label}),c.jsx(z,{variant:_.variant,onClick:()=>_.action({requeue:!0}),children:c.jsx(U,{icon:Hn})})]},_.key))})]})},Bn={weapon:["weapon"],shield:["shield"],helmet:["helmet"],body_armor:["body_armor"],leg_armor:["leg_armor"],boots:["boots"],ring:["ring1","ring2"],amulet:["amulet"],artifact:["artifact1","artifact2","artifact3"],utility:["utility1","utility2"],bag:["bag"],rune:["rune"]},xf=e=>Object.keys(Bn).includes(e),Xs=({action:e,code:n,quantity:t,max:r})=>{const{actions:{equip:a,consumeItem:i,recycleItem:s,deleteItem:o}}=Ce(),l=Bt(n),[u,d]=g.useState(Math.min(t,r));g.useEffect(()=>{d(Math.min(t,r))},[t,r]);const f=l&&xf(l==null?void 0:l.type)?l.type:null,m=f==="utility"?Math.min(u,100):1;return c.jsxs(Zn,{size:"sm",children:[(l==null?void 0:l.type)==="consumable"&&c.jsxs(c.Fragment,{children:[c.jsx(z,{size:"sm",variant:"outline-danger",onClick:()=>i({item:l,quantity:u}),children:c.jsx(U,{icon:Qa})}),c.jsx(z,{size:"sm",variant:"outline-danger",onClick:()=>i({item:l,quantity:u,requeue:!0}),children:c.jsx(U,{icon:Hn})})]}),l&&f&&Bn[f].length===1&&c.jsx(z,{size:"sm",variant:"light",onClick:()=>a({code:l.code,slot:Bn[f][0],quantity:1}),children:c.jsx(U,{icon:oa})}),l&&f&&Bn[f].length>1&&c.jsxs(Ne,{className:"d-inline-block",children:[c.jsx(Ne.Toggle,{size:"sm",variant:"light",children:c.jsx(U,{icon:oa})}),c.jsx(Ne.Menu,{children:Bn[f].map(p=>c.jsx(Ne.Item,{onClick:()=>a({code:l.code,slot:p,quantity:m}),children:p},p))})]}),c.jsx(tn.Control,{type:"number",value:u,onChange:p=>d(Number(p.target.value)),max:r,min:1}),c.jsx(z,{variant:"primary",onClick:()=>e({code:n,quantity:u}),children:c.jsx(U,{icon:_o})}),c.jsx(z,{variant:"warning",onClick:()=>e({code:n,quantity:1}),children:c.jsx(U,{icon:bo})}),c.jsx(z,{variant:"info",onClick:()=>e({code:n,quantity:u,requeue:!0}),children:c.jsx(U,{icon:Hn})}),c.jsx(z,{variant:"success",onClick:()=>s({code:n,quantity:u}),children:c.jsx(U,{icon:xo})}),c.jsx(z,{variant:"danger",onClick:()=>o({code:n,quantity:u}),children:c.jsx(U,{icon:Do})})]})},Df=()=>{const{character:e,actions:{withdraw:n}}=Ce(),{bankItems:t,pagination:r,bankDetails:a,filter:i,setFilter:s}=g.useContext(Ht);if(!(!t||!e))return c.jsxs(Y,{children:[c.jsx(Y.Header,{children:c.jsx(tn.Control,{type:"text",value:i||"",placeholder:"Filter",onChange:o=>s(o.target.value)})}),c.jsx(Y.Body,{children:c.jsxs(Ut,{children:[c.jsx("thead",{children:c.jsxs("tr",{children:[c.jsx("th",{children:"Item"}),c.jsx("th",{children:"Qty"}),c.jsx("th",{children:"Withdraw"})]})}),c.jsx("tbody",{children:t.data.map(o=>c.jsxs("tr",{children:[c.jsx("td",{children:c.jsx(ke,{code:o.code})}),c.jsx("td",{children:o.quantity}),c.jsx("td",{children:c.jsx(Xs,{code:o.code,quantity:o.quantity,action:n,max:Math.min(o.quantity,e.inventory_max_items)})})]},o.code))})]})}),c.jsx(Y.Footer,{children:c.jsxs("div",{className:"d-flex align-items-center justify-content-between",children:[c.jsxs("span",{children:[c.jsx(U,{icon:mn,color:"#ffd82f",fixedWidth:!0})," ",a==null?void 0:a.data.gold.toLocaleString()]}),c.jsx("div",{className:"d-flex justify-content-center align-items-center",children:c.jsx(Rt,{...r})}),c.jsxs("span",{children:[c.jsx(U,{icon:Ja,fixedWidth:!0}),t.total||0," / ",(a==null?void 0:a.data.slots)||0]})]})})]})},Qe=({skill:e})=>{const{character:n}=Ce();if(n)return c.jsxs("div",{className:"d-flex flex-column gap-1",children:[c.jsxs("div",{className:"d-flex justify-content-between",children:[c.jsxs("span",{children:[e," ",c.jsxs("small",{className:"text-muted",children:["@ lvl",n[`${e}_level`]]})]}),c.jsxs("span",{children:[n[`${e}_xp`],"/",n[`${e}_max_xp`]]})]}),c.jsx(_n,{now:n[`${e}_xp`],max:n[`${e}_max_xp`]})]})},de=({slot:e,...n})=>{const{handleShow:t}=g.useContext(Eo),{character:r,actions:{unEquip:a}}=Ce(),i=`${e}_slot`,s=r?r[i]:null,o=Bt(s),l=g.useMemo(()=>r&&e==="utility1"?r.utility1_slot_quantity:r&&e==="utility2"?r.utility2_slot_quantity:1,[e,r]);if(n.style||(n.style={minHeight:120}),n.style.minHeight||(n.style.minHeight=120),!!r)return c.jsxs("div",{...n,className:"d-flex justify-content-around align-items-center border rounded flex-column",children:[o&&s&&c.jsxs(c.Fragment,{children:[c.jsx("img",{src:`https://artifactsmmo.com/images/items/${o.code}.png`,height:40,alt:e}),c.jsxs("div",{className:"d-flex justify-content-between w-100 px-2",children:[c.jsx(z,{size:"sm",variant:"outline-light",onClick:()=>t(o),children:c.jsx(U,{icon:Co})}),l>1&&`x${l}`,c.jsx(z,{onClick:()=>a({slot:e,quantity:l}),size:"sm",variant:"outline-light",children:c.jsx(U,{icon:jo})})]})]}),!s&&c.jsx("small",{className:"text-muted",children:e})]})},Ef=()=>{const{character:e,actions:{taskAbandon:n}}=Ce(),t=Pi((e==null?void 0:e.task)||""),r=Bt((e==null?void 0:e.task)||"");if(!(!e||!e.task))return c.jsxs("div",{className:"mb-3",children:[c.jsx("h5",{children:"Active Task"}),c.jsxs("div",{className:"d-flex justify-content-between align-items-end",children:[e.task_type==="monsters"&&t&&c.jsxs(c.Fragment,{children:["Slay ",e.task_total," ",t.name]}),e.task_type==="items"&&r&&c.jsxs(c.Fragment,{children:["Deliver ",e.task_total," ",r.name]}),c.jsx(z,{variant:"outline-danger",size:"sm",onClick:()=>n(),children:"Abandon"})]}),c.jsx(_n,{className:"mt-1",variant:"warning",now:e.task_progress,max:e.task_total,label:e.task_progress})]})},Cf=()=>c.jsx(Y,{children:c.jsx(Y.Body,{children:c.jsx(Nt,{fluid:!0,children:c.jsxs(kt,{children:[c.jsxs(Xe,{xs:"auto",children:[c.jsx("h5",{children:"Equipment"}),c.jsxs("div",{className:"gap-1",style:{display:"grid",gridTemplateColumns:"130px 130px 130px"},children:[c.jsx(de,{style:{gridColumnStart:2},slot:"helmet"}),c.jsx(de,{style:{gridColumnStart:1},slot:"utility1"}),c.jsx(de,{slot:"amulet"}),c.jsx(de,{slot:"utility2"}),c.jsx(de,{slot:"weapon"}),c.jsx(de,{slot:"body_armor"}),c.jsx(de,{slot:"shield"}),c.jsx(de,{slot:"ring1"}),c.jsx(de,{slot:"leg_armor"}),c.jsx(de,{slot:"ring2"}),c.jsx(de,{slot:"rune"}),c.jsx(de,{slot:"boots"}),c.jsx(de,{slot:"bag"}),c.jsx(de,{slot:"artifact1"}),c.jsx(de,{slot:"artifact2"}),c.jsx(de,{slot:"artifact3"})]})]}),c.jsxs(Xe,{children:[c.jsx(Ef,{}),c.jsx("h5",{children:"Skills"}),c.jsxs(K,{children:[c.jsx(K.Item,{children:c.jsx(Qe,{skill:"mining"})}),c.jsx(K.Item,{children:c.jsx(Qe,{skill:"woodcutting"})}),c.jsx(K.Item,{children:c.jsx(Qe,{skill:"fishing"})}),c.jsx(K.Item,{children:c.jsx(Qe,{skill:"weaponcrafting"})}),c.jsx(K.Item,{children:c.jsx(Qe,{skill:"gearcrafting"})}),c.jsx(K.Item,{children:c.jsx(Qe,{skill:"jewelrycrafting"})}),c.jsx(K.Item,{children:c.jsx(Qe,{skill:"cooking"})}),c.jsx(K.Item,{children:c.jsx(Qe,{skill:"alchemy"})})]})]})]})})})}),jf=()=>{var a,i;const{character:e,actions:{deposit:n}}=Ce();if(!e)return;const t=((a=e.inventory)==null?void 0:a.filter(s=>s.code!==""))||[],r=t.map(s=>s.quantity).reduce((s,o)=>s+o,0);return c.jsxs(Y,{children:[c.jsx(Y.Body,{children:c.jsxs(Ut,{children:[c.jsx("thead",{children:c.jsxs("tr",{children:[c.jsx("th",{children:"Item"}),c.jsx("th",{children:"Qty"}),c.jsx("th",{children:"Deposit"})]})}),c.jsxs("tbody",{children:[t.length===0&&c.jsx("tr",{children:c.jsx("td",{colSpan:100,className:"text-muted text-center",children:"Nothing in your inventory"})}),t.map(s=>c.jsxs("tr",{children:[c.jsx("td",{children:c.jsx(ke,{code:s.code})}),c.jsx("td",{children:s.quantity}),c.jsx("td",{children:c.jsx(Xs,{code:s.code,quantity:s.quantity,action:n,max:s.quantity})})]},s.slot))]})]})}),c.jsxs(Y.Footer,{className:"d-flex justify-content-between",children:[c.jsxs("span",{children:[c.jsx(U,{icon:mn,color:"#ffd82f",fixedWidth:!0})," ",e.gold.toLocaleString()]}),c.jsxs("span",{children:[c.jsx(U,{icon:Ja,fixedWidth:!0}),t.length||0," / ",((i=e.inventory)==null?void 0:i.length)||0]}),c.jsxs("span",{children:[c.jsx(U,{icon:Qa,fixedWidth:!0}),r," / ",e.inventory_max_items]})]})]})},eo=Le.createContext({grandExchange:null,pagination:{page:1,pages:1,setPage:()=>null},refetch:async()=>new Promise(()=>null),filter:null,setFilter:()=>{}}),Sf=()=>{const{grandExchange:e,pagination:n,filter:t,setFilter:r}=g.useContext(eo);if(e)return c.jsxs(Y,{children:[c.jsx(Y.Header,{children:c.jsx(tn.Control,{type:"text",value:t||"",placeholder:"Filter",onChange:a=>r(a.target.value)})}),c.jsx(Y.Body,{children:c.jsxs(Ut,{children:[c.jsx("thead",{children:c.jsxs("tr",{children:[c.jsx("th",{children:"Item"}),c.jsx("th",{children:"Qty"}),c.jsx("th",{children:"Price"})]})}),c.jsx("tbody",{children:e.data.map(a=>c.jsxs("tr",{children:[c.jsx("td",{children:c.jsx(ke,{code:a.code})}),c.jsx("td",{children:a.quantity}),c.jsx("td",{children:a.price.toLocaleString()})]},a.code))})]})}),c.jsx(Y.Footer,{children:c.jsxs("div",{className:"d-flex align-items-center justify-content-between",children:[c.jsx("span",{}),c.jsx("div",{className:"d-flex justify-content-center align-items-center",children:c.jsx(Rt,{...n})}),c.jsx("span",{})]})})]})},Nf=()=>{const[e,n]=g.useState("character"),{refetch:t}=g.useContext(Ht);return c.jsxs(c.Fragment,{children:[c.jsxs(he,{variant:"underline",className:"mb-0 px-2",children:[c.jsx(he.Item,{children:c.jsxs(he.Link,{active:e==="character",onClick:()=>n("character"),children:[c.jsx(U,{icon:So})," Character"]})}),c.jsx(he.Item,{children:c.jsxs(he.Link,{active:e==="inventory",onClick:()=>n("inventory"),children:[c.jsx(U,{icon:No})," Inventory"]})}),c.jsx(he.Item,{children:c.jsxs(he.Link,{active:e==="bank",onClick:()=>{t().then(()=>n("bank"))},children:[c.jsx(U,{icon:ko})," Bank"]})}),c.jsx(he.Item,{className:"ms-auto",children:c.jsxs(he.Link,{active:e==="grand-exchange",onClick:()=>{t().then(()=>n("grand-exchange"))},children:[c.jsx(U,{icon:Io})," Grand Exchange"]})})]}),e==="character"&&c.jsx(Cf,{}),e==="inventory"&&c.jsx(jf,{}),e==="bank"&&c.jsx(Df,{}),e==="grand-exchange"&&c.jsx(Sf,{})]})},kf=({characterName:e})=>{const n=Nl(e||null);return c.jsx(kl,{value:n,children:c.jsx(Nt,{fluid:!0,children:c.jsxs(kt,{className:"g-4",children:[c.jsxs(Xe,{md:6,lg:4,className:"d-flex gap-2 flex-column",children:[c.jsx(bf,{}),c.jsx(Ul,{}),c.jsx(Hl,{})]}),c.jsx(Xe,{className:"d-flex gap-2 flex-column",children:c.jsx(Nf,{})})]})})})},If=({accountName:e,characterName:n})=>{const t=Bo(e),{refetch:r,...a}=Dl(),{refetch:i,...s}=_l(),o=El(),l=async()=>{await i(),await r()};return c.jsx(Ht.Provider,{value:{...a,...s,refetch:l},children:c.jsxs(eo.Provider,{value:o,children:[c.jsx(he,{variant:"underline",defaultActiveKey:n,className:"mx-3 mb-3",children:t.map(u=>c.jsx(he.Item,{children:c.jsxs(he.Link,{as:To,to:`/${e}/${u.name}/`,eventKey:u.name,children:[c.jsx("img",{style:{maxWidth:15},src:`https://www.artifactsmmo.com/images/characters/${u.skin}.png`,className:"me-1",alt:u.name}),u.name]})},u.name))}),t.map(u=>c.jsx("div",{className:n===u.name?"":"d-none",children:c.jsx(kf,{characterName:u.name})},u.name))]})})},Tf=Ao("/$accountName/$characterName/")({}),Mf=()=>{const{accountName:e,characterName:n}=Tf.useParams();return c.jsx(If,{accountName:e,characterName:n})};export{Tf as Route,Mf as component};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
